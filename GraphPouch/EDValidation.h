//  ____                _
// |  _ \ ___  ___  ___(_) __ _  ___ _ __
// | |_) / _ \/ __|/ _ \ |/ _` |/ _ \ '_ \
// |  _ <  __/ (__|  __/ | (_| |  __/ | | |
// |_| \_\___|\___|\___|_|\__, |\___|_| |_|
//                        |___/
//
// This code was generated by Receigen and will use:
//
// CFBundleIdentifier=com.edcodia.graphpouch
// CFBundleShortVersionString=1.0.3
// Prefix=ED
// NoMain=NO
//
// Don't forget to link with the IOKit and Security frameworks !
//

//
// The default pedantic mode (OFF)
// Define to 1 if you need pedantic mode.
//
#ifndef RECEIGEN_PEDANTIC
#define RECEIGEN_PEDANTIC 0
#endif

//
// C++ prologue
//
#ifdef __cplusplus
extern "C" {
#endif
    
    // Headers for general purpose functions
#import <CoreFoundation/CoreFoundation.h>
    
    // Headers for library loading
#import <dlfcn.h>
    
    // Headers for bundle security checks
#import <CommonCrypto/CommonDigest.h>
#import <Security/Security.h>
#import <Security/CMSDecoder.h>
#import <Security/CSCommon.h>
#import <Security/SecAsn1Coder.h>
#import <Security/SecAsn1Templates.h>
#import <Security/SecCode.h>
#import <Security/SecRequirement.h>
#import <Security/SecStaticCode.h>
    
    // Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>
    
    //
    // Structure describing an ASN.1 data
    //
    typedef struct _EDReceiptValidation_ASN1_DATA {
        size_t length;
        uint8 *data;
    } EDReceiptValidation_ASN1_DATA;
    
    //
    // Structure describing a receipt attribute
    //
    // ReceiptAttribute ::= SEQUENCE {
    //    type INTEGER,
    //    version INTEGER,
    //    value OCTET STRING
    // }
    //
    typedef struct _EDReceiptValidation_ReceiptAttribute {
        EDReceiptValidation_ASN1_DATA type;
        EDReceiptValidation_ASN1_DATA version;
        EDReceiptValidation_ASN1_DATA value;
    } EDReceiptValidation_ReceiptAttribute;
    
    //
    // Structure describing a receipt
    //
    // Payload ::= SET OF ReceiptAttribute
    //
    typedef struct _EDReceiptValidation_Payload {
        EDReceiptValidation_ReceiptAttribute **attributes;
    } EDReceiptValidation_Payload;
    
    //
    // ASN.1 template describing a receipt attribute or an InApp attribute
    //
    const SecAsn1Template EDReceiptValidation_kReceiptAttributeTemplate[] = {
        { SEC_ASN1_SEQUENCE, 0, NULL, sizeof(EDReceiptValidation_ReceiptAttribute) },
        { SEC_ASN1_INTEGER, offsetof(EDReceiptValidation_ReceiptAttribute, type), NULL, 0 },
        { SEC_ASN1_INTEGER, offsetof(EDReceiptValidation_ReceiptAttribute, version), NULL, 0 },
        { SEC_ASN1_OCTET_STRING, offsetof(EDReceiptValidation_ReceiptAttribute, value), NULL, 0 },
        { 0, 0, NULL, 0 }
    };
    
    //
    // ASN.1 template describing a receipt or an InApp receipt
    //
    const SecAsn1Template EDReceiptValidation_kSetOfReceiptAttributeTemplate[] = {
        { SEC_ASN1_SET_OF, offsetof(EDReceiptValidation_Payload, attributes), EDReceiptValidation_kReceiptAttributeTemplate, sizeof(EDReceiptValidation_Payload) },
        { 0, 0, NULL, 0 }
    };
    
    //
    // Shared context for receipt/InApp validation and parsing
    //
    typedef struct _EDReceiptValidation_Context {
        const char ** EDReceiptValidation_argv;
        int EDReceiptValidation_argc;
        CFTypeRef EDReceiptValidation_inAppIdentifiers;
        CFTypeRef EDReceiptValidation_dummy2;
        CFTypeRef EDReceiptValidation_dummy3;
        CFTypeRef EDReceiptValidation_mainBundle;
        CFTypeRef EDReceiptValidation_macData;
        CFTypeRef EDReceiptValidation_dummy4;
        CFTypeRef EDReceiptValidation_dummy5;
        CFTypeRef EDReceiptValidation_dummy1;
        CFTypeRef EDReceiptValidation_inAppBlock;
        CFTypeRef EDReceiptValidation_receiptData;
        CFTypeRef EDReceiptValidation_dummy0;
        CFTypeRef EDReceiptValidation_receiptDict;
    } EDReceiptValidation_Context;
    
    typedef struct _EDReceiptValidation_Parsing {
        EDReceiptValidation_ReceiptAttribute ** EDReceiptValidation_pointer;
        const void * EDReceiptValidation_source;
        size_t EDReceiptValidation_length;
        CFTypeRef EDReceiptValidation_dictionary;
        CFTypeRef EDReceiptValidation_dummy2;
        struct _EDReceiptValidation_Parsing * EDReceiptValidation_parent;
        CFTypeRef EDReceiptValidation_dummy3;
        CFTypeRef EDReceiptValidation_dummy1;
        CFTypeRef EDReceiptValidation_dummy4;
        CFTypeRef EDReceiptValidation_dummy0;
    } EDReceiptValidation_Parsing;
    
    
    //
    // Keys for each receipt attribute and InApp attribute
    //
    typedef enum _EDReceiptValidation_ReceiptAttributeType {
        // Bundle identifier
        EDReceiptValidation_ReceiptAttributeTypeBundleId = 2,
        // Application version
        EDReceiptValidation_ReceiptAttributeTypeBundleVersion = 3,
        // Opaque value
        EDReceiptValidation_ReceiptAttributeTypeOpaqueValue = 4,
        // Hash value
        EDReceiptValidation_ReceiptAttributeTypeHash = 5,
        // In-app purchase receipt
        EDReceiptValidation_ReceiptAttributeTypeInAppPurchase = 17,
        
        // Quantity
        EDReceiptValidation_InAppAttributeTypeQuantity = 1701,
        // Product identifier
        EDReceiptValidation_InAppAttributeTypeProductIdentifer = 1702,
        // Transaction identifier
        EDReceiptValidation_InAppAttributeTypeTransactionIdentifer = 1703,
        // Purchase date
        EDReceiptValidation_InAppAttributeTypePurchaseDate = 1704,
        // Original transaction identifier
        EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer = 1705,
        // Original purchase date
        EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate = 1706,
        
        // Storage key base value
        EDReceiptValidation_DataStoreNone = 2988,
        // Storage key for Bundle identifier
        EDReceiptValidation_DataStoreBundleId = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeBundleId << 2),
        // Storage key for Bundle identifier as raw data
        EDReceiptValidation_DataStoreBundleIdData = EDReceiptValidation_DataStoreBundleId + 1,
        // Storage key for Application version
        EDReceiptValidation_DataStoreBundleVersion = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeBundleVersion << 2),
        // Storage key for Application version as raw data
        EDReceiptValidation_DataStoreBundleVersionData = EDReceiptValidation_DataStoreBundleVersion + 1,
        // Storage key for Opaque value
        EDReceiptValidation_DataStoreOpaqueValue = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeOpaqueValue << 2),
        // Storage key for Hash value
        EDReceiptValidation_DataStoreHash = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeHash << 2),
        // Storage key for In-app purchase receipts
        EDReceiptValidation_DataStoreInAppPurchase = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeInAppPurchase << 2),
    } EDReceiptValidation_ReceiptAttributeType;
    
    //
    // Table for storing strings
    //
    static const char *EDReceiptValidation_strings[0x0075] = {
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M02L40S3c
        "\xf3\x17\x3d\x37\x38\x29\x31\xf3\x10\x2d\x26\x36\x25\x36\x3d\xf3\x0a\x36\x25\x31\x29\x3b\x33\x36\x2f\x37\xf3\x0d\x13\x0f\x2d\x38\xf2\x2a\x36\x25\x31\x29\x3b\x33\x36\x2f\xf3\x0d\x13\x0f\x2d\x38\xc4\xd8\x3c\xcc\xcd\xb9\x9d\xb5\x95\xab\x8e\xe3\xbd\x61\xe4\x57",
        // "SecRequirementCreateWithString" - #M02L20S70
        "\xe3\xf5\xf3\xe2\xf5\x01\x05\xf9\x02\xf5\xfd\xf5\xfe\x04\xd3\x02\xf5\xf1\x04\xf5\xe7\xf9\x04\xf8\xe3\x04\x02\xf9\xfe\xf7\x90\x75",
        // "SecAsn1CoderRelease" - #M03L20S5a
        "\x09\x3f\x39\x1b\x29\x34\x6b\x19\x35\x3e\x3f\x28\x08\x3f\x36\x3f\x3b\x29\x3f\x5a\x7c\x04\xa5\x02\xb6\xa3\x80\x86\x20\x86\xda\xc4",
        // "/System/Library/Frameworks/Security.framework/Security" - #M02L40S64
        "\xcb\xef\x15\x0f\x10\x01\x09\xcb\xe8\x05\xfe\x0e\xfd\x0e\x15\xcb\xe2\x0e\xfd\x09\x01\x13\x0b\x0e\x07\x0f\xcb\xef\x01\xff\x11\x0e\x05\x10\x15\xca\x02\x0e\xfd\x09\x01\x13\x0b\x0e\x07\xcb\xef\x01\xff\x11\x0e\x05\x10\x15\x9c\xb1\x36\xb7\x2e\x65\xb0\x33\x1f\x08",
        // "CC_SHA1_Update" - #M03L10S12
        "\x51\x51\x4d\x41\x5a\x53\x23\x4d\x47\x62\x76\x73\x66\x77\x12\xc7",
        // Empty slot
        "\x3a\x0b\xc4\x06\x59\x42\xc6\x13\xd8\x6d\x3e\x33\x65\x84\xe8\x1e",
        // Empty slot
        "\xbc\x02\xad\x44\xba\xde\x88\xa6\x7c\x7b\x9d\xa2\xe5\x53\x2f\x13",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M02L50Sffffff92
        "\x9d\xc1\xe7\xe1\xe2\xd3\xdb\x9d\xba\xd7\xd0\xe0\xcf\xe0\xe7\x9d\xb4\xe0\xcf\xdb\xd3\xe5\xdd\xe0\xd9\xe1\x9d\xb1\xdd\xe0\xd3\xb4\xdd\xe3\xdc\xd2\xcf\xe2\xd7\xdd\xdc\x9c\xd4\xe0\xcf\xdb\xd3\xe5\xdd\xe0\xd9\x9d\xb1\xdd\xe0\xd3\xb4\xdd\xe3\xdc\xd2\xcf\xe2\xd7\xdd\xdc\x6e\xb2\xcd\x79\x0e\x73\x9f\x35\xec\xaf\x9a\xc8\x84\x89",
        // "1.0.3" - #M02L10Sffffffd9
        "\x58\x55\x57\x55\x5a\x27\x3a\xa1\xde\xe7\x57\x61\xd0\x5e\xdf\x48",
        // "CC_SHA1_Init" - #M02L10Sffffffd5
        "\x6e\x6e\x8a\x7e\x73\x6c\x5c\x8a\x74\x99\x94\x9f\x2b\x12\xa9\xd5",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M02L40S14
        "\x1b\x3f\x65\x5f\x60\x51\x59\x1b\x38\x55\x4e\x5e\x4d\x5e\x65\x1b\x32\x5e\x4d\x59\x51\x63\x5b\x5e\x57\x5f\x1b\x35\x3b\x37\x55\x60\x1a\x52\x5e\x4d\x59\x51\x63\x5b\x5e\x57\x1b\x35\x3b\x37\x55\x60\xec\xd0\x7b\x8d\xf3\x01\x55\x3e\x1e\x52\x4d\x8a\x42\xda\xc0\xd6",
        // "CFEqual" - #M02L10Sffffffc3
        "\x80\x83\x82\xae\xb2\x9e\xa9\x3d\x02\x87\xe0\x95\xe9\xce\x86\xeb",
        // "CFBundleGetMainBundle" - #M02L20S53
        "\xf0\xf3\xef\x22\x1b\x11\x19\x12\xf4\x12\x21\xfa\x0e\x16\x1b\xef\x22\x1b\x11\x19\x12\xad\x9f\x32\xc4\xa2\x36\xe1\x85\x9a\x4e\x6b",
        // Empty slot
        "\x01\x05\xff\xcb\x0e\x3c\x16\x2c\x0f\x03\xb5\x3f\xb7\xc3\x99\x95",
        // "CFURLCreateWithFileSystemPathRelativeToBase" - #M03L30S7e
        "\x3d\x38\x2b\x2c\x32\x3d\x0c\x1b\x1f\x0a\x1b\x29\x17\x0a\x16\x38\x17\x12\x1b\x2d\x07\x0d\x0a\x1b\x13\x2e\x1f\x0a\x16\x2c\x1b\x12\x1f\x0a\x17\x08\x1b\x2a\x11\x3c\x1f\x0d\x1b\x7e\xb0\xd2\x07\x94",
        // "SecRequirementCreateWithStringAndErrors" - #M03L30S76
        "\x25\x13\x15\x24\x13\x07\x03\x1f\x04\x13\x1b\x13\x18\x02\x35\x04\x13\x17\x02\x13\x21\x1f\x02\x1e\x25\x02\x04\x1f\x18\x11\x37\x18\x12\x33\x04\x04\x19\x04\x05\x76\x41\x8f\xc7\x5d\xa7\x12\x7b\x55",
        // "CFNumberCreate" - #M03L10S6b
        "\x28\x2d\x25\x1e\x06\x09\x0e\x19\x28\x19\x0e\x0a\x1f\x0e\x6b\xc7",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M02L40S67
        "\xc8\xec\x12\x0c\x0d\xfe\x06\xc8\xe5\x02\xfb\x0b\xfa\x0b\x12\xc8\xdf\x0b\xfa\x06\xfe\x10\x08\x0b\x04\x0c\xc8\xe2\xe8\xe4\x02\x0d\xc7\xff\x0b\xfa\x06\xfe\x10\x08\x0b\x04\xc8\xe2\xe8\xe4\x02\x0d\x99\xdd\x24\xc1\x1a\x3a\x9b\xd1\x6c\xee\xcf\x6e\x89\x7c\xbb\x70",
        // Empty slot
        "\x83\xda\xd6\x13\x90\x54\x48\x26\x0a\xbe\x07\x8d\x34\x89\xfc\xac",
        // "NSApplicationMain" - #M03L20S87
        "\xc9\xd4\xc6\xf7\xf7\xeb\xee\xe4\xe6\xf3\xee\xe8\xe9\xca\xe6\xee\xe9\x87\x3a\x78\xf3\x12\xd3\xd9\xdb\x1b\x01\xb2\xd3\x3b\xfa\x69",
        // "CFBundleIdentifier" - #M03L20S35
        "\x76\x73\x77\x40\x5b\x51\x59\x50\x7c\x51\x50\x5b\x41\x5c\x53\x5c\x50\x47\x35\xd7\x71\x0b\xc3\xf1\x45\xe5\x7e\xb0\xce\x1a\x16\x40",
        // "dlsym" - #M02L10Sffffffe1
        "\x83\x8b\x92\x98\x8c\x1f\x72\xa0\x07\xdf\x1a\x1a\x45\x46\xad\xf7",
        // "IORegistryEntryGetParentEntry" - #M03L20S24
        "\x6d\x6b\x76\x41\x43\x4d\x57\x50\x56\x5d\x61\x4a\x50\x56\x5d\x63\x41\x50\x74\x45\x56\x41\x4a\x50\x61\x4a\x50\x56\x5d\x24\x14\x8a",
        // "CFDictionaryGetValue" - #M03L20Sae
        "\xed\xe8\xea\xc7\xcd\xda\xc7\xc1\xc0\xcf\xdc\xd7\xe9\xcb\xda\xf8\xcf\xc2\xdb\xcb\xae\x4c\x1b\x33\x02\xd4\xf8\x2a\x50\x8a\x75\xe0",
        // Empty slot
        "\x5d\x3b\x7e\x25\xcd\x25\x85\x27\x7f\xd2\x6e\xa7\x4e\x34\x5e\x55",
        // Empty slot
        "\x71\xde\x9b\x57\x1f\xa5\x17\x54\xa8\xc3\x4c\xe8\x6f\xf1\xa7\xe8",
        // Empty slot
        "\x84\xe2\xd1\x10\x74\x65\x36\x2d\x69\xf7\x77\x38\x34\xa2\x0f\xb5",
        // "CMSDecoderUpdateMessage" - #M02L20Sfffffffd
        "\x46\x50\x56\x47\x68\x66\x72\x67\x68\x75\x58\x73\x67\x64\x77\x68\x50\x68\x76\x76\x64\x6a\x68\x03\x76\x09\xfd\x28\x09\x53\x4b\x0c",
        // "CC_SHA1" - #M03L10S9e
        "\xdd\xdd\xc1\xcd\xd6\xdf\xaf\x9e\x4e\x11\xe9\xf6\x8f\xf7\x18\xe2",
        // Empty slot
        "\x16\x43\x41\x4b\x19\x0b\x04\x74\xb7\x9b\x53\xbd\xb0\x20\xf0\x51",
        // Empty slot
        "\x68\x76\x2f\x15\xff\xbb\x46\xbb\xc8\x57\x15\xd3\x8b\x0b\x50\x33",
        // "SecStaticCodeCreateWithPath" - #M03L20Sd6
        "\x85\xb3\xb5\x85\xa2\xb7\xa2\xbf\xb5\x95\xb9\xb2\xb3\x95\xa4\xb3\xb7\xa2\xb3\x81\xbf\xa2\xbe\x86\xb7\xa2\xbe\xd6\x68\x9d\xe8\xd4",
        // Empty slot
        "\x0c\xb0\x95\xb2\x40\x87\xf7\x33\x79\x5a\xe0\x5e\x65\x7b\xe7\xad",
        // Empty slot
        "\x2e\x1f\x22\x61\x16\x03\x65\xe2\x37\x90\xb6\x67\xca\x7d\x7c\x84",
        // Empty slot
        "\x21\xf8\xdc\x51\xba\x75\x69\xba\x47\x0f\xf2\x9d\xa4\x43\x56\xe6",
        // "1.0.3" - #M03L10S32
        "\x03\x1c\x02\x1c\x01\x32\xe1\x87\x1e\x05\x2e\x1a\x00\x94\xcf\x9f",
        // Empty slot
        "\x20\x85\x1d\x24\x41\xd3\xb7\x88\x8e\x9c\xd6\xef\xcd\x82\xc9\xbf",
        // Empty slot
        "\x13\xd1\x6b\xc8\xd6\xa4\x57\x48\xff\x9d\x43\xf2\xc2\x91\x2a\xae",
        // "CMSDecoderFinalizeMessage" - #M03L20S6d
        "\x2e\x20\x3e\x29\x08\x0e\x02\x09\x08\x1f\x2b\x04\x03\x0c\x01\x04\x17\x08\x20\x08\x1e\x1e\x0c\x0a\x08\x6d\xe0\xf3\x72\xa8\xca\xe9",
        // "CFDataGetBytePtr" - #M02L20S55
        "\xee\xf1\xef\x0c\x1f\x0c\xf2\x10\x1f\xed\x24\x1f\x10\xfb\x1f\x1d\xab\xda\xbb\x3d\x97\x45\x2f\xa1\x39\x15\xf0\xc5\x0d\xbf\x3c\xde",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M03L50S63
        "\x4c\x30\x1a\x10\x17\x06\x0e\x4c\x2f\x0a\x01\x11\x02\x11\x1a\x4c\x25\x11\x02\x0e\x06\x14\x0c\x11\x08\x10\x4c\x20\x0c\x11\x06\x25\x0c\x16\x0d\x07\x02\x17\x0a\x0c\x0d\x4d\x05\x11\x02\x0e\x06\x14\x0c\x11\x08\x4c\x20\x0c\x11\x06\x25\x0c\x16\x0d\x07\x02\x17\x0a\x0c\x0d\x63\x4f\x8b\x4a\xef\x60\x56\x61\x14\xde\x73\xd9\xa8\xfd",
        // "CFArrayCreateMutable" - #M02L20S3a
        "\x09\x0c\x07\x38\x38\x27\x3f\x09\x38\x2b\x27\x3a\x2b\x13\x3b\x3a\x27\x28\x32\x2b\xc6\x80\xe5\x8c\xff\xbf\x8c\xc7\xbf\x22\x47\xd0",
        // "CFDateFormatterCreate" - #M02L20Sffffffb5
        "\x8e\x91\x8f\xac\xbf\xb0\x91\xba\xbd\xb8\xac\xbf\xbf\xb0\xbd\x8e\xbd\xb0\xac\xbf\xb0\x4b\x01\xf0\x61\x1d\x82\x19\xb3\xed\x0f\x81",
        // "CFDataGetLength" - #M02L10Sffffff9a
        "\xa9\xac\xaa\xc7\xda\xc7\xad\xcb\xda\xb2\xcb\xd4\xcd\xda\xce\x66",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M02L50S3f
        "\xf0\x14\x3a\x34\x35\x26\x2e\xf0\x0d\x2a\x23\x33\x22\x33\x3a\xf0\x07\x33\x22\x2e\x26\x38\x30\x33\x2c\x34\xf0\x04\x30\x33\x26\x07\x30\x36\x2f\x25\x22\x35\x2a\x30\x2f\xef\x27\x33\x22\x2e\x26\x38\x30\x33\x2c\xf0\x04\x30\x33\x26\x07\x30\x36\x2f\x25\x22\x35\x2a\x30\x2f\xc1\xad\x78\xe4\xd9\x31\x4d\x85\xd8\x95\x12\x98\x7c\x3f",
        // "/usr/lib/libSystem.dylib" - #M02L20S56
        "\xd9\x1f\x1d\x1c\xd9\x16\x13\x0c\xd9\x16\x13\x0c\xfd\x23\x1d\x1e\x0f\x17\xd8\x0e\x23\x16\x13\x0c\xaa\xa3\x8a\xa4\x77\xd8\xe4\x41",
        // "/usr/lib/libSystem.dylib" - #M03L20S9a
        "\xb5\xef\xe9\xe8\xb5\xf6\xf3\xf8\xb5\xf6\xf3\xf8\xc9\xe3\xe9\xee\xff\xf7\xb4\xfe\xe3\xf6\xf3\xf8\x9a\x3b\x62\x53\x61\x28\xb8\xa4",
        // Empty slot
        "\x01\x19\x91\xdb\xaf\xfa\xba\x62\xe5\x0a\xe5\xf2\x9f\xc5\x63\xff",
        // "CFRelease" - #M02L10Sffffffd8
        "\x6b\x6e\x7a\x8d\x94\x8d\x89\x9b\x8d\x28\x5a\xda\x29\x7f\x23\x86",
        // "IOBSDNameMatching" - #M02L20S05
        "\x44\x4a\x3d\x4e\x3f\x49\x5c\x68\x60\x48\x5c\x6f\x5e\x63\x64\x69\x62\xfb\x3c\x3f\x00\xc0\xad\x77\x59\xf3\xdf\x4d\x14\x68\xa5\x58",
        // "SecStaticCodeCheckValidityWithErrors" - #M02L30Sffffff93
        "\xc0\xd2\xd0\xc0\xe1\xce\xe1\xd6\xd0\xb0\xdc\xd1\xd2\xb0\xd5\xd2\xd0\xd8\xc3\xce\xd9\xd6\xd1\xd6\xe1\xe6\xc4\xd6\xe1\xd5\xb2\xdf\xdf\xdc\xdf\xe0\x6d\x6e\xea\x10\x47\x82\xe2\x7b\xe8\xdc\x00\x5a",
        // "IOIteratorNext" - #M03L10S7e
        "\x37\x31\x37\x0a\x1b\x0c\x1f\x0a\x11\x0c\x30\x1b\x06\x0a\x7e\xda",
        // "CFDateFormatterCreateDateFromString" - #M03L30S66
        "\x25\x20\x22\x07\x12\x03\x20\x09\x14\x0b\x07\x12\x12\x03\x14\x25\x14\x03\x07\x12\x03\x22\x07\x12\x03\x20\x14\x09\x0b\x35\x12\x14\x0f\x08\x01\x66\x2e\xbd\xe6\x59\x67\xf7\xdb\x8e\x1b\x4e\xc9\x79",
        // "CFDateFormatterSetFormat" - #M02L20S2a
        "\x19\x1c\x1a\x37\x4a\x3b\x1c\x45\x48\x43\x37\x4a\x4a\x3b\x48\x29\x3b\x4a\x1c\x45\x48\x43\x37\x4a\xd6\x96\x3c\xdd\xe1\x41\x7f\x5e",
        // "IOMasterPort" - #M02L10S01
        "\x48\x4e\x4c\x60\x72\x73\x64\x71\x4f\x6e\x71\x73\xff\xbf\xc5\x03",
        // "CFDataCreate" - #M03L10Sbe
        "\xfd\xf8\xfa\xdf\xca\xdf\xfd\xcc\xdb\xdf\xca\xdb\xbe\x9c\x0b\xd6",
        // "SecPolicyCreateBasicX509" - #M03L20S9d
        "\xce\xf8\xfe\xcd\xf2\xf1\xf4\xfe\xe4\xde\xef\xf8\xfc\xe9\xf8\xdf\xfc\xee\xf4\xfe\xc5\xa8\xad\xa4\x9d\x9c\x7f\x80\xeb\xdc\x19\x61",
        // Empty slot
        "\x10\x55\x59\xb2\x80\xc4\xbb\x72\x83\x03\x93\x65\x23\xbc\xcd\x2c",
        // "CFArrayAppendValue" - #M03L20Scf
        "\x8c\x89\x8e\xbd\xbd\xae\xb6\x8e\xbf\xbf\xaa\xa1\xab\x99\xae\xa3\xba\xaa\xcf\xc5\x92\xb3\x0a\xc7\x4e\xb0\x01\x81\xf3\xc6\xc9\x12",
        // "SecAsn1Decode" - #M02L10S38
        "\x1b\x2d\x2b\x09\x3b\x36\xf9\x0c\x2d\x2b\x37\x2c\x2d\xc8\xf7\xa4",
        // "IOObjectRelease" - #M02L10S36
        "\x13\x19\x19\x2c\x34\x2f\x2d\x3e\x1c\x2f\x36\x2f\x2b\x3d\x2f\xca",
        // "CFURLCreateCopyAppendingPathComponent" - #M02L30S4c
        "\xf7\xfa\x09\x06\x00\xf7\x26\x19\x15\x28\x19\xf7\x23\x24\x2d\xf5\x24\x24\x19\x22\x18\x1d\x22\x1b\x04\x15\x28\x1c\xf7\x23\x21\x24\x23\x22\x19\x22\x28\xb4\x56\x49\x2b\x48\x2a\x01\x76\x8b\xe4\x61",
        // "CC_SHA1_Final" - #M03L10Sa7
        "\xe4\xe4\xf8\xf4\xef\xe6\x96\xf8\xe1\xce\xc9\xc6\xcb\xa7\x1b\xd1",
        // Empty slot
        "\xb7\xcb\x09\xda\xe3\x03\x5b\x13\xc1\x16\x6e\x23\x23\x93\x8c\x8d",
        // "CFDictionaryCreateMutable" - #M03L20S32
        "\x71\x74\x76\x5b\x51\x46\x5b\x5d\x5c\x53\x40\x4b\x71\x40\x57\x53\x46\x57\x7f\x47\x46\x53\x50\x5e\x57\x32\x28\xa0\xc6\x62\x5d\x79",
        // "CFBundleGetIdentifier" - #M03L20Scf
        "\x8c\x89\x8d\xba\xa1\xab\xa3\xaa\x88\xaa\xbb\x86\xab\xaa\xa1\xbb\xa6\xa9\xa6\xaa\xbd\xcf\x34\x0f\xd5\xce\xb4\xcb\x63\x31\xa0\xc8",
        // Empty slot
        "\x1a\x40\x5e\x5c\x6e\x6e\xe0\xd5\x62\xc5\xd1\xd4\x17\xb6\x06\xd1",
        // "CMSDecoderGetNumSigners" - #M03L20Sd0
        "\x93\x9d\x83\x94\xb5\xb3\xbf\xb4\xb5\xa2\x97\xb5\xa4\x9e\xa5\xbd\x83\xb9\xb7\xbe\xb5\xa2\xa3\xd0\x24\xf6\x27\x50\x5a\x92\x57\x35",
        // "SecStaticCodeCheckValidity" - #M02L20S45
        "\x0e\x20\x1e\x0e\x2f\x1c\x2f\x24\x1e\xfe\x2a\x1f\x20\xfe\x23\x20\x1e\x26\x11\x1c\x27\x24\x1f\x24\x2f\x34\xbb\xbb\x89\xc5\x4f\x13",
        // Empty slot
        "\x49\xce\x84\x7b\xa1\xd0\x73\x83\x3b\x19\x54\x24\x55\x4d\x91\xad",
        // "CFStringCreateWithBytes" - #M03L20S62
        "\x21\x24\x31\x16\x10\x0b\x0c\x05\x21\x10\x07\x03\x16\x07\x35\x0b\x16\x0a\x20\x1b\x16\x07\x11\x62\x4f\xa5\x2b\x98\x28\x94\xb1\xbe",
        // Empty slot
        "\xa1\xcd\x93\x4e\xa5\x17\x25\xe5\x81\x3a\x56\x67\x62\x8b\xa0\x3d",
        // Empty slot
        "\xdb\x54\xce\xff\x3d\x3f\xfb\x6c\x9e\x90\xc8\x20\xc9\xc9\xb0\x7c",
        // "IORegistryEntryCreateCFProperty" - #M03L20Se8
        "\xa1\xa7\xba\x8d\x8f\x81\x9b\x9c\x9a\x91\xad\x86\x9c\x9a\x91\xab\x9a\x8d\x89\x9c\x8d\xab\xae\xb8\x9a\x87\x98\x8d\x9a\x9c\x91\xe8",
        // "com.edcodia.graphpouch" - #M03L20Sa8
        "\xcb\xc7\xc5\x86\xcd\xcc\xcb\xc7\xcc\xc1\xc9\x86\xcf\xda\xc9\xd8\xc0\xd8\xc7\xdd\xcb\xc0\xa8\x5d\x08\xac\x88\x68\xd6\xae\x0d\x1f",
        // "CFDataCreateMutable" - #M02L20S6a
        "\xd9\xdc\xda\xf7\x0a\xf7\xd9\x08\xfb\xf7\x0a\xfb\xe3\x0b\x0a\xf7\xf8\x02\xfb\x96\x0e\x62\x94\x8d\x32\xc5\x13\xe1\xcd\x3f\xcf\xd5",
        // "CFStringCompare" - #M03L10Saa
        "\xe9\xec\xf9\xde\xd8\xc3\xc4\xcd\xe9\xc5\xc7\xda\xcb\xd8\xcf\xaa",
        // "CFDataAppendBytes" - #M02L20Sffffffe2
        "\x61\x64\x62\x7f\x92\x7f\x5f\x8e\x8e\x83\x8c\x82\x60\x97\x92\x83\x91\x1e\xa2\x37\x91\x78\xe3\x6a\x07\x9b\xe6\x73\x22\xf7\x00\xa9",
        // "IOServiceGetMatchingServices" - #M02L20S62
        "\xe7\xed\xf1\x03\x10\x14\x07\x01\x03\xe5\x03\x12\xeb\xff\x12\x01\x06\x07\x0c\x05\xf1\x03\x10\x14\x07\x01\x03\x11\x9e\x31\xcc\xb6",
        // "/System/Library/Frameworks/Security.framework/Security" - #M02L40Sffffffd0
        "\x5f\x83\xa9\xa3\xa4\x95\x9d\x5f\x7c\x99\x92\xa2\x91\xa2\xa9\x5f\x76\xa2\x91\x9d\x95\xa7\x9f\xa2\x9b\xa3\x5f\x83\x95\x93\xa5\xa2\x99\xa4\xa9\x5e\x96\xa2\x91\x9d\x95\xa7\x9f\xa2\x9b\x5f\x83\x95\x93\xa5\xa2\x99\xa4\xa9\x30\x68\xa9\xef\x8d\xbc\xee\x09\x4a\x08",
        // "CFDictionaryAddValue" - #M02L20Sffffffa0
        "\xa3\xa6\xa4\xc9\xc3\xd4\xc9\xcf\xce\xc1\xd2\xd9\xa1\xc4\xc4\xb6\xc1\xcc\xd5\xc5\x60\xa2\x09\x97\x4e\x93\xdc\x16\xfa\x25\xcc\x1a",
        // Empty slot
        "\x44\x97\x7e\xb0\x54\x7b\x30\x0b\xf3\x2f\xac\xa2\x92\x34\x87\xce",
        // Empty slot
        "\x7b\xc3\x5b\x35\x84\xc7\xfd\x24\x89\xfc\xd0\xf4\xc2\xa9\xb4\x75",
        // Empty slot
        "\x47\x26\xba\xbf\xf8\x6c\xb6\x0c\xd8\x0b\xa3\x07\xba\x34\x6e\x79",
        // "en0" - #M02L10S0b
        "\x5a\x63\x25\xf5\x2d\x47\xe5\x3d\xcd\xff\x3a\xa3\x34\x30\xb7\xb2",
        // "CMSDecoderCopyContent" - #M03L20S85
        "\xc6\xc8\xd6\xc1\xe0\xe6\xea\xe1\xe0\xf7\xc6\xea\xf5\xfc\xc6\xea\xeb\xf1\xe0\xeb\xf1\x85\xdc\x0b\x54\x94\xbc\xd2\x50\xbd\x36\xbb",
        // "Contents/_MASReceipt/receipt" - #M02L20S60
        "\xe3\x0f\x0e\x14\x05\x0e\x14\x13\xcf\xff\xed\xe1\xf3\xf2\x05\x03\x05\x09\x10\x14\xcf\x12\x05\x03\x05\x09\x10\x14\xa0\x77\x28\x8d",
        // Empty slot
        "\x07\xcb\x4f\xd4\x07\x06\xc7\xce\x4f\x57\xf5\x94\x82\xc4\x55\xe6",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" - #M02L40S35
        "\xfa\x1e\x44\x3e\x3f\x30\x38\xfa\x17\x34\x2d\x3d\x2c\x3d\x44\xfa\x11\x3d\x2c\x38\x30\x42\x3a\x3d\x36\x3e\xfa\x0c\x3b\x3b\x16\x34\x3f\xf9\x31\x3d\x2c\x38\x30\x42\x3a\x3d\x36\xfa\x0c\x3b\x3b\x16\x34\x3f\xcb\x83\x7f\x5a\x93\x95\x40\x84\x9c\x56\x38\x45\x20\xc8",
        // Empty slot
        "\x57\xa1\xfe\x8b\x79\x52\x5f\x01\xbc\x8f\xe5\xaf\xbf\xf6\x5c\xba",
        // Empty slot
        "\xad\x79\xfe\x2d\x27\xf0\x20\x61\xcf\x18\xc1\x6d\xf3\x63\xac\xd7",
        // "exit" - #M02L10S0e
        "\x57\x6a\x5b\x66\xf2\x86\x54\x44\x82\x8f\x3f\x54\xb4\x50\xad\x94",
        // Empty slot
        "\x4e\x14\x21\x0b\x74\x78\x1c\x4c\x1e\xd6\xd5\xd9\xdf\xd7\xae\xed",
        // "CFBundleCopyBundleURL" - #M02L20Sffffffd8
        "\x6b\x6e\x6a\x9d\x96\x8c\x94\x8d\x6b\x97\x98\xa1\x6a\x9d\x96\x8c\x94\x8d\x7d\x7a\x74\x28\x19\x27\xc6\x33\x46\x69\xa6\x6a\x19\xc2",
        // "CMSDecoderCopySignerStatus" - #M02L20Sffffffad
        "\x96\xa0\xa6\x97\xb8\xb6\xc2\xb7\xb8\xc5\x96\xc2\xc3\xcc\xa6\xbc\xba\xc1\xb8\xc5\xa6\xc7\xb4\xc7\xc8\xc6\x53\xe3\xc1\x7e\xe4\x18",
        // "dlopen" - #M03L10Sd7
        "\xb3\xbb\xb8\xa7\xb2\xb9\xd7\xb6\x22\x0b\xe1\x64\x25\x5b\x48\x5f",
        // "CFStringCreateWithCString" - #M03L20S98
        "\xdb\xde\xcb\xec\xea\xf1\xf6\xff\xdb\xea\xfd\xf9\xec\xfd\xcf\xf1\xec\xf0\xdb\xcb\xec\xea\xf1\xf6\xff\x98\xaf\xaa\xf0\x87\x73\xf9",
        // "com.edcodia.graphpouch" - #M02L20S3f
        "\x24\x30\x2e\xef\x26\x25\x24\x30\x25\x2a\x22\xef\x28\x33\x22\x31\x29\x31\x30\x36\x24\x29\xc1\xad\x13\x55\xd2\xd9\x5b\x98\x38\x13",
        // "/System/Library/Frameworks/Security.framework/Security" - #M03L40S12
        "\x3d\x41\x6b\x61\x66\x77\x7f\x3d\x5e\x7b\x70\x60\x73\x60\x6b\x3d\x54\x60\x73\x7f\x77\x65\x7d\x60\x79\x61\x3d\x41\x77\x71\x67\x60\x7b\x66\x6b\x3c\x74\x60\x73\x7f\x77\x65\x7d\x60\x79\x3d\x41\x77\x71\x67\x60\x7b\x66\x6b\x12\x7c\x1d\x82\x4e\xfd\x65\xf2\xc3\x3e",
        // "CMSDecoderCreate" - #M03L20S9a
        "\xd9\xd7\xc9\xde\xff\xf9\xf5\xfe\xff\xe8\xd9\xe8\xff\xfb\xee\xff\x9a\xf8\x27\xf3\xc0\x5c\xdf\xc3\x59\xea\xf6\xd4\xe8\x6a\x69\xb5",
        // Empty slot
        "\x87\xdd\xd3\x15\xd0\xf1\x39\x7f\x52\xea\x69\x6e\xde\xe7\xe4\x6f",
        // "CFURLCreateDataAndPropertiesFromResource" - #M02L30Sffffffd9
        "\x6a\x6d\x7c\x79\x73\x6a\x99\x8c\x88\x9b\x8c\x6b\x88\x9b\x88\x68\x95\x8b\x77\x99\x96\x97\x8c\x99\x9b\x90\x8c\x9a\x6d\x99\x96\x94\x79\x8c\x9a\x96\x9c\x99\x8a\x8c\x27\x23\xea\xf4\xf8\x3c\x18\xbb",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M02L50Sffffffba
        "\x75\x99\xbf\xb9\xba\xab\xb3\x75\x92\xaf\xa8\xb8\xa7\xb8\xbf\x75\x8c\xb8\xa7\xb3\xab\xbd\xb5\xb8\xb1\xb9\x75\x89\xb5\xb8\xab\x8c\xb5\xbb\xb4\xaa\xa7\xba\xaf\xb5\xb4\x74\xac\xb8\xa7\xb3\xab\xbd\xb5\xb8\xb1\x75\x89\xb5\xb8\xab\x8c\xb5\xbb\xb4\xaa\xa7\xba\xaf\xb5\xb4\x46\xe5\x63\x85\xe7\x5d\xd4\x87\xd1\xda\xdd\x17\x7d\x25",
        // "CFBundleShortVersionString" - #M02L20Sffffffcd
        "\x76\x79\x75\xa8\xa1\x97\x9f\x98\x86\x9b\xa2\xa5\xa7\x89\x98\xa5\xa6\x9c\xa2\xa1\x86\xa7\xa5\x9c\xa1\x9a\x33\x11\x58\xc4\x04\xc7",
        // "anchor apple generic" - #M03L20S79
        "\x18\x17\x1a\x11\x16\x0b\x59\x18\x09\x09\x15\x1c\x59\x1e\x1c\x17\x1c\x0b\x10\x1a\x79\x3c\x03\x1c\x09\xd3\xed\x56\xe3\xfa\x02\xeb",
        // Empty slot
        "\x71\x0f\xda\xe6\x16\x85\x0c\xbf\xf1\x21\x59\x11\x1f\x2e\x28\x50",
        // Empty slot
        "\xc5\xd6\x03\x85\x85\xc5\xf2\xde\xa2\x12\x30\x8e\x62\x97\x40\x5e",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M02L40Sffffffeb
        "\x44\x68\x8e\x88\x89\x7a\x82\x44\x61\x7e\x77\x87\x76\x87\x8e\x44\x5b\x87\x76\x82\x7a\x8c\x84\x87\x80\x88\x44\x5e\x64\x60\x7e\x89\x43\x7b\x87\x76\x82\x7a\x8c\x84\x87\x80\x44\x5e\x64\x60\x7e\x89\x15\xa1\x77\x0e\xf1\x9c\xdd\x31\xf2\x20\x31\x93\x5a\x57\x5b\xda",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" - #M02L30S3a
        "\x3f\x3f\x3f\x3f\xed\xf3\xed\x13\x13\xed\xf3\xed\x2a\x2a\xed\x1a\xed\x0e\x0e\xed\x00\xed\x33\x33\xed\x00\xed\x39\x39\xed\x20\xed\xc6\xab\xdc\x87\xe9\x4e\x39\xaf\xe8\x57\xc2\xdd\x9c\x99\x02\xa0",
        // Empty slot
        "\xe4\xb3\x80\xcd\xb8\x80\xc5\x37\x17\xfd\x11\x4b\x6c\x73\x8d\x73",
        // Empty slot
        "\x48\x57\x3d\x4f\x85\x4d\x2f\x13\x2a\x26\x65\x48\xcd\x8c\xf9\xba",
        // Empty slot
        "\x0a\x5c\xff\xd4\xc2\xb4\xc2\x52\x8e\xab\x47\x35\x40\xa5\xaf\x8f",
        // "/System/Library/Frameworks/Security.framework/Security" - #M03L40S3e
        "\x11\x6d\x47\x4d\x4a\x5b\x53\x11\x72\x57\x5c\x4c\x5f\x4c\x47\x11\x78\x4c\x5f\x53\x5b\x49\x51\x4c\x55\x4d\x11\x6d\x5b\x5d\x4b\x4c\x57\x4a\x47\x10\x58\x4c\x5f\x53\x5b\x49\x51\x4c\x55\x11\x6d\x5b\x5d\x4b\x4c\x57\x4a\x47\x3e\xdb\x52\xbd\x67\x3d\x22\x3e\x18\x3a",
        // Empty slot
        "\xe7\x09\x28\x19\xca\xb4\x64\x2a\xa9\x24\xcd\xe4\xbd\x11\x74\xc5",
        // "IOMACAddress" - #M03L10S1a
        "\x53\x55\x57\x5b\x59\x5b\x7e\x7e\x68\x7f\x69\x69\x1a\x62\xba\x2b",
        // "CFBundleGetValueForInfoDictionaryKey" - #M02L30S53
        "\xf0\xf3\xef\x22\x1b\x11\x19\x12\xf4\x12\x21\x03\x0e\x19\x22\x12\xf3\x1c\x1f\xf6\x1b\x13\x1c\xf1\x16\x10\x21\x16\x1c\x1b\x0e\x1f\x26\xf8\x12\x26\xad\xf1\xe6\x83\x66\x9e\x2b\xe3\x48\x53\x22\xd1",
        // "SecAsn1CoderCreate" - #M02L20Sfffffff2
        "\x61\x73\x71\x4f\x81\x7c\x3f\x51\x7d\x72\x73\x80\x51\x80\x73\x6f\x82\x73\x0e\x70\x56\x85\xe4\xfe\x83\xfb\xa0\xde\x52\xd7\xb0\x24",
    };
    
    
    //
    // Table for storing various pointers
    //
    static void *EDReceiptValidation_pointers[0x0075] = {
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) dlsym),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) CFStringCreateWithBytes),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) dlopen),
        ((void *) CFStringCreateWithCString),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
    };
    
    
    //
    // Function pointer for string decryption
    //
    typedef void (*EDReceiptValidation_decrypt)(const char *p1, char *p2, char p3, int p4);
    
    // Function pointer for 'CC_SHA1'
    typedef unsigned char *(*_EDReceiptValidation_CC_SHA1_)(const void *data, CC_LONG len, unsigned char *md);
    // Function pointer for 'CC_SHA1_Final'
    typedef int (*_EDReceiptValidation_CC_SHA1_Final_)(unsigned char *md, CC_SHA1_CTX *c);
    // Function pointer for 'CC_SHA1_Init'
    typedef int (*_EDReceiptValidation_CC_SHA1_Init_)(CC_SHA1_CTX *c);
    // Function pointer for 'CC_SHA1_Update'
    typedef int (*_EDReceiptValidation_CC_SHA1_Update_)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
    // Function pointer for 'CFArrayAppendValue'
    typedef void (*_EDReceiptValidation_CFArrayAppendValue_)(CFMutableArrayRef theArray, const void *value);
    // Function pointer for 'CFArrayCreateMutable'
    typedef CFMutableArrayRef (*_EDReceiptValidation_CFArrayCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
    // Function pointer for 'CFBundleCopyBundleURL'
    typedef CFURLRef (*_EDReceiptValidation_CFBundleCopyBundleURL_)(CFBundleRef bundle);
    // Function pointer for 'CFBundleGetIdentifier'
    typedef CFStringRef (*_EDReceiptValidation_CFBundleGetIdentifier_)(CFBundleRef bundle);
    // Function pointer for 'CFBundleGetMainBundle'
    typedef CFBundleRef (*_EDReceiptValidation_CFBundleGetMainBundle_)();
    // Function pointer for 'CFBundleGetValueForInfoDictionaryKey'
    typedef CFTypeRef (*_EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_)(CFBundleRef bundle, CFStringRef key);
    // Function pointer for 'CFDataAppendBytes'
    typedef void (*_EDReceiptValidation_CFDataAppendBytes_)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
    // Function pointer for 'CFDataCreate'
    typedef CFDataRef (*_EDReceiptValidation_CFDataCreate_)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
    // Function pointer for 'CFDataCreateMutable'
    typedef CFMutableDataRef (*_EDReceiptValidation_CFDataCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity);
    // Function pointer for 'CFDataGetBytePtr'
    typedef const UInt8 *(*_EDReceiptValidation_CFDataGetBytePtr_)(CFDataRef theData);
    // Function pointer for 'CFDataGetLength'
    typedef CFIndex (*_EDReceiptValidation_CFDataGetLength_)(CFDataRef theData);
    // Function pointer for 'CFDateFormatterCreate'
    typedef CFDateFormatterRef (*_EDReceiptValidation_CFDateFormatterCreate_)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
    // Function pointer for 'CFDateFormatterCreateDateFromString'
    typedef CFDateRef (*_EDReceiptValidation_CFDateFormatterCreateDateFromString_)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
    // Function pointer for 'CFDateFormatterSetFormat'
    typedef void (*_EDReceiptValidation_CFDateFormatterSetFormat_)(CFDateFormatterRef formatter, CFStringRef formatString);
    // Function pointer for 'CFDictionaryAddValue'
    typedef void (*_EDReceiptValidation_CFDictionaryAddValue_)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Function pointer for 'CFDictionaryCreateMutable'
    typedef CFMutableDictionaryRef (*_EDReceiptValidation_CFDictionaryCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
    // Function pointer for 'CFDictionaryGetValue'
    typedef const void *(*_EDReceiptValidation_CFDictionaryGetValue_)(CFDictionaryRef theDict, const void *key);
    // Function pointer for 'CFEqual'
    typedef Boolean (*_EDReceiptValidation_CFEqual_)(CFTypeRef cf1, CFTypeRef cf2);
    // Function pointer for 'CFNumberCreate'
    typedef CFNumberRef (*_EDReceiptValidation_CFNumberCreate_)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
    // Function pointer for 'CFRelease'
    typedef void (*_EDReceiptValidation_CFRelease_)(CFTypeRef cf);
    // Function pointer for 'CFStringCompare'
    typedef CFComparisonResult (*_EDReceiptValidation_CFStringCompare_)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
    // Function pointer for 'CFStringCreateWithBytes'
    typedef CFStringRef (*_EDReceiptValidation_CFStringCreateWithBytes_)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
    // Function pointer for 'CFStringCreateWithCString'
    typedef CFStringRef (*_EDReceiptValidation_CFStringCreateWithCString_)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
    // Function pointer for 'CFURLCreateCopyAppendingPathComponent'
    typedef CFURLRef (*_EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
    // Function pointer for 'CFURLCreateDataAndPropertiesFromResource'
    typedef Boolean (*_EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_)(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode);
    // Function pointer for 'CFURLCreateWithFileSystemPathRelativeToBase'
    typedef CFURLRef (*_EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
    // Function pointer for 'CMSDecoderCopyContent'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderCopyContent_)(CMSDecoderRef cmsDecoder, CFDataRef *contentOut);
    // Function pointer for 'CMSDecoderCopySignerStatus'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderCopySignerStatus_)(CMSDecoderRef cmsDecoder, size_t signerIndex, CFTypeRef policyOrArray, Boolean evaluateSecTrust, CMSSignerStatus *signerStatusOut, SecTrustRef *secTrustOut, OSStatus *certVerifyResultCodeOut);
    // Function pointer for 'CMSDecoderCreate'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderCreate_)(CMSDecoderRef *cmsDecoderOut);
    // Function pointer for 'CMSDecoderFinalizeMessage'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderFinalizeMessage_)(CMSDecoderRef cmsDecoder);
    // Function pointer for 'CMSDecoderGetNumSigners'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderGetNumSigners_)(CMSDecoderRef cmsDecoder, size_t *numSignersOut);
    // Function pointer for 'CMSDecoderUpdateMessage'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderUpdateMessage_)(CMSDecoderRef cmsDecoder, const void *msgBytes, size_t msgBytesLen);
    // Function pointer for 'dlopen'
    typedef void *(*_EDReceiptValidation_dlopen_)(const char * __path, int __mode);
    // Function pointer for 'dlsym'
    typedef void *(*_EDReceiptValidation_dlsym_)(void * __handle, const char * __symbol);
    // Function pointer for 'exit'
    typedef void (*_EDReceiptValidation_exit_)(int status);
    // Function pointer for 'IOBSDNameMatching'
    typedef CFMutableDictionaryRef (*_EDReceiptValidation_IOBSDNameMatching_)(mach_port_t masterPort, uint32_t options, const char * bsdName);
    // Function pointer for 'IOIteratorNext'
    typedef io_object_t (*_EDReceiptValidation_IOIteratorNext_)(io_iterator_t iterator);
    // Function pointer for 'IOMasterPort'
    typedef kern_return_t (*_EDReceiptValidation_IOMasterPort_)(mach_port_t bootstrapPort, mach_port_t *masterPort);
    // Function pointer for 'IOObjectRelease'
    typedef kern_return_t (*_EDReceiptValidation_IOObjectRelease_)(io_object_t object);
    // Function pointer for 'IORegistryEntryCreateCFProperty'
    typedef CFTypeRef (*_EDReceiptValidation_IORegistryEntryCreateCFProperty_)(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options);
    // Function pointer for 'IORegistryEntryGetParentEntry'
    typedef kern_return_t (*_EDReceiptValidation_IORegistryEntryGetParentEntry_)(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t * parent);
    // Function pointer for 'IOServiceGetMatchingServices'
    typedef kern_return_t (*_EDReceiptValidation_IOServiceGetMatchingServices_)(mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t *existing);
    // Function pointer for 'NSApplicationMain'
    typedef int (*_EDReceiptValidation_NSApplicationMain_)(int argc, const char *argv[]);
    // Function pointer for 'SecAsn1CoderCreate'
    typedef OSStatus (*_EDReceiptValidation_SecAsn1CoderCreate_)(SecAsn1CoderRef *coder);
    // Function pointer for 'SecAsn1CoderRelease'
    typedef OSStatus (*_EDReceiptValidation_SecAsn1CoderRelease_)(SecAsn1CoderRef coder);
    // Function pointer for 'SecAsn1Decode'
    typedef OSStatus (*_EDReceiptValidation_SecAsn1Decode_)(SecAsn1CoderRef coder, const void *src, size_t len, const SecAsn1Template *templates, void *dest);
    // Function pointer for 'SecPolicyCreateBasicX509'
    typedef SecPolicyRef (*_EDReceiptValidation_SecPolicyCreateBasicX509_)(void);
    // Function pointer for 'SecRequirementCreateWithString'
    typedef OSStatus (*_EDReceiptValidation_SecRequirementCreateWithString_)(CFStringRef text, SecCSFlags flags, SecRequirementRef *requirement);
    // Function pointer for 'SecRequirementCreateWithStringAndErrors'
    typedef OSStatus (*_EDReceiptValidation_SecRequirementCreateWithStringAndErrors_)(CFStringRef text, SecCSFlags flags, CFErrorRef *errors, SecRequirementRef *requirement);
    // Function pointer for 'SecStaticCodeCheckValidity'
    typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCheckValidity_)(SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement);
    // Function pointer for 'SecStaticCodeCheckValidityWithErrors'
    typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_)(SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement, CFErrorRef *errors);
    // Function pointer for 'SecStaticCodeCreateWithPath'
    typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCreateWithPath_)(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode);
    
    
    // Function wrapper for 'CC_SHA1'
#define EDReceiptValidation_CC_SHA1_ ((_EDReceiptValidation_CC_SHA1_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 45, 86, 32, EDReceiptValidation_ObfuscationFunction2, 28, 158, 16))
    // Function wrapper for 'CC_SHA1_Final'
#define EDReceiptValidation_CC_SHA1_Final_ ((_EDReceiptValidation_CC_SHA1_Final_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 46, 154, 32, EDReceiptValidation_ObfuscationFunction2, 62, 167, 16))
    // Function wrapper for 'CC_SHA1_Init'
#define EDReceiptValidation_CC_SHA1_Init_ ((_EDReceiptValidation_CC_SHA1_Init_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 45, 86, 32, EDReceiptValidation_ObfuscationFunction1, 9, -43, 16))
    // Function wrapper for 'CC_SHA1_Update'
#define EDReceiptValidation_CC_SHA1_Update_ ((_EDReceiptValidation_CC_SHA1_Update_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 46, 154, 32, EDReceiptValidation_ObfuscationFunction2, 4, 18, 16))
    // Function wrapper for 'CFArrayAppendValue'
#define EDReceiptValidation_CFArrayAppendValue_ ((_EDReceiptValidation_CFArrayAppendValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction4, 58, 207, 32))
    // Function wrapper for 'CFArrayCreateMutable'
#define EDReceiptValidation_CFArrayCreateMutable_ ((_EDReceiptValidation_CFArrayCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction3, 41, 58, 32))
    // Function wrapper for 'CFBundleCopyBundleURL'
#define EDReceiptValidation_CFBundleCopyBundleURL_ ((_EDReceiptValidation_CFBundleCopyBundleURL_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction1, 93, -40, 32))
    // Function wrapper for 'CFBundleGetIdentifier'
#define EDReceiptValidation_CFBundleGetIdentifier_ ((_EDReceiptValidation_CFBundleGetIdentifier_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction2, 65, 207, 32))
    // Function wrapper for 'CFBundleGetMainBundle'
#define EDReceiptValidation_CFBundleGetMainBundle_ ((_EDReceiptValidation_CFBundleGetMainBundle_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 40, 99, 80, EDReceiptValidation_ObfuscationFunction1, 12, 83, 32))
    // Function wrapper for 'CFBundleGetValueForInfoDictionaryKey'
#define EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_ ((_EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction1, 115, 83, 48))
    // Function wrapper for 'CFDataAppendBytes'
#define EDReceiptValidation_CFDataAppendBytes_ ((_EDReceiptValidation_CFDataAppendBytes_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction1, 77, -30, 32))
    // Function wrapper for 'CFDataCreate'
#define EDReceiptValidation_CFDataCreate_ ((_EDReceiptValidation_CFDataCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 44, 63, 80, EDReceiptValidation_ObfuscationFunction2, 55, 190, 16))
    // Function wrapper for 'CFDataCreateMutable'
#define EDReceiptValidation_CFDataCreateMutable_ ((_EDReceiptValidation_CFDataCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 7, -110, 80, EDReceiptValidation_ObfuscationFunction1, 75, 106, 32))
    // Function wrapper for 'CFDataGetBytePtr'
#define EDReceiptValidation_CFDataGetBytePtr_ ((_EDReceiptValidation_CFDataGetBytePtr_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 40, 99, 80, EDReceiptValidation_ObfuscationFunction1, 39, 85, 32))
    // Function wrapper for 'CFDataGetLength'
#define EDReceiptValidation_CFDataGetLength_ ((_EDReceiptValidation_CFDataGetLength_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction1, 43, -102, 16))
    // Function wrapper for 'CFDateFormatterCreate'
#define EDReceiptValidation_CFDateFormatterCreate_ ((_EDReceiptValidation_CFDateFormatterCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 40, 99, 80, EDReceiptValidation_ObfuscationFunction3, 42, -75, 32))
    // Function wrapper for 'CFDateFormatterCreateDateFromString'
#define EDReceiptValidation_CFDateFormatterCreateDateFromString_ ((_EDReceiptValidation_CFDateFormatterCreateDateFromString_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction2, 52, 102, 48))
    // Function wrapper for 'CFDateFormatterSetFormat'
#define EDReceiptValidation_CFDateFormatterSetFormat_ ((_EDReceiptValidation_CFDateFormatterSetFormat_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction1, 53, 42, 32))
    // Function wrapper for 'CFDictionaryAddValue'
#define EDReceiptValidation_CFDictionaryAddValue_ ((_EDReceiptValidation_CFDictionaryAddValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 40, 99, 80, EDReceiptValidation_ObfuscationFunction3, 80, -96, 32))
    // Function wrapper for 'CFDictionaryCreateMutable'
#define EDReceiptValidation_CFDictionaryCreateMutable_ ((_EDReceiptValidation_CFDictionaryCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 44, 63, 80, EDReceiptValidation_ObfuscationFunction2, 64, 50, 32))
    // Function wrapper for 'CFDictionaryGetValue'
#define EDReceiptValidation_CFDictionaryGetValue_ ((_EDReceiptValidation_CFDictionaryGetValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 7, -110, 80, EDReceiptValidation_ObfuscationFunction2, 23, 174, 32))
    // Function wrapper for 'CFEqual'
#define EDReceiptValidation_CFEqual_ ((_EDReceiptValidation_CFEqual_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 40, 99, 80, EDReceiptValidation_ObfuscationFunction3, 11, -61, 16))
    // Function wrapper for 'CFNumberCreate'
#define EDReceiptValidation_CFNumberCreate_ ((_EDReceiptValidation_CFNumberCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 7, -110, 80, EDReceiptValidation_ObfuscationFunction2, 16, 107, 16))
    // Function wrapper for 'CFRelease'
#define EDReceiptValidation_CFRelease_ ((_EDReceiptValidation_CFRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, -70, 80, EDReceiptValidation_ObfuscationFunction1, 48, -40, 16))
    // Function wrapper for 'CFStringCompare'
#define EDReceiptValidation_CFStringCompare_ ((_EDReceiptValidation_CFStringCompare_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 44, 63, 80, EDReceiptValidation_ObfuscationFunction2, 76, 170, 16))
    // Function wrapper for 'CFStringCreateWithBytes'
#define EDReceiptValidation_CFStringCreateWithBytes_ ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_pointers[70])
    // Function wrapper for 'CFStringCreateWithCString'
#define EDReceiptValidation_CFStringCreateWithCString_ ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_pointers[96])
    // Function wrapper for 'CFURLCreateCopyAppendingPathComponent'
#define EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_ ((_EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 7, -110, 80, EDReceiptValidation_ObfuscationFunction3, 61, 76, 48))
    // Function wrapper for 'CFURLCreateDataAndPropertiesFromResource'
#define EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_ ((_EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 40, 99, 80, EDReceiptValidation_ObfuscationFunction3, 101, -39, 48))
    // Function wrapper for 'CFURLCreateWithFileSystemPathRelativeToBase'
#define EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_ ((_EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 44, 63, 80, EDReceiptValidation_ObfuscationFunction2, 14, 126, 48))
    // Function wrapper for 'CMSDecoderCopyContent'
#define EDReceiptValidation_CMSDecoderCopyContent_ ((_EDReceiptValidation_CMSDecoderCopyContent_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 79, -48, 64, EDReceiptValidation_ObfuscationFunction2, 85, 133, 32))
    // Function wrapper for 'CMSDecoderCopySignerStatus'
#define EDReceiptValidation_CMSDecoderCopySignerStatus_ ((_EDReceiptValidation_CMSDecoderCopySignerStatus_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 98, 18, 64, EDReceiptValidation_ObfuscationFunction3, 94, -83, 32))
    // Function wrapper for 'CMSDecoderCreate'
#define EDReceiptValidation_CMSDecoderCreate_ ((_EDReceiptValidation_CMSDecoderCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 79, -48, 64, EDReceiptValidation_ObfuscationFunction2, 99, 154, 32))
    // Function wrapper for 'CMSDecoderFinalizeMessage'
#define EDReceiptValidation_CMSDecoderFinalizeMessage_ ((_EDReceiptValidation_CMSDecoderFinalizeMessage_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 112, 62, 64, EDReceiptValidation_ObfuscationFunction4, 38, 109, 32))
    // Function wrapper for 'CMSDecoderGetNumSigners'
#define EDReceiptValidation_CMSDecoderGetNumSigners_ ((_EDReceiptValidation_CMSDecoderGetNumSigners_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 98, 18, 64, EDReceiptValidation_ObfuscationFunction4, 67, 208, 32))
    // Function wrapper for 'CMSDecoderUpdateMessage'
#define EDReceiptValidation_CMSDecoderUpdateMessage_ ((_EDReceiptValidation_CMSDecoderUpdateMessage_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 112, 62, 64, EDReceiptValidation_ObfuscationFunction1, 27, -3, 32))
    // Function wrapper for 'dlopen'
#define EDReceiptValidation_dlopen_ ((_EDReceiptValidation_dlopen_) EDReceiptValidation_pointers[95])
    // Function wrapper for 'dlsym'
#define EDReceiptValidation_dlsym_ ((_EDReceiptValidation_dlsym_) EDReceiptValidation_pointers[21])
    // Function wrapper for 'exit'
#define EDReceiptValidation_exit_ ((_EDReceiptValidation_exit_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 46, 154, 32, EDReceiptValidation_ObfuscationFunction1, 91, 14, 16))
    // Function wrapper for 'IOBSDNameMatching'
#define EDReceiptValidation_IOBSDNameMatching_ ((_EDReceiptValidation_IOBSDNameMatching_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 107, -21, 64, EDReceiptValidation_ObfuscationFunction3, 49, 5, 32))
    // Function wrapper for 'IOIteratorNext'
#define EDReceiptValidation_IOIteratorNext_ ((_EDReceiptValidation_IOIteratorNext_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 0, 60, 64, EDReceiptValidation_ObfuscationFunction4, 51, 126, 16))
    // Function wrapper for 'IOMasterPort'
#define EDReceiptValidation_IOMasterPort_ ((_EDReceiptValidation_IOMasterPort_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 10, 20, 64, EDReceiptValidation_ObfuscationFunction1, 54, 1, 16))
    // Function wrapper for 'IOObjectRelease'
#define EDReceiptValidation_IOObjectRelease_ ((_EDReceiptValidation_IOObjectRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 10, 20, 64, EDReceiptValidation_ObfuscationFunction1, 60, 54, 16))
    // Function wrapper for 'IORegistryEntryCreateCFProperty'
#define EDReceiptValidation_IORegistryEntryCreateCFProperty_ ((_EDReceiptValidation_IORegistryEntryCreateCFProperty_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 10, 20, 64, EDReceiptValidation_ObfuscationFunction4, 73, 232, 32))
    // Function wrapper for 'IORegistryEntryGetParentEntry'
#define EDReceiptValidation_IORegistryEntryGetParentEntry_ ((_EDReceiptValidation_IORegistryEntryGetParentEntry_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 17, 103, 64, EDReceiptValidation_ObfuscationFunction4, 22, 36, 32))
    // Function wrapper for 'IOServiceGetMatchingServices'
#define EDReceiptValidation_IOServiceGetMatchingServices_ ((_EDReceiptValidation_IOServiceGetMatchingServices_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 17, 103, 64, EDReceiptValidation_ObfuscationFunction1, 78, 98, 32))
    // Function wrapper for 'NSApplicationMain'
#define EDReceiptValidation_NSApplicationMain_ ((_EDReceiptValidation_NSApplicationMain_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 88, 53, 64, EDReceiptValidation_ObfuscationFunction2, 19, 135, 32))
    // Function wrapper for 'SecAsn1CoderCreate'
#define EDReceiptValidation_SecAsn1CoderCreate_ ((_EDReceiptValidation_SecAsn1CoderCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 79, -48, 64, EDReceiptValidation_ObfuscationFunction1, 116, -14, 32))
    // Function wrapper for 'SecAsn1CoderRelease'
#define EDReceiptValidation_SecAsn1CoderRelease_ ((_EDReceiptValidation_SecAsn1CoderRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 98, 18, 64, EDReceiptValidation_ObfuscationFunction4, 2, 90, 32))
    // Function wrapper for 'SecAsn1Decode'
#define EDReceiptValidation_SecAsn1Decode_ ((_EDReceiptValidation_SecAsn1Decode_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 112, 62, 64, EDReceiptValidation_ObfuscationFunction1, 59, 56, 16))
    // Function wrapper for 'SecPolicyCreateBasicX509'
#define EDReceiptValidation_SecPolicyCreateBasicX509_ ((_EDReceiptValidation_SecPolicyCreateBasicX509_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 112, 62, 64, EDReceiptValidation_ObfuscationFunction2, 56, 157, 32))
    // Function wrapper for 'SecRequirementCreateWithString'
#define EDReceiptValidation_SecRequirementCreateWithString_ ((_EDReceiptValidation_SecRequirementCreateWithString_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 98, 18, 64, EDReceiptValidation_ObfuscationFunction1, 1, 112, 32))
    // Function wrapper for 'SecRequirementCreateWithStringAndErrors'
#define EDReceiptValidation_SecRequirementCreateWithStringAndErrors_ ((_EDReceiptValidation_SecRequirementCreateWithStringAndErrors_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 112, 62, 64, EDReceiptValidation_ObfuscationFunction2, 15, 118, 48))
    // Function wrapper for 'SecStaticCodeCheckValidity'
#define EDReceiptValidation_SecStaticCodeCheckValidity_ ((_EDReceiptValidation_SecStaticCodeCheckValidity_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 3, 100, 64, EDReceiptValidation_ObfuscationFunction3, 68, 69, 32))
    // Function wrapper for 'SecStaticCodeCheckValidityWithErrors'
#define EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_ ((_EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 3, 100, 64, EDReceiptValidation_ObfuscationFunction3, 50, -109, 48))
    // Function wrapper for 'SecStaticCodeCreateWithPath'
#define EDReceiptValidation_SecStaticCodeCreateWithPath_ ((_EDReceiptValidation_SecStaticCodeCreateWithPath_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 112, 62, 64, EDReceiptValidation_ObfuscationFunction4, 31, 214, 32))
    
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction1(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] + _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction1CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        char *_tmp2 = _tmp1;
        EDReceiptValidation_ObfuscationFunction1(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction3(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] + _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction3CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        EDReceiptValidation_ObfuscationFunction3(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_CFStringCreateWithCString_)(kCFAllocatorDefault, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction2(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction2CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        char *_tmp2 = _tmp1;
        EDReceiptValidation_ObfuscationFunction2(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction4(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction4CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        EDReceiptValidation_ObfuscationFunction4(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_CFStringCreateWithCString_)(kCFAllocatorDefault, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    //
    // CodeBlock LookupFunction
    //
    inline static void *EDReceiptValidation_LookupFunction1(EDReceiptValidation_decrypt _func1, int _index1, char _seed1, int _len1, EDReceiptValidation_decrypt _func2, int _index2, char _seed2, int _len2) {
        char tmp[0x50];
        // Load the library if needed
        if (EDReceiptValidation_pointers[_index1] == NULL) {
            _func1(EDReceiptValidation_strings[_index1], tmp, _seed1, _len1);
            EDReceiptValidation_pointers[_index1] = ((_EDReceiptValidation_dlopen_) EDReceiptValidation_dlopen_)(tmp, RTLD_LAZY);
        }
        // Locate the function if needed
        if (EDReceiptValidation_pointers[_index2] == NULL) {
            _func2(EDReceiptValidation_strings[_index2], tmp, _seed2, _len2);
            EDReceiptValidation_pointers[_index2] = ((_EDReceiptValidation_dlsym_) EDReceiptValidation_dlsym_)(EDReceiptValidation_pointers[_index1], tmp);
        }
        return EDReceiptValidation_pointers[_index2];
    }
    
    //
    // CodeBlock GetMainBundle
    //
#if DEBUG
    inline static void EDReceiptValidation_GetMainBundle1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        // Retrieve the main bundle
        CFTypeRef _bundle = EDReceiptValidation_CFBundleGetMainBundle_();
        if (!_bundle) {
            EDReceiptValidation_CFRelease_(_bundle);
        }
        EDReceiptValidation_ctx->EDReceiptValidation_mainBundle = (CFBundleRef) _bundle;
    }
#else
#define EDReceiptValidation_GetMainBundle1(EDReceiptValidation_ctx) { \
CFTypeRef _bundle = EDReceiptValidation_CFBundleGetMainBundle_(); \
if (!_bundle) { \
EDReceiptValidation_CFRelease_(_bundle); \
} \
EDReceiptValidation_ctx->EDReceiptValidation_mainBundle = (CFBundleRef) _bundle; \
}
#endif
    
    //
    // CodeBlock LoadReceipt
    //
#if DEBUG
    inline static void EDReceiptValidation_LoadReceipt1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1;
        CFURLRef _url1, _url2;
        SInt32 _errorCode;
        volatile int _code = 80; _code -= 37; _code *= 4; _code += 1;
        // Compute the path to the receipt
        _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
        _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[86]), 96, 32);
        _url2 = EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_(kCFAllocatorDefault, _str1, kCFURLPOSIXPathStyle, false, _url1);
        EDReceiptValidation_CFRelease_(_str1);
        EDReceiptValidation_CFRelease_(_url1);
        // Load the receipt data
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptData);
        EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_(kCFAllocatorDefault, _url2, (CFDataRef *) &(EDReceiptValidation_ctx->EDReceiptValidation_receiptData), NULL, NULL, &_errorCode);
        if (_errorCode) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_url1);
        }
        EDReceiptValidation_CFRelease_(_url2);
    }
#else
#define EDReceiptValidation_LoadReceipt1(EDReceiptValidation_ctx) { \
CFStringRef _str1; \
CFURLRef _url1, _url2; \
SInt32 _errorCode; \
volatile int _code = 55; _code -= 21; _code *= 5; _code += 3; \
_url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
_str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[86]), 96, 32); \
_url2 = EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_(kCFAllocatorDefault, _str1, kCFURLPOSIXPathStyle, false, _url1); \
EDReceiptValidation_CFRelease_(_str1); \
EDReceiptValidation_CFRelease_(_url1); \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptData); \
EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_(kCFAllocatorDefault, _url2, (CFDataRef *) &(EDReceiptValidation_ctx->EDReceiptValidation_receiptData), NULL, NULL, &_errorCode); \
if (_errorCode) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_url1); \
} \
EDReceiptValidation_CFRelease_(_url2); \
}
#endif
    
    //
    // CodeBlock GetMacAddress
    //
#if DEBUG
    inline static void EDReceiptValidation_GetMacAddress1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        kern_return_t _kernResult;
        mach_port_t _master_port;
        CFMutableDictionaryRef _matchingDict;
        io_iterator_t _iterator;
        io_object_t _service, _parentService;
        volatile int _code = 82; _code -= 39; _code *= 4; _code += 1;
        char *_str1;
        CFStringRef _str2;
        _str2 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[114]), 26, 16);
        // Open a MACH port
        _kernResult = EDReceiptValidation_IOMasterPort_(MACH_PORT_NULL, &_master_port);
        if (_kernResult != KERN_SUCCESS) {
            goto EDReceiptValidation_GetMacAddress1__bail;
            EDReceiptValidation_CFRelease_(_str2);
        }
        // Create a search for primary interface
        char _str1_[0x50];
        EDReceiptValidation_ObfuscationFunction1((EDReceiptValidation_strings[84]), _str1_, 11, 16);
        _str1 = _str1_;
        _matchingDict = EDReceiptValidation_IOBSDNameMatching_(_master_port, 0, _str1);
        if (!_matchingDict) {
            goto EDReceiptValidation_GetMacAddress1__bail;
            EDReceiptValidation_CFRelease_(_str1);
        }
        // Perform the search
        _kernResult = EDReceiptValidation_IOServiceGetMatchingServices_(_master_port, _matchingDict, &_iterator);
        if (_kernResult != KERN_SUCCESS) {
            goto EDReceiptValidation_GetMacAddress1__bail;
            EDReceiptValidation_CFRelease_(_str1);
        }
        // Iterate over the result
        while((_service = EDReceiptValidation_IOIteratorNext_(_iterator)) != 0) {
            _kernResult = EDReceiptValidation_IORegistryEntryGetParentEntry_(_service, kIOServicePlane, &_parentService);
            if (_kernResult == KERN_SUCCESS) {
                if (EDReceiptValidation_ctx->EDReceiptValidation_macData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_macData);
                EDReceiptValidation_ctx->EDReceiptValidation_macData = (CFDataRef) EDReceiptValidation_IORegistryEntryCreateCFProperty_(_parentService, _str2, kCFAllocatorDefault, 0);
                EDReceiptValidation_IOObjectRelease_(_parentService);
            }
            EDReceiptValidation_IOObjectRelease_(_iterator);
            EDReceiptValidation_IOObjectRelease_(_service);
        }
    EDReceiptValidation_GetMacAddress1__bail:
        EDReceiptValidation_CFRelease_(_str2);
    }
#else
#define EDReceiptValidation_GetMacAddress1(EDReceiptValidation_ctx) { \
kern_return_t _kernResult; \
mach_port_t _master_port; \
CFMutableDictionaryRef _matchingDict; \
io_iterator_t _iterator; \
io_object_t _service, _parentService; \
volatile int _code = 91; _code -= 34; _code *= 3; _code += 2; \
char *_str1; \
CFStringRef _str2; \
_str2 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[114]), 26, 16);  \
_kernResult = EDReceiptValidation_IOMasterPort_(MACH_PORT_NULL, &_master_port); \
if (_kernResult != KERN_SUCCESS) { \
goto EDReceiptValidation_GetMacAddress1__bail; \
EDReceiptValidation_CFRelease_(_str2); \
} \
char _str1_[0x50]; \
EDReceiptValidation_ObfuscationFunction1((EDReceiptValidation_strings[84]), _str1_, 11, 16); \
_str1 = _str1_; \
_matchingDict = EDReceiptValidation_IOBSDNameMatching_(_master_port, 0, _str1); \
if (!_matchingDict) { \
goto EDReceiptValidation_GetMacAddress1__bail; \
EDReceiptValidation_CFRelease_(_str1); \
} \
_kernResult = EDReceiptValidation_IOServiceGetMatchingServices_(_master_port, _matchingDict, &_iterator); \
if (_kernResult != KERN_SUCCESS) { \
goto EDReceiptValidation_GetMacAddress1__bail; \
EDReceiptValidation_CFRelease_(_str1); \
} \
while((_service = EDReceiptValidation_IOIteratorNext_(_iterator)) != 0) { \
_kernResult = EDReceiptValidation_IORegistryEntryGetParentEntry_(_service, kIOServicePlane, &_parentService); \
if (_kernResult == KERN_SUCCESS) { \
if (EDReceiptValidation_ctx->EDReceiptValidation_macData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_macData); \
EDReceiptValidation_ctx->EDReceiptValidation_macData = (CFDataRef) EDReceiptValidation_IORegistryEntryCreateCFProperty_(_parentService, _str2, kCFAllocatorDefault, 0); \
EDReceiptValidation_IOObjectRelease_(_parentService); \
} \
EDReceiptValidation_IOObjectRelease_(_iterator); \
EDReceiptValidation_IOObjectRelease_(_service); \
} \
EDReceiptValidation_GetMacAddress1__bail: \
EDReceiptValidation_CFRelease_(_str2); \
}
#endif
    
    //
    // CodeBlock GetReceiptInformation
    //
#if DEBUG
    //
    // Extract an ASN.1 INTEGER value
    //
    inline static void EDReceiptValidation_GetReceiptInformation1X(const EDReceiptValidation_ASN1_DATA *_asn1data, int *_payload) {
        uint8 *_ptr = _asn1data->data;
        size_t _size = _asn1data->length;
        *_payload = 0;
        do {
            *_payload <<= 8;
            *_payload += (uint8) *_ptr++;
        } while(--_size > 0);
    }
#else
    inline static void EDReceiptValidation_GetReceiptInformation1X(const EDReceiptValidation_ASN1_DATA *_asn1data, int *_payload) { \
        uint8 *_ptr = _asn1data->data; \
        size_t _size = _asn1data->length; \
        *_payload = 0; \
        do { \
            *_payload <<= 8; \
            *_payload += (uint8) *_ptr++; \
        } while(--_size > 0); \
    }
#endif
    
#if DEBUG
    inline static void EDReceiptValidation_GetReceiptInformation1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        EDReceiptValidation_Parsing _receiptContext, _inappContext, *_currentContext;
        CMSDecoderRef _decoder = NULL;
        CFDataRef _content = NULL;
        CFNumberRef _key = NULL;
        SecAsn1CoderRef _asn1decoder = NULL;
        OSStatus _status;
        EDReceiptValidation_Payload _payload = { NULL };
        EDReceiptValidation_ReceiptAttribute *_current;
        CFDateFormatterRef _formatter;
        EDReceiptValidation_ReceiptAttributeType _key1, _key2;
        CFTypeRef _value1, _value2;
        EDReceiptValidation_ASN1_DATA _asn1data;
        int _type, _integer;
        // Create a decoder for the encrypted message
        _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Decrypt the message (update pass)
        _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData));
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Decrypt the message (final pass)
        _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Get the message content
        _status = EDReceiptValidation_CMSDecoderCopyContent_(_decoder, &_content);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Create the ASN.1 parser
        _status = EDReceiptValidation_SecAsn1CoderCreate_(&_asn1decoder);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Create a formatter to parse ISO-3339 dates
        _formatter = EDReceiptValidation_CFDateFormatterCreate_(kCFAllocatorDefault, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
        _value1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[108]), 58, 48);
        EDReceiptValidation_CFDateFormatterSetFormat_(_formatter, (CFStringRef) _value1);
        EDReceiptValidation_CFRelease_(_value1);
        // Create the receipt parsing context
        _receiptContext.EDReceiptValidation_source = EDReceiptValidation_CFDataGetBytePtr_(_content);
        _receiptContext.EDReceiptValidation_length = EDReceiptValidation_CFDataGetLength_(_content);
        _receiptContext.EDReceiptValidation_dictionary = NULL;
        _receiptContext.EDReceiptValidation_parent = NULL;
        _currentContext = &_receiptContext;
        while(true) {
            if (!_currentContext->EDReceiptValidation_dictionary) {
                // Create the target dictionary
                _currentContext->EDReceiptValidation_dictionary = EDReceiptValidation_CFDictionaryCreateMutable_(kCFAllocatorDefault, (CFIndex) 0x50, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                // Decode the receipt payload from ASN.1
                _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _currentContext->EDReceiptValidation_source, _currentContext->EDReceiptValidation_length, EDReceiptValidation_kSetOfReceiptAttributeTemplate, &_payload);
                if (_status) {
                    goto EDReceiptValidation_GetReceiptInformation1__bail;
                }
                _currentContext->EDReceiptValidation_pointer = _payload.attributes;
            }
            // Iterate over attributes
            while(*_currentContext->EDReceiptValidation_pointer) {
                _current = *_currentContext->EDReceiptValidation_pointer++;
                EDReceiptValidation_GetReceiptInformation1X((&_current->type), (&_type));
                _key1 = _key2 = EDReceiptValidation_DataStoreNone;
                _value1 = _value2 = NULL;
                // Extract the value
                switch(_type) {
                        // Attributes encoded as ASN.1 UTF8STRING
                    case EDReceiptValidation_ReceiptAttributeTypeBundleId:
                    case EDReceiptValidation_ReceiptAttributeTypeBundleVersion:
                    case EDReceiptValidation_InAppAttributeTypeProductIdentifer:
                    case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer:
                    case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer:
                        _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1UTF8StringTemplate, &_asn1data);
                        if (_status) {
                            goto EDReceiptValidation_GetReceiptInformation1__bail;
                        }
                        _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingUTF8, false);
                        _value2 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length);
                        break;
                        // Attributes encoded as ASN.1 IA5STRING
                    case EDReceiptValidation_InAppAttributeTypePurchaseDate:
                    case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate:
                        _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IA5StringTemplate, &_asn1data);
                        if (_status) {
                            goto EDReceiptValidation_GetReceiptInformation1__bail;
                        }
                        _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingASCII, false);
                        _value2 = EDReceiptValidation_CFDateFormatterCreateDateFromString_(kCFAllocatorDefault, _formatter, (CFStringRef) _value1, NULL);
                        break;
                        // Attributes encoded as ASN.1 INTEGER
                    case EDReceiptValidation_InAppAttributeTypeQuantity:
                        _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IntegerTemplate, &_asn1data);
                        if (_status) {
                            goto EDReceiptValidation_GetReceiptInformation1__bail;
                        }
                        EDReceiptValidation_GetReceiptInformation1X((&_asn1data), (&_integer));
                        _value1 = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_integer);
                        break;
                        // Attributes encoded as ASN.1 OCTETSTRING
                    case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue:
                    case EDReceiptValidation_ReceiptAttributeTypeHash:
                        _value1 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length);
                        break;
                    default:
                        break;
                }
                // Assign the key for storage
                switch(_type) {
                    case EDReceiptValidation_ReceiptAttributeTypeBundleId:
                        _key1 = EDReceiptValidation_DataStoreBundleId;
                        _key2 = EDReceiptValidation_DataStoreBundleIdData;
                        break;
                    case EDReceiptValidation_ReceiptAttributeTypeBundleVersion:
                        _key1 = EDReceiptValidation_DataStoreBundleVersion;
                        _key2 = EDReceiptValidation_DataStoreBundleVersionData;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeProductIdentifer:
                        _key1 = EDReceiptValidation_InAppAttributeTypeProductIdentifer;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer:
                        _key1 = EDReceiptValidation_InAppAttributeTypeTransactionIdentifer;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer:
                        _key1 = EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer;
                        break;
                    case EDReceiptValidation_InAppAttributeTypePurchaseDate:
                        _key2 = EDReceiptValidation_InAppAttributeTypePurchaseDate;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate:
                        _key2 = EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeQuantity:
                        _key1 = EDReceiptValidation_InAppAttributeTypeQuantity;
                        break;
                    case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue:
                        _key1 = EDReceiptValidation_DataStoreOpaqueValue;
                        break;
                    case EDReceiptValidation_ReceiptAttributeTypeHash:
                        _key1 = EDReceiptValidation_DataStoreHash;
                        break;
                    default:
                        break;
                }
                // Store data if any
                if (_key1 != EDReceiptValidation_DataStoreNone) {
                    _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1);
                    EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value1);
                    EDReceiptValidation_CFRelease_(_key);
                }
                // Store data if any
                if (_key2 != EDReceiptValidation_DataStoreNone) {
                    _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key2);
                    EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value2);
                    EDReceiptValidation_CFRelease_(_key);
                }
                if (_value1) EDReceiptValidation_CFRelease_(_value1);
                if (_value2) EDReceiptValidation_CFRelease_(_value2);
                // Step into for InApp purchases
                if (_type == EDReceiptValidation_ReceiptAttributeTypeInAppPurchase) {
                    _inappContext.EDReceiptValidation_source = _current->value.data;
                    _inappContext.EDReceiptValidation_length = _current->value.length;
                    _inappContext.EDReceiptValidation_dictionary = NULL;
                    _inappContext.EDReceiptValidation_parent = _currentContext;
                    _currentContext = &_inappContext;
                    break;
                }
            }
            if (!_currentContext->EDReceiptValidation_dictionary) {
                continue;
            }
            // Step out for InApp purchases
            if (_currentContext->EDReceiptValidation_parent) {
                _key1 = EDReceiptValidation_DataStoreInAppPurchase;
                _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1);
                _value1 = EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key);
                if (!_value1) {
                    _value1 = EDReceiptValidation_CFArrayCreateMutable_(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                    EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key, _value1);
                    EDReceiptValidation_CFRelease_(_value1);
                }
                EDReceiptValidation_CFArrayAppendValue_((CFMutableArrayRef) _value1, _currentContext->EDReceiptValidation_dictionary);
                EDReceiptValidation_CFRelease_(_currentContext->EDReceiptValidation_dictionary);
                EDReceiptValidation_CFRelease_(_key);
                _currentContext = _currentContext->EDReceiptValidation_parent;
            }
            if (*_currentContext->EDReceiptValidation_pointer) {
                continue;
            }
            break;
        }
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict);
        EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = _receiptContext.EDReceiptValidation_dictionary;
    EDReceiptValidation_GetReceiptInformation1__bail:
        if (_formatter) EDReceiptValidation_CFRelease_(_formatter);
        if (_asn1decoder) EDReceiptValidation_SecAsn1CoderRelease_(_asn1decoder);
        if (_content) EDReceiptValidation_CFRelease_(_content);
        if (_decoder) EDReceiptValidation_CFRelease_(_decoder);
    }
#else
#define EDReceiptValidation_GetReceiptInformation1(EDReceiptValidation_ctx) { \
EDReceiptValidation_Parsing _receiptContext, _inappContext, *_currentContext; \
CMSDecoderRef _decoder = NULL; \
CFDataRef _content = NULL; \
CFNumberRef _key = NULL; \
SecAsn1CoderRef _asn1decoder = NULL; \
OSStatus _status; \
EDReceiptValidation_Payload _payload = { NULL }; \
EDReceiptValidation_ReceiptAttribute *_current; \
CFDateFormatterRef _formatter; \
EDReceiptValidation_ReceiptAttributeType _key1, _key2; \
CFTypeRef _value1, _value2; \
EDReceiptValidation_ASN1_DATA _asn1data; \
int _type, _integer; \
_status = EDReceiptValidation_CMSDecoderCreate_(&_decoder); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData)); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderCopyContent_(_decoder, &_content); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_SecAsn1CoderCreate_(&_asn1decoder); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_formatter = EDReceiptValidation_CFDateFormatterCreate_(kCFAllocatorDefault, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
_value1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[108]), 58, 48);  \
EDReceiptValidation_CFDateFormatterSetFormat_(_formatter, (CFStringRef) _value1); \
EDReceiptValidation_CFRelease_(_value1); \
_receiptContext.EDReceiptValidation_source = EDReceiptValidation_CFDataGetBytePtr_(_content); \
_receiptContext.EDReceiptValidation_length = EDReceiptValidation_CFDataGetLength_(_content); \
_receiptContext.EDReceiptValidation_dictionary = NULL; \
_receiptContext.EDReceiptValidation_parent = NULL; \
_currentContext = &_receiptContext; \
while(true) { \
if (!_currentContext->EDReceiptValidation_dictionary) { \
_currentContext->EDReceiptValidation_dictionary = EDReceiptValidation_CFDictionaryCreateMutable_(kCFAllocatorDefault, (CFIndex) 0x50, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks); \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _currentContext->EDReceiptValidation_source, _currentContext->EDReceiptValidation_length, EDReceiptValidation_kSetOfReceiptAttributeTemplate, &_payload); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_currentContext->EDReceiptValidation_pointer = _payload.attributes; \
} \
while(*_currentContext->EDReceiptValidation_pointer) { \
_current = *_currentContext->EDReceiptValidation_pointer++; \
EDReceiptValidation_GetReceiptInformation1X((&_current->type), (&_type)); \
_key1 = _key2 = EDReceiptValidation_DataStoreNone; \
_value1 = _value2 = NULL; \
switch(_type) { \
case EDReceiptValidation_ReceiptAttributeTypeBundleId: \
case EDReceiptValidation_ReceiptAttributeTypeBundleVersion: \
case EDReceiptValidation_InAppAttributeTypeProductIdentifer: \
case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer: \
case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer: \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1UTF8StringTemplate, &_asn1data); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingUTF8, false); \
_value2 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length); \
break; \
case EDReceiptValidation_InAppAttributeTypePurchaseDate: \
case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate: \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IA5StringTemplate, &_asn1data); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingASCII, false); \
_value2 = EDReceiptValidation_CFDateFormatterCreateDateFromString_(kCFAllocatorDefault, _formatter, (CFStringRef) _value1, NULL); \
break; \
case EDReceiptValidation_InAppAttributeTypeQuantity: \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IntegerTemplate, &_asn1data); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
EDReceiptValidation_GetReceiptInformation1X((&_asn1data), (&_integer)); \
_value1 = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_integer); \
break; \
case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue: \
case EDReceiptValidation_ReceiptAttributeTypeHash: \
_value1 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length); \
break; \
default: \
break; \
} \
switch(_type) { \
case EDReceiptValidation_ReceiptAttributeTypeBundleId: \
_key1 = EDReceiptValidation_DataStoreBundleId; \
_key2 = EDReceiptValidation_DataStoreBundleIdData; \
break; \
case EDReceiptValidation_ReceiptAttributeTypeBundleVersion: \
_key1 = EDReceiptValidation_DataStoreBundleVersion; \
_key2 = EDReceiptValidation_DataStoreBundleVersionData; \
break; \
case EDReceiptValidation_InAppAttributeTypeProductIdentifer: \
_key1 = EDReceiptValidation_InAppAttributeTypeProductIdentifer; \
break; \
case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer: \
_key1 = EDReceiptValidation_InAppAttributeTypeTransactionIdentifer; \
break; \
case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer: \
_key1 = EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer; \
break; \
case EDReceiptValidation_InAppAttributeTypePurchaseDate: \
_key2 = EDReceiptValidation_InAppAttributeTypePurchaseDate; \
break; \
case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate: \
_key2 = EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate; \
break; \
case EDReceiptValidation_InAppAttributeTypeQuantity: \
_key1 = EDReceiptValidation_InAppAttributeTypeQuantity; \
break; \
case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue: \
_key1 = EDReceiptValidation_DataStoreOpaqueValue; \
break; \
case EDReceiptValidation_ReceiptAttributeTypeHash: \
_key1 = EDReceiptValidation_DataStoreHash; \
break; \
default: \
break; \
} \
if (_key1 != EDReceiptValidation_DataStoreNone) { \
_key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1); \
EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value1); \
EDReceiptValidation_CFRelease_(_key); \
} \
if (_key2 != EDReceiptValidation_DataStoreNone) { \
_key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key2); \
EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value2); \
EDReceiptValidation_CFRelease_(_key); \
} \
if (_value1) EDReceiptValidation_CFRelease_(_value1); \
if (_value2) EDReceiptValidation_CFRelease_(_value2); \
if (_type == EDReceiptValidation_ReceiptAttributeTypeInAppPurchase) { \
_inappContext.EDReceiptValidation_source = _current->value.data; \
_inappContext.EDReceiptValidation_length = _current->value.length; \
_inappContext.EDReceiptValidation_dictionary = NULL; \
_inappContext.EDReceiptValidation_parent = _currentContext; \
_currentContext = &_inappContext; \
break; \
} \
} \
if (!_currentContext->EDReceiptValidation_dictionary) { \
continue; \
} \
if (_currentContext->EDReceiptValidation_parent) { \
_key1 = EDReceiptValidation_DataStoreInAppPurchase; \
_key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1); \
_value1 = EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key); \
if (!_value1) { \
_value1 = EDReceiptValidation_CFArrayCreateMutable_(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks); \
EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key, _value1); \
EDReceiptValidation_CFRelease_(_value1); \
} \
EDReceiptValidation_CFArrayAppendValue_((CFMutableArrayRef) _value1, _currentContext->EDReceiptValidation_dictionary); \
EDReceiptValidation_CFRelease_(_currentContext->EDReceiptValidation_dictionary); \
EDReceiptValidation_CFRelease_(_key); \
_currentContext = _currentContext->EDReceiptValidation_parent; \
} \
if (*_currentContext->EDReceiptValidation_pointer) { \
continue; \
} \
break; \
} \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict); \
EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = _receiptContext.EDReceiptValidation_dictionary; \
EDReceiptValidation_GetReceiptInformation1__bail: \
if (_formatter) EDReceiptValidation_CFRelease_(_formatter); \
if (_asn1decoder) EDReceiptValidation_SecAsn1CoderRelease_(_asn1decoder); \
if (_content) EDReceiptValidation_CFRelease_(_content); \
if (_decoder) EDReceiptValidation_CFRelease_(_decoder); \
}
#endif
    
    //
    // CodeBlock CheckBundleIdentifier
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckBundleIdentifier1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[74]), 168, 32);
        CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[20]), 53, 32);
        volatile int _code = 19; _code -= 4; _code *= 11; _code += 8;
        CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_str1);
            EDReceiptValidation_CFRelease_(_str2);
        }
        EDReceiptValidation_CFRelease_(_str2);
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckBundleIdentifier1(EDReceiptValidation_ctx) { \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[74]), 168, 32); \
CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[20]), 53, 32); \
volatile int _code = 107; _code -= 50; _code *= 3; _code += 2; \
CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_str1); \
EDReceiptValidation_CFRelease_(_str2); \
} \
EDReceiptValidation_CFRelease_(_str2); \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckBundleVersion
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckBundleVersion1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[8]), -39, 16);
        CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[103]), -51, 32);
        volatile int _code = 26; _code -= 5; _code *= 8; _code += 5;
        CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_str1);
        }
        EDReceiptValidation_CFRelease_(_str2);
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckBundleVersion1(EDReceiptValidation_ctx) { \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[8]), -39, 16); \
CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[103]), -51, 32); \
volatile int _code = 39; _code -= 11; _code *= 6; _code += 5; \
CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_str1); \
} \
EDReceiptValidation_CFRelease_(_str2); \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckBundleSignature
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckBundleSignature1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1 = NULL;
        CFURLRef _url1 = NULL;
        SecStaticCodeRef _staticCode = NULL;
        SecRequirementRef _requirement = NULL;
        OSStatus _status;
        CFErrorRef _error = NULL;
        _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
        _status = EDReceiptValidation_SecStaticCodeCreateWithPath_(_url1, kSecCSDefaultFlags, &_staticCode);
        if (_status != errSecSuccess) {
            goto EDReceiptValidation_CheckBundleSignature1__bail;
        }
        _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[104]), 121, 32);
        _status = EDReceiptValidation_SecRequirementCreateWithStringAndErrors_(_str1, kSecCSDefaultFlags, &_error, &_requirement);
        if (_status != errSecSuccess) {
            goto EDReceiptValidation_CheckBundleSignature1__bail;
        }
        _status = EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_(_staticCode, kSecCSDefaultFlags, _requirement, &_error);
        if (_status != errSecSuccess) {
            goto EDReceiptValidation_CheckBundleSignature1__bail;
        }
    EDReceiptValidation_CheckBundleSignature1__bail:
        if (_error) EDReceiptValidation_CFRelease_(_error);
        if (_staticCode) EDReceiptValidation_CFRelease_(_staticCode);
        if (_requirement) EDReceiptValidation_CFRelease_(_requirement);
        if (_str1) EDReceiptValidation_CFRelease_(_str1);
        if (_url1) EDReceiptValidation_CFRelease_(_url1);
    }
#else
#define EDReceiptValidation_CheckBundleSignature1(EDReceiptValidation_ctx) { \
CFStringRef _str1 = NULL; \
CFURLRef _url1 = NULL; \
SecStaticCodeRef _staticCode = NULL; \
SecRequirementRef _requirement = NULL; \
OSStatus _status; \
CFErrorRef _error = NULL; \
_url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
_status = EDReceiptValidation_SecStaticCodeCreateWithPath_(_url1, kSecCSDefaultFlags, &_staticCode); \
if (_status != errSecSuccess) { \
goto EDReceiptValidation_CheckBundleSignature1__bail; \
} \
_str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[104]), 121, 32); \
_status = EDReceiptValidation_SecRequirementCreateWithStringAndErrors_(_str1, kSecCSDefaultFlags, &_error, &_requirement); \
if (_status != errSecSuccess) { \
goto EDReceiptValidation_CheckBundleSignature1__bail; \
} \
_status = EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_(_staticCode, kSecCSDefaultFlags, _requirement, &_error); \
if (_status != errSecSuccess) { \
goto EDReceiptValidation_CheckBundleSignature1__bail; \
} \
EDReceiptValidation_CheckBundleSignature1__bail: \
if (_error) EDReceiptValidation_CFRelease_(_error); \
if (_staticCode) EDReceiptValidation_CFRelease_(_staticCode); \
if (_requirement) EDReceiptValidation_CFRelease_(_requirement); \
if (_str1) EDReceiptValidation_CFRelease_(_str1); \
if (_url1) EDReceiptValidation_CFRelease_(_url1); \
}
#endif
    
    //
    // CodeBlock CheckReceiptSignature
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptSignature1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CMSDecoderRef _decoder = NULL;
        SecTrustRef _trustRef = NULL;
        SecPolicyRef _policyRef = NULL;
        volatile int _code = 70; _code -= 27; _code *= 4; _code += 1;
        OSStatus _status;
        _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder);
        if (_status) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_trustRef);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
        _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData));
        if (_status) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
        _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder);
        if (_status) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
        CMSSignerStatus _signerStatus;
        OSStatus _certVerifyresult;
        _policyRef = EDReceiptValidation_SecPolicyCreateBasicX509_();
        _status = EDReceiptValidation_CMSDecoderCopySignerStatus_(_decoder, 0, _policyRef, TRUE, &_signerStatus, &_trustRef, &_certVerifyresult);
        if (_status) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_policyRef);
            EDReceiptValidation_CFRelease_(_trustRef);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
    EDReceiptValidation_CheckReceiptSignature1__bail:
        if (_policyRef) EDReceiptValidation_CFRelease_(_policyRef);
        if (_trustRef) EDReceiptValidation_CFRelease_(_trustRef);
        if (_decoder) EDReceiptValidation_CFRelease_(_decoder);
    }
#else
#define EDReceiptValidation_CheckReceiptSignature1(EDReceiptValidation_ctx) { \
CMSDecoderRef _decoder = NULL; \
SecTrustRef _trustRef = NULL; \
SecPolicyRef _policyRef = NULL; \
volatile int _code = 58; _code -= 15; _code *= 4; _code += 1; \
OSStatus _status; \
_status = EDReceiptValidation_CMSDecoderCreate_(&_decoder); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_trustRef); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData)); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
CMSSignerStatus _signerStatus; \
OSStatus _certVerifyresult; \
_policyRef = EDReceiptValidation_SecPolicyCreateBasicX509_(); \
_status = EDReceiptValidation_CMSDecoderCopySignerStatus_(_decoder, 0, _policyRef, TRUE, &_signerStatus, &_trustRef, &_certVerifyresult); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_policyRef); \
EDReceiptValidation_CFRelease_(_trustRef); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
EDReceiptValidation_CheckReceiptSignature1__bail: \
if (_policyRef) EDReceiptValidation_CFRelease_(_policyRef); \
if (_trustRef) EDReceiptValidation_CFRelease_(_trustRef); \
if (_decoder) EDReceiptValidation_CFRelease_(_decoder); \
}
#endif
    
    //
    // CodeBlock CheckReceiptIdentifier
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptIdentifier1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleId;
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[97]), 63, 32);
        volatile int _code = 125; _code -= 68; _code *= 3; _code += 2;
        CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
        }
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckReceiptIdentifier1(EDReceiptValidation_ctx) { \
EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleId; \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[97]), 63, 32); \
volatile int _code = 80; _code -= 37; _code *= 4; _code += 1; \
CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
} \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckReceiptVersion
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptVersion1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleVersion;
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[35]), 50, 16);
        volatile int _code = 151; _code -= 94; _code *= 3; _code += 2;
        CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
        }
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckReceiptVersion1(EDReceiptValidation_ctx) { \
EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleVersion; \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[35]), 50, 16); \
volatile int _code = 88; _code -= 31; _code *= 3; _code += 2; \
CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
} \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckReceiptHash
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptHash1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFDataRef _data1, _data2, _data3;
        CFMutableDataRef _data4;
        unsigned char _digest[0x50];
        volatile int _counter = 8; _counter -= 3; _counter *= 4;
        EDReceiptValidation_ReceiptAttributeType _value;
        CFNumberRef _key;
        _value = EDReceiptValidation_DataStoreOpaqueValue;
        _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        _data1 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        _value = EDReceiptValidation_DataStoreBundleIdData;
        _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        _data2 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        _value = EDReceiptValidation_DataStoreHash;
        _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        _data3 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        _data4 = EDReceiptValidation_CFDataCreateMutable_(kCFAllocatorDefault, EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData) + EDReceiptValidation_CFDataGetLength_(_data1) + EDReceiptValidation_CFDataGetLength_(_data2));
        EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData));
        EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data1), EDReceiptValidation_CFDataGetLength_(_data1));
        EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data2), EDReceiptValidation_CFDataGetLength_(_data2));
        EDReceiptValidation_CC_SHA1_(EDReceiptValidation_CFDataGetBytePtr_(_data4), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data4), _digest);
        volatile int _code = 59; _code -= 16; _code *= 4; _code += 1;
        CFDataRef _data5 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _digest, _counter);
        if (!EDReceiptValidation_CFEqual_(_data3, _data5)) {
            EDReceiptValidation_CFRelease_(_data5);
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_data5);
            goto EDReceiptValidation_CheckReceiptHash1__bail;
        }
        EDReceiptValidation_CFRelease_(_data5);
    EDReceiptValidation_CheckReceiptHash1__bail:
        EDReceiptValidation_CFRelease_(_data4);
    }
#else
#define EDReceiptValidation_CheckReceiptHash1(EDReceiptValidation_ctx) { \
CFDataRef _data1, _data2, _data3; \
CFMutableDataRef _data4; \
unsigned char _digest[0x50]; \
volatile int _counter = 17; _counter -= 11; _counter *= 3; _counter += 2; \
EDReceiptValidation_ReceiptAttributeType _value; \
CFNumberRef _key; \
_value = EDReceiptValidation_DataStoreOpaqueValue; \
_key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
_data1 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
_value = EDReceiptValidation_DataStoreBundleIdData; \
_key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
_data2 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
_value = EDReceiptValidation_DataStoreHash; \
_key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
_data3 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
_data4 = EDReceiptValidation_CFDataCreateMutable_(kCFAllocatorDefault, EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData) + EDReceiptValidation_CFDataGetLength_(_data1) + EDReceiptValidation_CFDataGetLength_(_data2)); \
EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData)); \
EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data1), EDReceiptValidation_CFDataGetLength_(_data1)); \
EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data2), EDReceiptValidation_CFDataGetLength_(_data2)); \
EDReceiptValidation_CC_SHA1_(EDReceiptValidation_CFDataGetBytePtr_(_data4), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data4), _digest); \
volatile int _code = 110; _code -= 53; _code *= 3; _code += 2; \
CFDataRef _data5 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _digest, _counter); \
if (!EDReceiptValidation_CFEqual_(_data3, _data5)) { \
EDReceiptValidation_CFRelease_(_data5); \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_data5); \
goto EDReceiptValidation_CheckReceiptHash1__bail; \
} \
EDReceiptValidation_CFRelease_(_data5); \
EDReceiptValidation_CheckReceiptHash1__bail: \
EDReceiptValidation_CFRelease_(_data4); \
}
#endif
    
    //
    // CodeBlock Runner
    //
#ifdef RUNNER
#define EDRUNNER_SIGNATURE int(*_EDRUNNER_)(int argc, const char *argv[])
    typedef EDRUNNER_SIGNATURE;
    static long *EDRUNNER_ = ((long *)EDRUNNER - 2988);
    
#endif
    
    inline static void EDReceiptValidation_Runner1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        
#ifdef EDRUNNER
        
        ((_EDRUNNER_)(EDRUNNER_ + 2988))(EDReceiptValidation_ctx->EDReceiptValidation_argc, EDReceiptValidation_ctx->EDReceiptValidation_argv);
        
#else
        
        EDReceiptValidation_NSApplicationMain_(EDReceiptValidation_ctx->EDReceiptValidation_argc, EDReceiptValidation_ctx->EDReceiptValidation_argv);
        
#endif
        
    }
    
    //
    // CodeBlock CleanUp
    //
#if DEBUG
    inline static void EDReceiptValidation_CleanUp1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFTypeRef _references[3] = { EDReceiptValidation_ctx->EDReceiptValidation_receiptData, EDReceiptValidation_ctx->EDReceiptValidation_macData, EDReceiptValidation_ctx->EDReceiptValidation_receiptDict };
        if (_references[0]) {
            CFRelease(_references[0]);
            _references[0] = NULL;
        }
        if (_references[1]) {
            CFRelease(_references[1]);
            _references[1] = NULL;
        }
        if (_references[2]) {
            CFRelease(_references[2]);
            _references[2] = NULL;
        }
    }
#else
#define EDReceiptValidation_CleanUp1(EDReceiptValidation_ctx) { \
CFTypeRef _references[3] = { EDReceiptValidation_ctx->EDReceiptValidation_receiptData, EDReceiptValidation_ctx->EDReceiptValidation_macData, EDReceiptValidation_ctx->EDReceiptValidation_receiptDict };                     \
if (_references[0]) { \
CFRelease(_references[0]); \
_references[0] = NULL; \
} \
if (_references[1]) { \
CFRelease(_references[1]); \
_references[1] = NULL; \
} \
if (_references[2]) { \
CFRelease(_references[2]); \
_references[2] = NULL; \
} \
}
#endif
    
    
    
    //
    // Entry point for receipt/InApp validation
    //
#if DEBUG || RECEIGEN_PEDANTIC
    inline static int EDCheckReceiptAndRun(int argc, const char *argv[]) {
        EDReceiptValidation_Context EDReceiptValidation_ctx0 = { NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
        EDReceiptValidation_ctx0.EDReceiptValidation_argc = argc;
        EDReceiptValidation_ctx0.EDReceiptValidation_argv = (const char **) argv;
        
        volatile int idx = 1863;
        while(idx != 3719) {
            switch(idx) {
                case 957:
                {
                    EDReceiptValidation_LoadReceipt1((&EDReceiptValidation_ctx0));
                    idx -= 384; idx *= 3; idx += 1;
                    break;
                }
                case 1705:
                {
                    EDReceiptValidation_CheckBundleVersion1((&EDReceiptValidation_ctx0));
                    idx -= 741; idx *= 4; idx += 3;
                    break;
                }
                case 2630:
                {
                    EDReceiptValidation_CleanUp1((&EDReceiptValidation_ctx0));
                    idx -= 1391; idx *= 3; idx += 2;
                    break;
                }
                case 3859:
                {
                    EDReceiptValidation_CheckBundleSignature1((&EDReceiptValidation_ctx0));
                    idx += 1314; idx /= 7;
                    break;
                }
                case 1720:
                {
                    EDReceiptValidation_GetMacAddress1((&EDReceiptValidation_ctx0));
                    idx -= 677; idx *= 3; 
                    break;
                }
                case 1863:
                {
                    EDReceiptValidation_GetMainBundle1((&EDReceiptValidation_ctx0));
                    idx += 1008; idx /= 3; 
                    break;
                }
                case 739:
                {
                    EDReceiptValidation_CheckReceiptSignature1((&EDReceiptValidation_ctx0));
                    idx -= 232; idx *= 5; idx += 1; 
                    break;
                }
                case 527:
                {
                    EDReceiptValidation_CheckReceiptVersion1((&EDReceiptValidation_ctx0));
                    idx -= 95; idx *= 9; idx += 2; 
                    break;
                }
                case 3129:
                {
                    EDReceiptValidation_GetReceiptInformation1((&EDReceiptValidation_ctx0));
                    idx += 2715; idx /= 4; 
                    break;
                }
                case 1461:
                {
                    EDReceiptValidation_CheckBundleIdentifier1((&EDReceiptValidation_ctx0));
                    idx -= 893; idx *= 3; idx += 1; 
                    break;
                }
                case 2536:
                {
                    EDReceiptValidation_CheckReceiptIdentifier1((&EDReceiptValidation_ctx0));
                    idx += 626; idx /= 6; 
                    break;
                }
                case 241:
                {
                    EDReceiptValidation_Runner1((&EDReceiptValidation_ctx0));
                    idx -= 22; idx *= 12; idx += 2; 
                    break;
                }
                case 3890:
                {
                    EDReceiptValidation_CheckReceiptHash1((&EDReceiptValidation_ctx0));
                    idx += 448; idx /= 18; 
                    break;
                }
            }
        }
        return 0;
    }
    
#else
#define EDCheckReceiptAndRun(argc, argv) ({ \
EDReceiptValidation_Context EDReceiptValidation_ctx0 = { NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }; \
EDReceiptValidation_ctx0.EDReceiptValidation_argc = argc; \
EDReceiptValidation_ctx0.EDReceiptValidation_argv = (const char **) argv; \
\
volatile int idx = 1863; \
while(idx != 3719) { \
switch(idx) { \
case 957: \
{ \
EDReceiptValidation_LoadReceipt1((&EDReceiptValidation_ctx0)); \
idx -= 384; idx *= 3; idx += 1;  \
break; \
} \
case 1705: \
{ \
EDReceiptValidation_CheckBundleVersion1((&EDReceiptValidation_ctx0)); \
idx -= 741; idx *= 4; idx += 3;  \
break; \
} \
case 2630: \
{ \
EDReceiptValidation_CleanUp1((&EDReceiptValidation_ctx0)); \
idx -= 1391; idx *= 3; idx += 2;  \
break; \
} \
case 3859: \
{ \
EDReceiptValidation_CheckBundleSignature1((&EDReceiptValidation_ctx0)); \
idx += 1314; idx /= 7;  \
break; \
} \
case 1720: \
{ \
EDReceiptValidation_GetMacAddress1((&EDReceiptValidation_ctx0)); \
idx -= 677; idx *= 3;  \
break; \
} \
case 1863: \
{ \
EDReceiptValidation_GetMainBundle1((&EDReceiptValidation_ctx0)); \
idx += 1008; idx /= 3;  \
break; \
} \
case 739: \
{ \
EDReceiptValidation_CheckReceiptSignature1((&EDReceiptValidation_ctx0)); \
idx -= 232; idx *= 5; idx += 1;  \
break; \
} \
case 527: \
{ \
EDReceiptValidation_CheckReceiptVersion1((&EDReceiptValidation_ctx0)); \
idx -= 95; idx *= 9; idx += 2;  \
break; \
} \
case 3129: \
{ \
EDReceiptValidation_GetReceiptInformation1((&EDReceiptValidation_ctx0)); \
idx += 2715; idx /= 4;  \
break; \
} \
case 1461: \
{ \
EDReceiptValidation_CheckBundleIdentifier1((&EDReceiptValidation_ctx0)); \
idx -= 893; idx *= 3; idx += 1;  \
break; \
} \
case 2536: \
{ \
EDReceiptValidation_CheckReceiptIdentifier1((&EDReceiptValidation_ctx0)); \
idx += 626; idx /= 6;  \
break; \
} \
case 241: \
{ \
EDReceiptValidation_Runner1((&EDReceiptValidation_ctx0)); \
idx -= 22; idx *= 12; idx += 2;  \
break; \
} \
case 3890: \
{ \
EDReceiptValidation_CheckReceiptHash1((&EDReceiptValidation_ctx0)); \
idx += 448; idx /= 18;  \
break; \
} \
} \
} \
0; \
}) \

#endif
    
    
    //
    // C++ epilogue
    //
#ifdef __cplusplus
}
#endif

