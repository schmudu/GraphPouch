//  ____                _
// |  _ \ ___  ___  ___(_) __ _  ___ _ __
// | |_) / _ \/ __|/ _ \ |/ _` |/ _ \ '_ \
// |  _ <  __/ (__|  __/ | (_| |  __/ | | |
// |_| \_\___|\___|\___|_|\__, |\___|_| |_|
//                        |___/
//
// This code was generated by Receigen and will use:
//
// CFBundleIdentifier=com.edcodia.graphpouch
// CFBundleShortVersionString=1.0.2
// Prefix=ED
// NoMain=NO
//
// Don't forget to link with the IOKit and Security frameworks !
//

//
// The default pedantic mode (OFF)
// Define to 1 if you need pedantic mode.
//
#ifndef RECEIGEN_PEDANTIC
#define RECEIGEN_PEDANTIC 0
#endif

//
// C++ prologue
//
#ifdef __cplusplus
extern "C" {
#endif
    
    // Headers for general purpose functions
#import <CoreFoundation/CoreFoundation.h>
    
    // Headers for library loading
#import <dlfcn.h>
    
    // Headers for bundle security checks
#import <CommonCrypto/CommonDigest.h>
#import <Security/Security.h>
#import <Security/CMSDecoder.h>
#import <Security/CSCommon.h>
#import <Security/SecAsn1Coder.h>
#import <Security/SecAsn1Templates.h>
#import <Security/SecCode.h>
#import <Security/SecRequirement.h>
#import <Security/SecStaticCode.h>
    
    // Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>
    
    //
    // Structure describing an ASN.1 data
    //
    typedef struct _EDReceiptValidation_ASN1_DATA {
        size_t length;
        uint8 *data;
    } EDReceiptValidation_ASN1_DATA;
    
    //
    // Structure describing a receipt attribute
    //
    // ReceiptAttribute ::= SEQUENCE {
    //    type INTEGER,
    //    version INTEGER,
    //    value OCTET STRING
    // }
    //
    typedef struct _EDReceiptValidation_ReceiptAttribute {
        EDReceiptValidation_ASN1_DATA type;
        EDReceiptValidation_ASN1_DATA version;
        EDReceiptValidation_ASN1_DATA value;
    } EDReceiptValidation_ReceiptAttribute;
    
    //
    // Structure describing a receipt
    //
    // Payload ::= SET OF ReceiptAttribute
    //
    typedef struct _EDReceiptValidation_Payload {
        EDReceiptValidation_ReceiptAttribute **attributes;
    } EDReceiptValidation_Payload;
    
    //
    // ASN.1 template describing a receipt attribute or an InApp attribute
    //
    const SecAsn1Template EDReceiptValidation_kReceiptAttributeTemplate[] = {
        { SEC_ASN1_SEQUENCE, 0, NULL, sizeof(EDReceiptValidation_ReceiptAttribute) },
        { SEC_ASN1_INTEGER, offsetof(EDReceiptValidation_ReceiptAttribute, type), NULL, 0 },
        { SEC_ASN1_INTEGER, offsetof(EDReceiptValidation_ReceiptAttribute, version), NULL, 0 },
        { SEC_ASN1_OCTET_STRING, offsetof(EDReceiptValidation_ReceiptAttribute, value), NULL, 0 },
        { 0, 0, NULL, 0 }
    };
    
    //
    // ASN.1 template describing a receipt or an InApp receipt
    //
    const SecAsn1Template EDReceiptValidation_kSetOfReceiptAttributeTemplate[] = {
        { SEC_ASN1_SET_OF, offsetof(EDReceiptValidation_Payload, attributes), EDReceiptValidation_kReceiptAttributeTemplate, sizeof(EDReceiptValidation_Payload) },
        { 0, 0, NULL, 0 }
    };
    
    //
    // Shared context for receipt/InApp validation and parsing
    //
    typedef struct _EDReceiptValidation_Context {
        CFTypeRef EDReceiptValidation_inAppBlock;
        CFTypeRef EDReceiptValidation_dummy4;
        CFTypeRef EDReceiptValidation_dummy0;
        CFTypeRef EDReceiptValidation_dummy1;
        CFTypeRef EDReceiptValidation_inAppIdentifiers;
        const char ** EDReceiptValidation_argv;
        CFTypeRef EDReceiptValidation_dummy2;
        int EDReceiptValidation_argc;
        CFTypeRef EDReceiptValidation_mainBundle;
        CFTypeRef EDReceiptValidation_macData;
        CFTypeRef EDReceiptValidation_receiptData;
        CFTypeRef EDReceiptValidation_dummy3;
        CFTypeRef EDReceiptValidation_receiptDict;
    } EDReceiptValidation_Context;
    
    typedef struct _EDReceiptValidation_Parsing {
        EDReceiptValidation_ReceiptAttribute ** EDReceiptValidation_pointer;
        size_t EDReceiptValidation_length;
        CFTypeRef EDReceiptValidation_dummy2;
        CFTypeRef EDReceiptValidation_dummy5;
        CFTypeRef EDReceiptValidation_dummy0;
        const void * EDReceiptValidation_source;
        CFTypeRef EDReceiptValidation_dictionary;
        struct _EDReceiptValidation_Parsing * EDReceiptValidation_parent;
        CFTypeRef EDReceiptValidation_dummy4;
        CFTypeRef EDReceiptValidation_dummy1;
        CFTypeRef EDReceiptValidation_dummy3;
    } EDReceiptValidation_Parsing;
    
    
    //
    // Keys for each receipt attribute and InApp attribute
    //
    typedef enum _EDReceiptValidation_ReceiptAttributeType {
        // Bundle identifier
        EDReceiptValidation_ReceiptAttributeTypeBundleId = 2,
        // Application version
        EDReceiptValidation_ReceiptAttributeTypeBundleVersion = 3,
        // Opaque value
        EDReceiptValidation_ReceiptAttributeTypeOpaqueValue = 4,
        // Hash value
        EDReceiptValidation_ReceiptAttributeTypeHash = 5,
        // In-app purchase receipt
        EDReceiptValidation_ReceiptAttributeTypeInAppPurchase = 17,
        
        // Quantity
        EDReceiptValidation_InAppAttributeTypeQuantity = 1701,
        // Product identifier
        EDReceiptValidation_InAppAttributeTypeProductIdentifer = 1702,
        // Transaction identifier
        EDReceiptValidation_InAppAttributeTypeTransactionIdentifer = 1703,
        // Purchase date
        EDReceiptValidation_InAppAttributeTypePurchaseDate = 1704,
        // Original transaction identifier
        EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer = 1705,
        // Original purchase date
        EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate = 1706,
        
        // Storage key base value
        EDReceiptValidation_DataStoreNone = 3212,
        // Storage key for Bundle identifier
        EDReceiptValidation_DataStoreBundleId = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeBundleId << 2),
        // Storage key for Bundle identifier as raw data
        EDReceiptValidation_DataStoreBundleIdData = EDReceiptValidation_DataStoreBundleId + 1,
        // Storage key for Application version
        EDReceiptValidation_DataStoreBundleVersion = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeBundleVersion << 2),
        // Storage key for Application version as raw data
        EDReceiptValidation_DataStoreBundleVersionData = EDReceiptValidation_DataStoreBundleVersion + 1,
        // Storage key for Opaque value
        EDReceiptValidation_DataStoreOpaqueValue = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeOpaqueValue << 2),
        // Storage key for Hash value
        EDReceiptValidation_DataStoreHash = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeHash << 2),
        // Storage key for In-app purchase receipts
        EDReceiptValidation_DataStoreInAppPurchase = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeInAppPurchase << 2),
    } EDReceiptValidation_ReceiptAttributeType;
    
    //
    // Table for storing strings
    //
    static const char *EDReceiptValidation_strings[0x005c] = {
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M03L50S19
        "\x36\x4a\x60\x6a\x6d\x7c\x74\x36\x55\x70\x7b\x6b\x78\x6b\x60\x36\x5f\x6b\x78\x74\x7c\x6e\x76\x6b\x72\x6a\x36\x5a\x76\x6b\x7c\x5f\x76\x6c\x77\x7d\x78\x6d\x70\x76\x77\x37\x7f\x6b\x78\x74\x7c\x6e\x76\x6b\x72\x36\x5a\x76\x6b\x7c\x5f\x76\x6c\x77\x7d\x78\x6d\x70\x76\x77\x19\x0a\xd3\x4e\x8c\xdc\x66\x74\x96\x26\xba\x96\x74\x5e",
        // "SecPolicyCreateBasicX509" - #M03L20S4e
        "\x1d\x2b\x2d\x1e\x21\x22\x27\x2d\x37\x0d\x3c\x2b\x2f\x3a\x2b\x0c\x2f\x3d\x27\x2d\x16\x7b\x7e\x77\x4e\x87\x1c\x29\x9c\xdb\xf1\x69",
        // "CFDataCreateMutable" - #M03L20S6e
        "\x2d\x28\x2a\x0f\x1a\x0f\x2d\x1c\x0b\x0f\x1a\x0b\x23\x1b\x1a\x0f\x0c\x02\x0b\x6e\xf2\x74\x29\x03\xc4\xc2\xc9\xb0\x8c\x7a\x11\x95",
        // "CFDictionaryAddValue" - #M03L20S51
        "\x12\x17\x15\x38\x32\x25\x38\x3e\x3f\x30\x23\x28\x10\x35\x35\x07\x30\x3d\x24\x34\x51\x43\x39\xb5\xb0\x01\x34\x2e\xea\x45\xed\x43",
        // "CMSDecoderUpdateMessage" - #M03L20Sce
        "\x8d\x83\x9d\x8a\xab\xad\xa1\xaa\xab\xbc\x9b\xbe\xaa\xaf\xba\xab\x83\xab\xbd\xbd\xaf\xa9\xab\xce\x76\x6a\xc0\xe6\xf1\x64\x6a\x80",
        // "SecRequirementCreateWithStringAndErrors" - #M02L30Sffffffd6
        "\x7d\x8f\x8d\x7c\x8f\x9b\x9f\x93\x9c\x8f\x97\x8f\x98\x9e\x6d\x9c\x8f\x8b\x9e\x8f\x81\x93\x9e\x92\x7d\x9e\x9c\x93\x98\x91\x6b\x98\x8e\x6f\x9c\x9c\x99\x9c\x9d\x2a\xec\x05\x50\x23\x88\x1a\x8a\x04",
        // "SecRequirementCreateWithString" - #M02L20Sffffffb1
        "\xa2\xb4\xb2\xa1\xb4\xc0\xc4\xb8\xc1\xb4\xbc\xb4\xbd\xc3\x92\xc1\xb4\xb0\xc3\xb4\xa6\xb8\xc3\xb7\xa2\xc3\xc1\xb8\xbd\xb6\x4f\x3a",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M03L50Sc1
        "\xee\x92\xb8\xb2\xb5\xa4\xac\xee\x8d\xa8\xa3\xb3\xa0\xb3\xb8\xee\x87\xb3\xa0\xac\xa4\xb6\xae\xb3\xaa\xb2\xee\x82\xae\xb3\xa4\x87\xae\xb4\xaf\xa5\xa0\xb5\xa8\xae\xaf\xef\xa7\xb3\xa0\xac\xa4\xb6\xae\xb3\xaa\xee\x82\xae\xb3\xa4\x87\xae\xb4\xaf\xa5\xa0\xb5\xa8\xae\xaf\xc1\x8e\x79\x68\x02\xe8\xe5\x91\x07\x9f\xa7\xaf\x3c\x0e",
        // "1.0.2" - #M02L10S5a
        "\xd7\xd4\xd6\xd4\xd8\xa6\x92\x44\x08\xca\x02\xfc\x4a\x43\xab\x2d",
        // "/usr/lib/libSystem.dylib" - #M03L20Saa
        "\x85\xdf\xd9\xd8\x85\xc6\xc3\xc8\x85\xc6\xc3\xc8\xf9\xd3\xd9\xde\xcf\xc7\x84\xce\xd3\xc6\xc3\xc8\xaa\xc0\x72\x10\xe0\xe6\xe4\x83",
        // "IOIteratorNext" - #M03L10Sa3
        "\xea\xec\xea\xd7\xc6\xd1\xc2\xd7\xcc\xd1\xed\xc6\xdb\xd7\xa3\xb6",
        // "CC_SHA1_Update" - #M02L10S5c
        "\xe7\xe7\x03\xf7\xec\xe5\xd5\x03\xf9\x14\x08\x05\x18\x09\xa4\x4a",
        // "CMSDecoderCopyContent" - #M03L20S6e
        "\x2d\x23\x3d\x2a\x0b\x0d\x01\x0a\x0b\x1c\x2d\x01\x1e\x17\x2d\x01\x00\x1a\x0b\x00\x1a\x6e\x49\x0d\x8f\xe6\x58\x6c\xcc\x27\x88\x81",
        // "CFDataCreate" - #M03L10S2d
        "\x6e\x6b\x69\x4c\x59\x4c\x6e\x5f\x48\x4c\x59\x48\x2d\x6b\x43\x6a",
        // "/usr/lib/libSystem.dylib" - #M03L20S92
        "\xbd\xe7\xe1\xe0\xbd\xfe\xfb\xf0\xbd\xfe\xfb\xf0\xc1\xeb\xe1\xe6\xf7\xff\xbc\xf6\xeb\xfe\xfb\xf0\x92\x20\x63\x66\x38\x00\x05\xc2",
        // "CMSDecoderCopySignerStatus" - #M02L20S66
        "\xdd\xe7\xed\xde\xff\xfd\x09\xfe\xff\x0c\xdd\x09\x0a\x13\xed\x03\x01\x08\xff\x0c\xed\x0e\xfb\x0e\x0f\x0d\x9a\x53\xe4\x5b\xca\xa7",
        // "CMSDecoderFinalizeMessage" - #M03L20Se6
        "\xa5\xab\xb5\xa2\x83\x85\x89\x82\x83\x94\xa0\x8f\x88\x87\x8a\x8f\x9c\x83\xab\x83\x95\x95\x87\x81\x83\xe6\x59\x95\x17\xb3\x2c\x12",
        // "CFURLCreateCopyAppendingPathComponent" - #M02L30Sffffffd3
        "\x70\x73\x82\x7f\x79\x70\x9f\x92\x8e\xa1\x92\x70\x9c\x9d\xa6\x6e\x9d\x9d\x92\x9b\x91\x96\x9b\x94\x7d\x8e\xa1\x95\x70\x9c\x9a\x9d\x9c\x9b\x92\x9b\xa1\x2d\x12\x85\x47\xfe\x2e\xe4\x09\x23\x2e\x21",
        // "CFBundleGetMainBundle" - #M03L20S30
        "\x73\x76\x72\x45\x5e\x54\x5c\x55\x77\x55\x44\x7d\x51\x59\x5e\x72\x45\x5e\x54\x5c\x55\x30\xe5\x95\x91\xc1\xac\x15\x41\x67\xbb\x45",
        // "CFBundleGetIdentifier" - #M03L20Sb4
        "\xf7\xf2\xf6\xc1\xda\xd0\xd8\xd1\xf3\xd1\xc0\xfd\xd0\xd1\xda\xc0\xdd\xd2\xdd\xd1\xc6\xb4\xc6\x77\x4c\xde\x34\x59\xe0\x95\xcb\x7e",
        // Empty slot
        "\x04\xe0\x54\x80\x1d\xe5\x68\xdc\x02\x96\x1a\x97\xd4\xc1\x58\x4c",
        // "dlopen" - #M02L10Sfffffff7
        "\x6d\x75\x78\x79\x6e\x77\x09\x2a\x7c\x88\xa9\x43\x40\x26\x10\x40",
        // "CMSDecoderCreate" - #M03L20S8f
        "\xcc\xc2\xdc\xcb\xea\xec\xe0\xeb\xea\xfd\xcc\xfd\xea\xee\xfb\xea\x8f\x09\xb8\x4b\x87\x6b\x5e\x55\xb5\xc7\x59\x42\x6a\x57\xc3\x97",
        // "CFRelease" - #M03L10S22
        "\x61\x64\x70\x47\x4e\x47\x43\x51\x47\x22\xa4\x84\x1a\xb2\xf3\x1d",
        // "Contents/_MASReceipt/receipt" - #M02L20Sffffffe8
        "\x5b\x87\x86\x8c\x7d\x86\x8c\x8b\x47\x77\x65\x59\x6b\x6a\x7d\x7b\x7d\x81\x88\x8c\x47\x8a\x7d\x7b\x7d\x81\x88\x8c\x18\x25\x7c\xe6",
        // "CFURLCreateDataAndPropertiesFromResource" - #M02L30S7c
        "\xc7\xca\xd9\xd6\xd0\xc7\xf6\xe9\xe5\xf8\xe9\xc8\xe5\xf8\xe5\xc5\xf2\xe8\xd4\xf6\xf3\xf4\xe9\xf6\xf8\xed\xe9\xf7\xca\xf6\xf3\xf1\xd6\xe9\xf7\xf3\xf9\xf6\xe7\xe9\x84\x5b\x0a\x09\x0a\x55\x43\x7a",
        // Empty slot
        "\xee\x23\xdd\x7a\xf6\xa2\x29\x79\x7a\x8b\x75\x71\x64\xa0\x69\x54",
        // "dlsym" - #M03L10S81
        "\xe5\xed\xf2\xf8\xec\x81\x2c\x3c\x45\x52\x5c\x56\x1e\xb2\xed\x8c",
        // "CFBundleCopyBundleURL" - #M03L20Sc8
        "\x8b\x8e\x8a\xbd\xa6\xac\xa4\xad\x8b\xa7\xb8\xb1\x8a\xbd\xa6\xac\xa4\xad\x9d\x9a\x84\xc8\x68\xac\x41\x70\x49\x60\x00\x03\x7f\xf9",
        // Empty slot
        "\x8d\x5b\x68\x40\x1d\x6b\x24\x21\x67\x47\x0a\x8d\x03\xb5\x71\x49",
        // "CMSDecoderGetNumSigners" - #M02L20S5e
        "\xe5\xef\xf5\xe6\x07\x05\x11\x06\x07\x14\xe9\x07\x16\xf0\x17\x0f\xf5\x0b\x09\x10\x07\x14\x15\xa2\x2b\x1f\x9e\x3c\x61\xc4\xfc\x33",
        // Empty slot
        "\xfc\x96\x61\x14\x2c\xcd\x46\xaf\x52\xf9\x17\xdd\xc7\xfc\xb7\xe0",
        // "CFArrayCreateMutable" - #M02L20S46
        "\xfd\x00\xfb\x2c\x2c\x1b\x33\xfd\x2c\x1f\x1b\x2e\x1f\x07\x2f\x2e\x1b\x1c\x26\x1f\xba\x39\x1e\x7f\xf4\x7e\x61\x21\xc9\xef\xf1\x6f",
        // "IOMACAddress" - #M02L10Sffffffbe
        "\x8b\x91\x8f\x83\x85\x83\xa6\xa6\xb4\xa7\xb5\xb5\x42\xf2\xc0\xfa",
        // "IOMasterPort" - #M02L10Sffffffa4
        "\xa5\xab\xa9\xbd\xcf\xd0\xc1\xce\xac\xcb\xce\xd0\x5c\x58\xad\x44",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M03L40S90
        "\xbf\xc3\xe9\xe3\xe4\xf5\xfd\xbf\xdc\xf9\xf2\xe2\xf1\xe2\xe9\xbf\xd6\xe2\xf1\xfd\xf5\xe7\xff\xe2\xfb\xe3\xbf\xd9\xdf\xdb\xf9\xe4\xbe\xf6\xe2\xf1\xfd\xf5\xe7\xff\xe2\xfb\xbf\xd9\xdf\xdb\xf9\xe4\x90\xf7\x5f\xf0\x31\xcb\xb0\x95\x14\x8d\x74\x35\xcb\xcc\xba\x63",
        // "CFNumberCreate" - #M02L10Sffffff8d
        "\xb6\xb9\xc1\xe8\xe0\xd5\xd8\xe5\xb6\xe5\xd8\xd4\xe7\xd8\x73\xcc",
        // "CFDataGetLength" - #M03L10Scd
        "\x8e\x8b\x89\xac\xb9\xac\x8a\xa8\xb9\x81\xa8\xa3\xaa\xb9\xa5\xcd",
        // Empty slot
        "\x2e\xd3\x8d\x47\xbd\xa3\xdb\xa4\x26\x47\x18\xe2\x76\x5c\x32\xca",
        // "exit" - #M02L10S3b
        "\x2a\x3d\x2e\x39\xc5\x37\x0c\x5b\x53\x01\x50\x6a\xcc\x38\x4e\x8b",
        // Empty slot
        "\x38\x7c\x59\x87\xd8\x6d\x9c\xac\x2c\x94\xb3\xd6\xad\x81\x45\xc2",
        // "CFDataAppendBytes" - #M03L20S12
        "\x51\x54\x56\x73\x66\x73\x53\x62\x62\x77\x7c\x76\x50\x6b\x66\x77\x61\x12\x70\xb7\x1b\x2f\x71\xdb\xda\x4e\x39\x11\xfa\x07\xb4\x8c",
        // Empty slot
        "\x20\xc3\x74\x21\x3f\x14\x17\x31\x5d\xe4\xba\xa4\xf4\xd9\x13\xa5",
        // Empty slot
        "\xcc\x82\x29\xf1\x4e\x36\x9b\x6c\xb3\xca\xd2\x9c\x63\xc6\x8d\xf5",
        // "CC_SHA1" - #M03L10S8b
        "\xc8\xc8\xd4\xd8\xc3\xca\xba\x8b\x21\x31\xaf\x87\xdd\x8c\x2f\x42",
        // "IORegistryEntryGetParentEntry" - #M02L20S4c
        "\xfd\x03\x06\x19\x1b\x1d\x27\x28\x26\x2d\xf9\x22\x28\x26\x2d\xfb\x19\x28\x04\x15\x26\x19\x22\x28\xf9\x22\x28\x26\x2d\xb4\x0a\x0c",
        // "CFEqual" - #M02L10Sffffffed
        "\x56\x59\x58\x84\x88\x74\x7f\x13\x5d\xa4\x5b\x2c\x9c\x50\xf4\xb5",
        // "CFDateFormatterSetFormat" - #M02L20S7d
        "\xc6\xc9\xc7\xe4\xf7\xe8\xc9\xf2\xf5\xf0\xe4\xf7\xf7\xe8\xf5\xd6\xe8\xf7\xc9\xf2\xf5\xf0\xe4\xf7\x83\x70\x04\xa7\x7f\x11\x35\x2e",
        // "IORegistryEntryCreateCFProperty" - #M02L20S6d
        "\xdc\xe2\xe5\xf8\xfa\xfc\x06\x07\x05\x0c\xd8\x01\x07\x05\x0c\xd6\x05\xf8\xf4\x07\xf8\xd6\xd9\xe3\x05\x02\x03\xf8\x05\x07\x0c\x93",
        // "/System/Library/Frameworks/Security.framework/Security" - #M03L40S9d
        "\xb2\xce\xe4\xee\xe9\xf8\xf0\xb2\xd1\xf4\xff\xef\xfc\xef\xe4\xb2\xdb\xef\xfc\xf0\xf8\xea\xf2\xef\xf6\xee\xb2\xce\xf8\xfe\xe8\xef\xf4\xe9\xe4\xb3\xfb\xef\xfc\xf0\xf8\xea\xf2\xef\xf6\xb2\xce\xf8\xfe\xe8\xef\xf4\xe9\xe4\x9d\x2f\x93\x9f\x66\x88\x4c\x35\x4b\xfd",
        // "CFDateFormatterCreateDateFromString" - #M02L30Sffffffaf
        "\x94\x97\x95\xb2\xc5\xb6\x97\xc0\xc3\xbe\xb2\xc5\xc5\xb6\xc3\x94\xc3\xb6\xb2\xc5\xb6\x95\xb2\xc5\xb6\x97\xc3\xc0\xbe\xa4\xc5\xc3\xba\xbf\xb8\x51\x02\x9f\x4a\xab\x38\x82\x84\x48\x56\x81\x14\x25",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" - #M02L40Sffffffab
        "\x84\xa8\xce\xc8\xc9\xba\xc2\x84\xa1\xbe\xb7\xc7\xb6\xc7\xce\x84\x9b\xc7\xb6\xc2\xba\xcc\xc4\xc7\xc0\xc8\x84\x96\xc5\xc5\xa0\xbe\xc9\x83\xbb\xc7\xb6\xc2\xba\xcc\xc4\xc7\xc0\x84\x96\xc5\xc5\xa0\xbe\xc9\x55\x3e\xb5\x25\x90\x84\x2e\x29\x1e\x2b\xaa\x8d\xa6\x62",
        // "/System/Library/Frameworks/Security.framework/Security" - #M02L40S2d
        "\x02\x26\x4c\x46\x47\x38\x40\x02\x1f\x3c\x35\x45\x34\x45\x4c\x02\x19\x45\x34\x40\x38\x4a\x42\x45\x3e\x46\x02\x26\x38\x36\x48\x45\x3c\x47\x4c\x01\x39\x45\x34\x40\x38\x4a\x42\x45\x3e\x02\x26\x38\x36\x48\x45\x3c\x47\x4c\xd3\xb4\xe6\x66\x1f\xe6\xb3\xae\xb1\xd7",
        // "CFStringCompare" - #M03L10See
        "\xad\xa8\xbd\x9a\x9c\x87\x80\x89\xad\x81\x83\x9e\x8f\x9c\x8b\xee",
        // "IOObjectRelease" - #M02L10Sfffffff5
        "\x54\x5a\x5a\x6d\x75\x70\x6e\x7f\x5d\x70\x77\x70\x6c\x7e\x70\x0b",
        // "CFURLCreateWithFileSystemPathRelativeToBase" - #M03L30Sea
        "\xa9\xac\xbf\xb8\xa6\xa9\x98\x8f\x8b\x9e\x8f\xbd\x83\x9e\x82\xac\x83\x86\x8f\xb9\x93\x99\x9e\x8f\x87\xba\x8b\x9e\x82\xb8\x8f\x86\x8b\x9e\x83\x9c\x8f\xbe\x85\xa8\x8b\x99\x8f\xea\xe0\x61\xf3\x9f",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M02L40S05
        "\x2a\x4e\x74\x6e\x6f\x60\x68\x2a\x47\x64\x5d\x6d\x5c\x6d\x74\x2a\x41\x6d\x5c\x68\x60\x72\x6a\x6d\x66\x6e\x2a\x44\x4a\x46\x64\x6f\x29\x61\x6d\x5c\x68\x60\x72\x6a\x6d\x66\x2a\x44\x4a\x46\x64\x6f\xfb\xa2\xbc\x80\x2b\x48\x90\x16\xa1\xa2\xc7\x36\x58\x0b\x7a\x95",
        // "CFDictionaryGetValue" - #M02L20S29
        "\x1a\x1d\x1b\x40\x3a\x4b\x40\x46\x45\x38\x49\x50\x1e\x3c\x4b\x2d\x38\x43\x4c\x3c\xd7\x46\xf8\x53\x29\xb9\xaa\xad\xf5\x7a\x91\x6b",
        // "CFArrayAppendValue" - #M03L20Sae
        "\xed\xe8\xef\xdc\xdc\xcf\xd7\xef\xde\xde\xcb\xc0\xca\xf8\xcf\xc2\xdb\xcb\xae\x5c\xa5\xb9\xae\xbd\xc9\x8f\x59\x45\x55\x4e\x8b\x47",
        // "com.edcodia.graphpouch" - #M02L20Sffffffca
        "\x99\xa5\xa3\x64\x9b\x9a\x99\xa5\x9a\x9f\x97\x64\x9d\xa8\x97\xa6\x9e\xa6\xa5\xab\x99\x9e\x36\xea\x4d\x31\x81\x23\x09\x71\xbf\xb5",
        // "SecStaticCodeCheckValidityWithErrors" - #M03L30S89
        "\xda\xec\xea\xda\xfd\xe8\xfd\xe0\xea\xca\xe6\xed\xec\xca\xe1\xec\xea\xe2\xdf\xe8\xe5\xe0\xed\xe0\xfd\xf0\xde\xe0\xfd\xe1\xcc\xfb\xfb\xe6\xfb\xfa\x89\xbe\x27\x9f\x77\x2c\x41\x36\x01\xec\x17\xf4",
        // "CFDateFormatterCreate" - #M03L20Sb6
        "\xf5\xf0\xf2\xd7\xc2\xd3\xf0\xd9\xc4\xdb\xd7\xc2\xc2\xd3\xc4\xf5\xc4\xd3\xd7\xc2\xd3\xb6\x57\xfc\x71\x9e\xa5\xcf\x04\x1d\xfa\x80",
        // "1.0.2" - #M02L10Sffffffa9
        "\x88\x85\x87\x85\x89\x57\xef\x15\xcd\xa1\x19\x28\x4a\x21\x5b\xb7",
        // "IOBSDNameMatching" - #M02L20S32
        "\x17\x1d\x10\x21\x12\x1c\x2f\x3b\x33\x1b\x2f\x42\x31\x36\x37\x3c\x35\xce\x1a\xba\xc2\x62\x1c\x34\xe1\x1d\x60\xc7\x6d\x9c\xad\x6e",
        // "/System/Library/Frameworks/Security.framework/Security" - #M03L40Sc9
        "\xe6\x9a\xb0\xba\xbd\xac\xa4\xe6\x85\xa0\xab\xbb\xa8\xbb\xb0\xe6\x8f\xbb\xa8\xa4\xac\xbe\xa6\xbb\xa2\xba\xe6\x9a\xac\xaa\xbc\xbb\xa0\xbd\xb0\xe7\xaf\xbb\xa8\xa4\xac\xbe\xa6\xbb\xa2\xe6\x9a\xac\xaa\xbc\xbb\xa0\xbd\xb0\xc9\xa9\xc0\x80\x0e\x34\x28\x2f\x92\x89",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" - #M02L30S45
        "\x34\x34\x34\x34\xe2\xe8\xe2\x08\x08\xe2\xe8\xe2\x1f\x1f\xe2\x0f\xe2\x03\x03\xe2\xf5\xe2\x28\x28\xe2\xf5\xe2\x2e\x2e\xe2\x15\xe2\xbb\x83\xbf\x4c\xcd\xe4\xb2\xc0\x2c\x66\xb2\x67\x5e\xf8\x8b\xd7",
        // Empty slot
        "\xe9\x33\x27\xd1\x67\x58\xb7\x92\xaf\xd6\x5d\xe7\x1e\x65\x11\xc0",
        // "SecStaticCodeCheckValidity" - #M02L20S36
        "\x1d\x2f\x2d\x1d\x3e\x2b\x3e\x33\x2d\x0d\x39\x2e\x2f\x0d\x32\x2f\x2d\x35\x20\x2b\x36\x33\x2e\x33\x3e\x43\xca\x69\x2e\xb2\x1b\x75",
        // "SecAsn1CoderRelease" - #M03L20S91
        "\xc2\xf4\xf2\xd0\xe2\xff\xa0\xd2\xfe\xf5\xf4\xe3\xc3\xf4\xfd\xf4\xf0\xe2\xf4\x91\x1d\x58\x98\xe2\x9c\xde\x14\x12\xd5\xdc\xd2\xa0",
        // "SecStaticCodeCreateWithPath" - #M03L20S22
        "\x71\x47\x41\x71\x56\x43\x56\x4b\x41\x61\x4d\x46\x47\x61\x50\x47\x43\x56\x47\x75\x4b\x56\x4a\x72\x43\x56\x4a\x22\xf2\xdb\x61\x35",
        // "CFBundleShortVersionString" - #M02L20S0b
        "\x38\x3b\x37\x6a\x63\x59\x61\x5a\x48\x5d\x64\x67\x69\x4b\x5a\x67\x68\x5e\x64\x63\x48\x69\x67\x5e\x63\x5c\xf5\x05\x44\x8e\xd4\x82",
        // "CFBundleGetValueForInfoDictionaryKey" - #M03L30S9d
        "\xde\xdb\xdf\xe8\xf3\xf9\xf1\xf8\xda\xf8\xe9\xcb\xfc\xf1\xe8\xf8\xdb\xf2\xef\xd4\xf3\xfb\xf2\xd9\xf4\xfe\xe9\xf4\xf2\xf3\xfc\xef\xe4\xd6\xf8\xe4\x9d\x62\xaa\xa2\x9f\x2f\x3a\xd6\xd8\x2b\xe3\x86",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M03L40Sab
        "\x84\xf8\xd2\xd8\xdf\xce\xc6\x84\xe7\xc2\xc9\xd9\xca\xd9\xd2\x84\xed\xd9\xca\xc6\xce\xdc\xc4\xd9\xc0\xd8\x84\xe2\xe4\xe0\xc2\xdf\x85\xcd\xd9\xca\xc6\xce\xdc\xc4\xd9\xc0\x84\xe2\xe4\xe0\xc2\xdf\xab\xdd\xfd\x2f\xf9\xfe\x07\x88\x89\x15\x77\x99\x8c\xe7\x11\xa3",
        // "en0" - #M03L10S5d
        "\x38\x33\x6d\x5d\xe0\x12\x06\xfd\x24\xde\xc5\xee\x5b\x8a\xd5\x30",
        // "SecAsn1CoderCreate" - #M02L20S05
        "\x4e\x60\x5e\x3c\x6e\x69\x2c\x3e\x6a\x5f\x60\x6d\x3e\x6d\x60\x5c\x6f\x60\xfb\xca\x4d\x25\x1b\x02\xbd\xa8\x33\x54\xeb\x2a\x4d\x7c",
        // "CFDictionaryCreateMutable" - #M03L20S25
        "\x66\x63\x61\x4c\x46\x51\x4c\x4a\x4b\x44\x57\x5c\x66\x57\x40\x44\x51\x40\x68\x50\x51\x44\x47\x49\x40\x25\x9c\xe8\x5d\xf1\x05\x61",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M02L50Sffffffae
        "\x81\xa5\xcb\xc5\xc6\xb7\xbf\x81\x9e\xbb\xb4\xc4\xb3\xc4\xcb\x81\x98\xc4\xb3\xbf\xb7\xc9\xc1\xc4\xbd\xc5\x81\x95\xc1\xc4\xb7\x98\xc1\xc7\xc0\xb6\xb3\xc6\xbb\xc1\xc0\x80\xb8\xc4\xb3\xbf\xb7\xc9\xc1\xc4\xbd\x81\x95\xc1\xc4\xb7\x98\xc1\xc7\xc0\xb6\xb3\xc6\xbb\xc1\xc0\x52\x58\x20\x15\x7b\x6b\xe7\xb5\x66\xba\x28\x52\x93\xab",
        // "NSApplicationMain" - #M02L20Sffffff82
        "\xcc\xd1\xbf\xee\xee\xea\xe7\xe1\xdf\xf2\xe7\xed\xec\xcb\xdf\xe7\xec\x7e\x0e\xf8\x3f\x28\xd5\x0f\xe9\x30\x00\xda\xc9\xd7\x5e\xcc",
        // "CFStringCreateWithCString" - #M02L20S6b
        "\xd8\xdb\xe8\x09\x07\xfe\x03\xfc\xd8\x07\xfa\xf6\x09\xfa\xec\xfe\x09\xfd\xd8\xe8\x09\x07\xfe\x03\xfc\x95\x99\x14\xe6\xd9\xcd\xa4",
        // "/usr/lib/libSystem.dylib" - #M02L20S3f
        "\xf0\x36\x34\x33\xf0\x2d\x2a\x23\xf0\x2d\x2a\x23\x14\x3a\x34\x35\x26\x2e\xef\x25\x3a\x2d\x2a\x23\xc1\x93\xec\x26\x77\x86\x86\xa0",
        // "CFDataGetBytePtr" - #M03L20S29
        "\x6a\x6f\x6d\x48\x5d\x48\x6e\x4c\x5d\x6b\x50\x5d\x4c\x79\x5d\x5b\x29\x6f\xbb\xb7\xf0\x5a\x5d\x3c\xb1\xf1\x46\x28\x5d\x07\xe4\x21",
        // "CC_SHA1_Final" - #M02L10S0d
        "\x36\x36\x52\x46\x3b\x34\x24\x52\x39\x5c\x61\x54\x5f\xf3\x2b\xd5",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M03L50Sa1
        "\x8e\xf2\xd8\xd2\xd5\xc4\xcc\x8e\xed\xc8\xc3\xd3\xc0\xd3\xd8\x8e\xe7\xd3\xc0\xcc\xc4\xd6\xce\xd3\xca\xd2\x8e\xe2\xce\xd3\xc4\xe7\xce\xd4\xcf\xc5\xc0\xd5\xc8\xce\xcf\x8f\xc7\xd3\xc0\xcc\xc4\xd6\xce\xd3\xca\x8e\xe2\xce\xd3\xc4\xe7\xce\xd4\xcf\xc5\xc0\xd5\xc8\xce\xcf\xa1\x35\xe7\x63\xf6\x27\x1c\x54\x59\x89\x73\xa1\xca\x93",
        // "CFStringCreateWithBytes" - #M03L20S77
        "\x34\x31\x24\x03\x05\x1e\x19\x10\x34\x05\x12\x16\x03\x12\x20\x1e\x03\x1f\x35\x0e\x03\x12\x04\x77\x14\x91\x8c\xfe\x84\xe8\x64\xc0",
        // "IOServiceGetMatchingServices" - #M03L20S48
        "\x01\x07\x1b\x2d\x3a\x3e\x21\x2b\x2d\x0f\x2d\x3c\x05\x29\x3c\x2b\x20\x21\x26\x2f\x1b\x2d\x3a\x3e\x21\x2b\x2d\x3b\x48\x2e\x9f\xda",
        // "SecAsn1Decode" - #M03L10S56
        "\x05\x33\x35\x17\x25\x38\x67\x12\x33\x35\x39\x32\x33\x56\x1d\xe1",
        // "/usr/lib/libSystem.dylib" - #M03L20S51
        "\x7e\x24\x22\x23\x7e\x3d\x38\x33\x7e\x3d\x38\x33\x02\x28\x22\x25\x34\x3c\x7f\x35\x28\x3d\x38\x33\x51\x1a\x6e\x4c\x73\xab\x3b\x49",
        // Empty slot
        "\xe1\xe9\x03\x11\x1d\x7e\x34\x2a\xd9\x40\xf9\x6e\xac\xbe\x79\xca",
        // "com.edcodia.graphpouch" - #M03L20S79
        "\x1a\x16\x14\x57\x1c\x1d\x1a\x16\x1d\x10\x18\x57\x1e\x0b\x18\x09\x11\x09\x16\x0c\x1a\x11\x79\xf6\xeb\xcd\xe3\x2c\xf4\x74\xe6\xa7",
        // "CC_SHA1_Init" - #M03L10S9b
        "\xd8\xd8\xc4\xc8\xd3\xda\xaa\xc4\xd2\xf5\xf2\xef\x9b\x0f\x67\x27",
        // "/System/Library/Frameworks/Security.framework/Security" - #M02L40Sffffffab
        "\x84\xa8\xce\xc8\xc9\xba\xc2\x84\xa1\xbe\xb7\xc7\xb6\xc7\xce\x84\x9b\xc7\xb6\xc2\xba\xcc\xc4\xc7\xc0\xc8\x84\xa8\xba\xb8\xca\xc7\xbe\xc9\xce\x83\xbb\xc7\xb6\xc2\xba\xcc\xc4\xc7\xc0\x84\xa8\xba\xb8\xca\xc7\xbe\xc9\xce\x55\x3e\x78\xf2\x3e\xc3\xfa\x82\xee\xd8",
        // "anchor apple generic" - #M02L20Sffffff98
        "\xc9\xd6\xcb\xd0\xd7\xda\x88\xc9\xd8\xd8\xd4\xcd\x88\xcf\xcd\xd6\xcd\xda\xd1\xcb\x68\x49\x61\xd0\xfb\xe4\x8c\x9d\xdb\x58\x89\xf0",
    };
    
    
    //
    // Table for storing various pointers
    //
    static void *EDReceiptValidation_pointers[0x005c] = {
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) dlopen),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) dlsym),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) CFStringCreateWithCString),
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) CFStringCreateWithBytes),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
    };
    
    
    //
    // Function pointer for string decryption
    //
    typedef void (*EDReceiptValidation_decrypt)(const char *p1, char *p2, char p3, int p4);
    
    // Function pointer for 'CC_SHA1'
    typedef unsigned char *(*_EDReceiptValidation_CC_SHA1_)(const void *data, CC_LONG len, unsigned char *md);
    // Function pointer for 'CC_SHA1_Final'
    typedef int (*_EDReceiptValidation_CC_SHA1_Final_)(unsigned char *md, CC_SHA1_CTX *c);
    // Function pointer for 'CC_SHA1_Init'
    typedef int (*_EDReceiptValidation_CC_SHA1_Init_)(CC_SHA1_CTX *c);
    // Function pointer for 'CC_SHA1_Update'
    typedef int (*_EDReceiptValidation_CC_SHA1_Update_)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
    // Function pointer for 'CFArrayAppendValue'
    typedef void (*_EDReceiptValidation_CFArrayAppendValue_)(CFMutableArrayRef theArray, const void *value);
    // Function pointer for 'CFArrayCreateMutable'
    typedef CFMutableArrayRef (*_EDReceiptValidation_CFArrayCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
    // Function pointer for 'CFBundleCopyBundleURL'
    typedef CFURLRef (*_EDReceiptValidation_CFBundleCopyBundleURL_)(CFBundleRef bundle);
    // Function pointer for 'CFBundleGetIdentifier'
    typedef CFStringRef (*_EDReceiptValidation_CFBundleGetIdentifier_)(CFBundleRef bundle);
    // Function pointer for 'CFBundleGetMainBundle'
    typedef CFBundleRef (*_EDReceiptValidation_CFBundleGetMainBundle_)();
    // Function pointer for 'CFBundleGetValueForInfoDictionaryKey'
    typedef CFTypeRef (*_EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_)(CFBundleRef bundle, CFStringRef key);
    // Function pointer for 'CFDataAppendBytes'
    typedef void (*_EDReceiptValidation_CFDataAppendBytes_)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
    // Function pointer for 'CFDataCreate'
    typedef CFDataRef (*_EDReceiptValidation_CFDataCreate_)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
    // Function pointer for 'CFDataCreateMutable'
    typedef CFMutableDataRef (*_EDReceiptValidation_CFDataCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity);
    // Function pointer for 'CFDataGetBytePtr'
    typedef const UInt8 *(*_EDReceiptValidation_CFDataGetBytePtr_)(CFDataRef theData);
    // Function pointer for 'CFDataGetLength'
    typedef CFIndex (*_EDReceiptValidation_CFDataGetLength_)(CFDataRef theData);
    // Function pointer for 'CFDateFormatterCreate'
    typedef CFDateFormatterRef (*_EDReceiptValidation_CFDateFormatterCreate_)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
    // Function pointer for 'CFDateFormatterCreateDateFromString'
    typedef CFDateRef (*_EDReceiptValidation_CFDateFormatterCreateDateFromString_)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
    // Function pointer for 'CFDateFormatterSetFormat'
    typedef void (*_EDReceiptValidation_CFDateFormatterSetFormat_)(CFDateFormatterRef formatter, CFStringRef formatString);
    // Function pointer for 'CFDictionaryAddValue'
    typedef void (*_EDReceiptValidation_CFDictionaryAddValue_)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Function pointer for 'CFDictionaryCreateMutable'
    typedef CFMutableDictionaryRef (*_EDReceiptValidation_CFDictionaryCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
    // Function pointer for 'CFDictionaryGetValue'
    typedef const void *(*_EDReceiptValidation_CFDictionaryGetValue_)(CFDictionaryRef theDict, const void *key);
    // Function pointer for 'CFEqual'
    typedef Boolean (*_EDReceiptValidation_CFEqual_)(CFTypeRef cf1, CFTypeRef cf2);
    // Function pointer for 'CFNumberCreate'
    typedef CFNumberRef (*_EDReceiptValidation_CFNumberCreate_)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
    // Function pointer for 'CFRelease'
    typedef void (*_EDReceiptValidation_CFRelease_)(CFTypeRef cf);
    // Function pointer for 'CFStringCompare'
    typedef CFComparisonResult (*_EDReceiptValidation_CFStringCompare_)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
    // Function pointer for 'CFStringCreateWithBytes'
    typedef CFStringRef (*_EDReceiptValidation_CFStringCreateWithBytes_)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
    // Function pointer for 'CFStringCreateWithCString'
    typedef CFStringRef (*_EDReceiptValidation_CFStringCreateWithCString_)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
    // Function pointer for 'CFURLCreateCopyAppendingPathComponent'
    typedef CFURLRef (*_EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
    // Function pointer for 'CFURLCreateDataAndPropertiesFromResource'
    typedef Boolean (*_EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_)(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode);
    // Function pointer for 'CFURLCreateWithFileSystemPathRelativeToBase'
    typedef CFURLRef (*_EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
    // Function pointer for 'CMSDecoderCopyContent'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderCopyContent_)(CMSDecoderRef cmsDecoder, CFDataRef *contentOut);
    // Function pointer for 'CMSDecoderCopySignerStatus'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderCopySignerStatus_)(CMSDecoderRef cmsDecoder, size_t signerIndex, CFTypeRef policyOrArray, Boolean evaluateSecTrust, CMSSignerStatus *signerStatusOut, SecTrustRef *secTrustOut, OSStatus *certVerifyResultCodeOut);
    // Function pointer for 'CMSDecoderCreate'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderCreate_)(CMSDecoderRef *cmsDecoderOut);
    // Function pointer for 'CMSDecoderFinalizeMessage'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderFinalizeMessage_)(CMSDecoderRef cmsDecoder);
    // Function pointer for 'CMSDecoderGetNumSigners'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderGetNumSigners_)(CMSDecoderRef cmsDecoder, size_t *numSignersOut);
    // Function pointer for 'CMSDecoderUpdateMessage'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderUpdateMessage_)(CMSDecoderRef cmsDecoder, const void *msgBytes, size_t msgBytesLen);
    // Function pointer for 'dlopen'
    typedef void *(*_EDReceiptValidation_dlopen_)(const char * __path, int __mode);
    // Function pointer for 'dlsym'
    typedef void *(*_EDReceiptValidation_dlsym_)(void * __handle, const char * __symbol);
    // Function pointer for 'exit'
    typedef void (*_EDReceiptValidation_exit_)(int status);
    // Function pointer for 'IOBSDNameMatching'
    typedef CFMutableDictionaryRef (*_EDReceiptValidation_IOBSDNameMatching_)(mach_port_t masterPort, uint32_t options, const char * bsdName);
    // Function pointer for 'IOIteratorNext'
    typedef io_object_t (*_EDReceiptValidation_IOIteratorNext_)(io_iterator_t iterator);
    // Function pointer for 'IOMasterPort'
    typedef kern_return_t (*_EDReceiptValidation_IOMasterPort_)(mach_port_t bootstrapPort, mach_port_t *masterPort);
    // Function pointer for 'IOObjectRelease'
    typedef kern_return_t (*_EDReceiptValidation_IOObjectRelease_)(io_object_t object);
    // Function pointer for 'IORegistryEntryCreateCFProperty'
    typedef CFTypeRef (*_EDReceiptValidation_IORegistryEntryCreateCFProperty_)(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options);
    // Function pointer for 'IORegistryEntryGetParentEntry'
    typedef kern_return_t (*_EDReceiptValidation_IORegistryEntryGetParentEntry_)(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t * parent);
    // Function pointer for 'IOServiceGetMatchingServices'
    typedef kern_return_t (*_EDReceiptValidation_IOServiceGetMatchingServices_)(mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t *existing);
    // Function pointer for 'NSApplicationMain'
    typedef int (*_EDReceiptValidation_NSApplicationMain_)(int argc, const char *argv[]);
    // Function pointer for 'SecAsn1CoderCreate'
    typedef OSStatus (*_EDReceiptValidation_SecAsn1CoderCreate_)(SecAsn1CoderRef *coder);
    // Function pointer for 'SecAsn1CoderRelease'
    typedef OSStatus (*_EDReceiptValidation_SecAsn1CoderRelease_)(SecAsn1CoderRef coder);
    // Function pointer for 'SecAsn1Decode'
    typedef OSStatus (*_EDReceiptValidation_SecAsn1Decode_)(SecAsn1CoderRef coder, const void *src, size_t len, const SecAsn1Template *templates, void *dest);
    // Function pointer for 'SecPolicyCreateBasicX509'
    typedef SecPolicyRef (*_EDReceiptValidation_SecPolicyCreateBasicX509_)(void);
    // Function pointer for 'SecRequirementCreateWithString'
    typedef OSStatus (*_EDReceiptValidation_SecRequirementCreateWithString_)(CFStringRef text, SecCSFlags flags, SecRequirementRef *requirement);
    // Function pointer for 'SecRequirementCreateWithStringAndErrors'
    typedef OSStatus (*_EDReceiptValidation_SecRequirementCreateWithStringAndErrors_)(CFStringRef text, SecCSFlags flags, CFErrorRef *errors, SecRequirementRef *requirement);
    // Function pointer for 'SecStaticCodeCheckValidity'
    typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCheckValidity_)(SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement);
    // Function pointer for 'SecStaticCodeCheckValidityWithErrors'
    typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_)(SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement, CFErrorRef *errors);
    // Function pointer for 'SecStaticCodeCreateWithPath'
    typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCreateWithPath_)(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode);
    
    
    // Function wrapper for 'CC_SHA1'
#define EDReceiptValidation_CC_SHA1_ ((_EDReceiptValidation_CC_SHA1_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 9, 170, 32, EDReceiptValidation_ObfuscationFunction1, 44, 139, 16))
    // Function wrapper for 'CC_SHA1_Final'
#define EDReceiptValidation_CC_SHA1_Final_ ((_EDReceiptValidation_CC_SHA1_Final_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 14, 146, 32, EDReceiptValidation_ObfuscationFunction2, 81, 13, 16))
    // Function wrapper for 'CC_SHA1_Init'
#define EDReceiptValidation_CC_SHA1_Init_ ((_EDReceiptValidation_CC_SHA1_Init_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 86, 81, 32, EDReceiptValidation_ObfuscationFunction1, 89, 155, 16))
    // Function wrapper for 'CC_SHA1_Update'
#define EDReceiptValidation_CC_SHA1_Update_ ((_EDReceiptValidation_CC_SHA1_Update_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 79, 63, 32, EDReceiptValidation_ObfuscationFunction3, 11, 92, 16))
    // Function wrapper for 'CFArrayAppendValue'
#define EDReceiptValidation_CFArrayAppendValue_ ((_EDReceiptValidation_CFArrayAppendValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 7, 193, 80, EDReceiptValidation_ObfuscationFunction4, 58, 174, 32))
    // Function wrapper for 'CFArrayCreateMutable'
#define EDReceiptValidation_CFArrayCreateMutable_ ((_EDReceiptValidation_CFArrayCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 0, 25, 80, EDReceiptValidation_ObfuscationFunction3, 32, 70, 32))
    // Function wrapper for 'CFBundleCopyBundleURL'
#define EDReceiptValidation_CFBundleCopyBundleURL_ ((_EDReceiptValidation_CFBundleCopyBundleURL_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 76, -82, 80, EDReceiptValidation_ObfuscationFunction4, 28, 200, 32))
    // Function wrapper for 'CFBundleGetIdentifier'
#define EDReceiptValidation_CFBundleGetIdentifier_ ((_EDReceiptValidation_CFBundleGetIdentifier_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 7, 193, 80, EDReceiptValidation_ObfuscationFunction1, 19, 180, 32))
    // Function wrapper for 'CFBundleGetMainBundle'
#define EDReceiptValidation_CFBundleGetMainBundle_ ((_EDReceiptValidation_CFBundleGetMainBundle_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 76, -82, 80, EDReceiptValidation_ObfuscationFunction4, 18, 48, 32))
    // Function wrapper for 'CFBundleGetValueForInfoDictionaryKey'
#define EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_ ((_EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 82, 161, 80, EDReceiptValidation_ObfuscationFunction1, 71, 157, 48))
    // Function wrapper for 'CFDataAppendBytes'
#define EDReceiptValidation_CFDataAppendBytes_ ((_EDReceiptValidation_CFDataAppendBytes_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 76, -82, 80, EDReceiptValidation_ObfuscationFunction4, 41, 18, 32))
    // Function wrapper for 'CFDataCreate'
#define EDReceiptValidation_CFDataCreate_ ((_EDReceiptValidation_CFDataCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 76, -82, 80, EDReceiptValidation_ObfuscationFunction4, 13, 45, 16))
    // Function wrapper for 'CFDataCreateMutable'
#define EDReceiptValidation_CFDataCreateMutable_ ((_EDReceiptValidation_CFDataCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 0, 25, 80, EDReceiptValidation_ObfuscationFunction4, 2, 110, 32))
    // Function wrapper for 'CFDataGetBytePtr'
#define EDReceiptValidation_CFDataGetBytePtr_ ((_EDReceiptValidation_CFDataGetBytePtr_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 76, -82, 80, EDReceiptValidation_ObfuscationFunction1, 80, 41, 32))
    // Function wrapper for 'CFDataGetLength'
#define EDReceiptValidation_CFDataGetLength_ ((_EDReceiptValidation_CFDataGetLength_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 0, 25, 80, EDReceiptValidation_ObfuscationFunction1, 37, 205, 16))
    // Function wrapper for 'CFDateFormatterCreate'
#define EDReceiptValidation_CFDateFormatterCreate_ ((_EDReceiptValidation_CFDateFormatterCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 0, 25, 80, EDReceiptValidation_ObfuscationFunction4, 61, 182, 32))
    // Function wrapper for 'CFDateFormatterCreateDateFromString'
#define EDReceiptValidation_CFDateFormatterCreateDateFromString_ ((_EDReceiptValidation_CFDateFormatterCreateDateFromString_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 76, -82, 80, EDReceiptValidation_ObfuscationFunction2, 50, -81, 48))
    // Function wrapper for 'CFDateFormatterSetFormat'
#define EDReceiptValidation_CFDateFormatterSetFormat_ ((_EDReceiptValidation_CFDateFormatterSetFormat_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 0, 25, 80, EDReceiptValidation_ObfuscationFunction2, 47, 125, 32))
    // Function wrapper for 'CFDictionaryAddValue'
#define EDReceiptValidation_CFDictionaryAddValue_ ((_EDReceiptValidation_CFDictionaryAddValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 76, -82, 80, EDReceiptValidation_ObfuscationFunction4, 3, 81, 32))
    // Function wrapper for 'CFDictionaryCreateMutable'
#define EDReceiptValidation_CFDictionaryCreateMutable_ ((_EDReceiptValidation_CFDictionaryCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 0, 25, 80, EDReceiptValidation_ObfuscationFunction1, 75, 37, 32))
    // Function wrapper for 'CFDictionaryGetValue'
#define EDReceiptValidation_CFDictionaryGetValue_ ((_EDReceiptValidation_CFDictionaryGetValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 76, -82, 80, EDReceiptValidation_ObfuscationFunction3, 57, 41, 32))
    // Function wrapper for 'CFEqual'
#define EDReceiptValidation_CFEqual_ ((_EDReceiptValidation_CFEqual_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 76, -82, 80, EDReceiptValidation_ObfuscationFunction3, 46, -19, 16))
    // Function wrapper for 'CFNumberCreate'
#define EDReceiptValidation_CFNumberCreate_ ((_EDReceiptValidation_CFNumberCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 7, 193, 80, EDReceiptValidation_ObfuscationFunction3, 36, -115, 16))
    // Function wrapper for 'CFRelease'
#define EDReceiptValidation_CFRelease_ ((_EDReceiptValidation_CFRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 7, 193, 80, EDReceiptValidation_ObfuscationFunction1, 23, 34, 16))
    // Function wrapper for 'CFStringCompare'
#define EDReceiptValidation_CFStringCompare_ ((_EDReceiptValidation_CFStringCompare_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 7, 193, 80, EDReceiptValidation_ObfuscationFunction4, 53, 238, 16))
    // Function wrapper for 'CFStringCreateWithBytes'
#define EDReceiptValidation_CFStringCreateWithBytes_ ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_pointers[83])
    // Function wrapper for 'CFStringCreateWithCString'
#define EDReceiptValidation_CFStringCreateWithCString_ ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_pointers[78])
    // Function wrapper for 'CFURLCreateCopyAppendingPathComponent'
#define EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_ ((_EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 0, 25, 80, EDReceiptValidation_ObfuscationFunction3, 17, -45, 48))
    // Function wrapper for 'CFURLCreateDataAndPropertiesFromResource'
#define EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_ ((_EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 0, 25, 80, EDReceiptValidation_ObfuscationFunction3, 25, 124, 48))
    // Function wrapper for 'CFURLCreateWithFileSystemPathRelativeToBase'
#define EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_ ((_EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 82, 161, 80, EDReceiptValidation_ObfuscationFunction1, 55, 234, 48))
    // Function wrapper for 'CMSDecoderCopyContent'
#define EDReceiptValidation_CMSDecoderCopyContent_ ((_EDReceiptValidation_CMSDecoderCopyContent_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 90, -85, 64, EDReceiptValidation_ObfuscationFunction4, 12, 110, 32))
    // Function wrapper for 'CMSDecoderCopySignerStatus'
#define EDReceiptValidation_CMSDecoderCopySignerStatus_ ((_EDReceiptValidation_CMSDecoderCopySignerStatus_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 52, 45, 64, EDReceiptValidation_ObfuscationFunction2, 15, 102, 32))
    // Function wrapper for 'CMSDecoderCreate'
#define EDReceiptValidation_CMSDecoderCreate_ ((_EDReceiptValidation_CMSDecoderCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 52, 45, 64, EDReceiptValidation_ObfuscationFunction1, 22, 143, 32))
    // Function wrapper for 'CMSDecoderFinalizeMessage'
#define EDReceiptValidation_CMSDecoderFinalizeMessage_ ((_EDReceiptValidation_CMSDecoderFinalizeMessage_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 90, -85, 64, EDReceiptValidation_ObfuscationFunction1, 16, 230, 32))
    // Function wrapper for 'CMSDecoderGetNumSigners'
#define EDReceiptValidation_CMSDecoderGetNumSigners_ ((_EDReceiptValidation_CMSDecoderGetNumSigners_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 64, 201, 64, EDReceiptValidation_ObfuscationFunction3, 30, 94, 32))
    // Function wrapper for 'CMSDecoderUpdateMessage'
#define EDReceiptValidation_CMSDecoderUpdateMessage_ ((_EDReceiptValidation_CMSDecoderUpdateMessage_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 52, 45, 64, EDReceiptValidation_ObfuscationFunction4, 4, 206, 32))
    // Function wrapper for 'dlopen'
#define EDReceiptValidation_dlopen_ ((_EDReceiptValidation_dlopen_) EDReceiptValidation_pointers[21])
    // Function wrapper for 'dlsym'
#define EDReceiptValidation_dlsym_ ((_EDReceiptValidation_dlsym_) EDReceiptValidation_pointers[27])
    // Function wrapper for 'exit'
#define EDReceiptValidation_exit_ ((_EDReceiptValidation_exit_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 86, 81, 32, EDReceiptValidation_ObfuscationFunction3, 39, 59, 16))
    // Function wrapper for 'IOBSDNameMatching'
#define EDReceiptValidation_IOBSDNameMatching_ ((_EDReceiptValidation_IOBSDNameMatching_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 56, 5, 64, EDReceiptValidation_ObfuscationFunction3, 63, 50, 32))
    // Function wrapper for 'IOIteratorNext'
#define EDReceiptValidation_IOIteratorNext_ ((_EDReceiptValidation_IOIteratorNext_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 35, 144, 64, EDReceiptValidation_ObfuscationFunction1, 10, 163, 16))
    // Function wrapper for 'IOMasterPort'
#define EDReceiptValidation_IOMasterPort_ ((_EDReceiptValidation_IOMasterPort_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 72, 171, 64, EDReceiptValidation_ObfuscationFunction2, 34, -92, 16))
    // Function wrapper for 'IOObjectRelease'
#define EDReceiptValidation_IOObjectRelease_ ((_EDReceiptValidation_IOObjectRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 72, 171, 64, EDReceiptValidation_ObfuscationFunction2, 54, -11, 16))
    // Function wrapper for 'IORegistryEntryCreateCFProperty'
#define EDReceiptValidation_IORegistryEntryCreateCFProperty_ ((_EDReceiptValidation_IORegistryEntryCreateCFProperty_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 35, 144, 64, EDReceiptValidation_ObfuscationFunction2, 48, 109, 32))
    // Function wrapper for 'IORegistryEntryGetParentEntry'
#define EDReceiptValidation_IORegistryEntryGetParentEntry_ ((_EDReceiptValidation_IORegistryEntryGetParentEntry_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 56, 5, 64, EDReceiptValidation_ObfuscationFunction2, 45, 76, 32))
    // Function wrapper for 'IOServiceGetMatchingServices'
#define EDReceiptValidation_IOServiceGetMatchingServices_ ((_EDReceiptValidation_IOServiceGetMatchingServices_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 56, 5, 64, EDReceiptValidation_ObfuscationFunction1, 84, 72, 32))
    // Function wrapper for 'NSApplicationMain'
#define EDReceiptValidation_NSApplicationMain_ ((_EDReceiptValidation_NSApplicationMain_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 51, -85, 64, EDReceiptValidation_ObfuscationFunction3, 77, -126, 32))
    // Function wrapper for 'SecAsn1CoderCreate'
#define EDReceiptValidation_SecAsn1CoderCreate_ ((_EDReceiptValidation_SecAsn1CoderCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 90, -85, 64, EDReceiptValidation_ObfuscationFunction3, 74, 5, 32))
    // Function wrapper for 'SecAsn1CoderRelease'
#define EDReceiptValidation_SecAsn1CoderRelease_ ((_EDReceiptValidation_SecAsn1CoderRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 64, 201, 64, EDReceiptValidation_ObfuscationFunction4, 68, 145, 32))
    // Function wrapper for 'SecAsn1Decode'
#define EDReceiptValidation_SecAsn1Decode_ ((_EDReceiptValidation_SecAsn1Decode_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 52, 45, 64, EDReceiptValidation_ObfuscationFunction4, 85, 86, 16))
    // Function wrapper for 'SecPolicyCreateBasicX509'
#define EDReceiptValidation_SecPolicyCreateBasicX509_ ((_EDReceiptValidation_SecPolicyCreateBasicX509_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 90, -85, 64, EDReceiptValidation_ObfuscationFunction1, 1, 78, 32))
    // Function wrapper for 'SecRequirementCreateWithString'
#define EDReceiptValidation_SecRequirementCreateWithString_ ((_EDReceiptValidation_SecRequirementCreateWithString_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 90, -85, 64, EDReceiptValidation_ObfuscationFunction3, 6, -79, 32))
    // Function wrapper for 'SecRequirementCreateWithStringAndErrors'
#define EDReceiptValidation_SecRequirementCreateWithStringAndErrors_ ((_EDReceiptValidation_SecRequirementCreateWithStringAndErrors_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 49, 157, 64, EDReceiptValidation_ObfuscationFunction3, 5, -42, 48))
    // Function wrapper for 'SecStaticCodeCheckValidity'
#define EDReceiptValidation_SecStaticCodeCheckValidity_ ((_EDReceiptValidation_SecStaticCodeCheckValidity_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 64, 201, 64, EDReceiptValidation_ObfuscationFunction3, 67, 54, 32))
    // Function wrapper for 'SecStaticCodeCheckValidityWithErrors'
#define EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_ ((_EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 52, 45, 64, EDReceiptValidation_ObfuscationFunction4, 60, 137, 48))
    // Function wrapper for 'SecStaticCodeCreateWithPath'
#define EDReceiptValidation_SecStaticCodeCreateWithPath_ ((_EDReceiptValidation_SecStaticCodeCreateWithPath_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 52, 45, 64, EDReceiptValidation_ObfuscationFunction1, 69, 34, 32))
    
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction3(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] + _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction3CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        char *_tmp2 = _tmp1;
        EDReceiptValidation_ObfuscationFunction3(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction2(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] + _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction2CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        EDReceiptValidation_ObfuscationFunction2(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_CFStringCreateWithCString_)(kCFAllocatorDefault, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction1(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction1CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        char *_tmp2 = _tmp1;
        EDReceiptValidation_ObfuscationFunction1(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction4(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction4CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        EDReceiptValidation_ObfuscationFunction4(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_CFStringCreateWithCString_)(kCFAllocatorDefault, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    //
    // CodeBlock LookupFunction
    //
    inline static void *EDReceiptValidation_LookupFunction1(EDReceiptValidation_decrypt _func1, int _index1, char _seed1, int _len1, EDReceiptValidation_decrypt _func2, int _index2, char _seed2, int _len2) {
        char tmp[0x50];
        // Load the library if needed
        if (EDReceiptValidation_pointers[_index1] == NULL) {
            _func1(EDReceiptValidation_strings[_index1], tmp, _seed1, _len1);
            EDReceiptValidation_pointers[_index1] = ((_EDReceiptValidation_dlopen_) EDReceiptValidation_dlopen_)(tmp, RTLD_LAZY);
        }
        // Locate the function if needed
        if (EDReceiptValidation_pointers[_index2] == NULL) {
            _func2(EDReceiptValidation_strings[_index2], tmp, _seed2, _len2);
            EDReceiptValidation_pointers[_index2] = ((_EDReceiptValidation_dlsym_) EDReceiptValidation_dlsym_)(EDReceiptValidation_pointers[_index1], tmp);
        }
        return EDReceiptValidation_pointers[_index2];
    }
    
    //
    // CodeBlock GetMainBundle
    //
#if DEBUG
    inline static void EDReceiptValidation_GetMainBundle1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        // Retrieve the main bundle
        CFTypeRef _bundle = EDReceiptValidation_CFBundleGetMainBundle_();
        if (!_bundle) {
            EDReceiptValidation_CFRelease_(_bundle);
        }
        EDReceiptValidation_ctx->EDReceiptValidation_mainBundle = (CFBundleRef) _bundle;
    }
#else
#define EDReceiptValidation_GetMainBundle1(EDReceiptValidation_ctx) { \
CFTypeRef _bundle = EDReceiptValidation_CFBundleGetMainBundle_(); \
if (!_bundle) { \
EDReceiptValidation_CFRelease_(_bundle); \
} \
EDReceiptValidation_ctx->EDReceiptValidation_mainBundle = (CFBundleRef) _bundle; \
}
#endif
    
    //
    // CodeBlock LoadReceipt
    //
#if DEBUG
    inline static void EDReceiptValidation_LoadReceipt1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1;
        CFURLRef _url1, _url2;
        SInt32 _errorCode;
        volatile int _code = 155; _code -= 98; _code *= 3; _code += 2;
        // Compute the path to the receipt
        _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
        _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[24]), -24, 32);
        _url2 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url1, _str1, false);
        EDReceiptValidation_CFRelease_(_str1);
        EDReceiptValidation_CFRelease_(_url1);
        // Load the receipt data
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptData);
        EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_(kCFAllocatorDefault, _url2, (CFDataRef *) &(EDReceiptValidation_ctx->EDReceiptValidation_receiptData), NULL, NULL, &_errorCode);
        if (_errorCode) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_url1);
        }
        EDReceiptValidation_CFRelease_(_url2);
    }
#else
#define EDReceiptValidation_LoadReceipt1(EDReceiptValidation_ctx) { \
CFStringRef _str1; \
CFURLRef _url1, _url2; \
SInt32 _errorCode; \
volatile int _code = 169; _code -= 112; _code *= 3; _code += 2; \
_url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
_str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[24]), -24, 32); \
_url2 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url1, _str1, false); \
EDReceiptValidation_CFRelease_(_str1); \
EDReceiptValidation_CFRelease_(_url1); \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptData); \
EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_(kCFAllocatorDefault, _url2, (CFDataRef *) &(EDReceiptValidation_ctx->EDReceiptValidation_receiptData), NULL, NULL, &_errorCode); \
if (_errorCode) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_url1); \
} \
EDReceiptValidation_CFRelease_(_url2); \
}
#endif
    
    //
    // CodeBlock GetMacAddress
    //
#if DEBUG
    inline static void EDReceiptValidation_GetMacAddress1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        kern_return_t _kernResult;
        mach_port_t _master_port;
        CFMutableDictionaryRef _matchingDict;
        io_iterator_t _iterator;
        io_object_t _service, _parentService;
        volatile int _code = 121; _code -= 64; _code *= 3; _code += 2;
        char *_str1;
        CFStringRef _str2;
        _str2 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[33]), -66, 16);
        // Open a MACH port
        _kernResult = EDReceiptValidation_IOMasterPort_(MACH_PORT_NULL, &_master_port);
        if (_kernResult != KERN_SUCCESS) {
            goto EDReceiptValidation_GetMacAddress1__bail;
            EDReceiptValidation_CFRelease_(_str2);
        }
        // Create a search for primary interface
        char _str1_[0x50];
        EDReceiptValidation_ObfuscationFunction4((EDReceiptValidation_strings[73]), _str1_, 93, 16);
        _str1 = _str1_;
        _matchingDict = EDReceiptValidation_IOBSDNameMatching_(_master_port, 0, _str1);
        if (!_matchingDict) {
            goto EDReceiptValidation_GetMacAddress1__bail;
            EDReceiptValidation_CFRelease_(_str1);
        }
        // Perform the search
        _kernResult = EDReceiptValidation_IOServiceGetMatchingServices_(_master_port, _matchingDict, &_iterator);
        if (_kernResult != KERN_SUCCESS) {
            goto EDReceiptValidation_GetMacAddress1__bail;
            EDReceiptValidation_CFRelease_(_str1);
        }
        // Iterate over the result
        while((_service = EDReceiptValidation_IOIteratorNext_(_iterator)) != 0) {
            _kernResult = EDReceiptValidation_IORegistryEntryGetParentEntry_(_service, kIOServicePlane, &_parentService);
            if (_kernResult == KERN_SUCCESS) {
                if (EDReceiptValidation_ctx->EDReceiptValidation_macData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_macData);
                EDReceiptValidation_ctx->EDReceiptValidation_macData = (CFDataRef) EDReceiptValidation_IORegistryEntryCreateCFProperty_(_parentService, _str2, kCFAllocatorDefault, 0);
                EDReceiptValidation_IOObjectRelease_(_parentService);
            }
            EDReceiptValidation_IOObjectRelease_(_iterator);
            EDReceiptValidation_IOObjectRelease_(_service);
        }
    EDReceiptValidation_GetMacAddress1__bail:
        EDReceiptValidation_CFRelease_(_str2);
    }
#else
#define EDReceiptValidation_GetMacAddress1(EDReceiptValidation_ctx) { \
kern_return_t _kernResult; \
mach_port_t _master_port; \
CFMutableDictionaryRef _matchingDict; \
io_iterator_t _iterator; \
io_object_t _service, _parentService; \
volatile int _code = 46; _code -= 12; _code *= 5; _code += 3; \
char *_str1; \
CFStringRef _str2; \
_str2 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[33]), -66, 16);  \
_kernResult = EDReceiptValidation_IOMasterPort_(MACH_PORT_NULL, &_master_port); \
if (_kernResult != KERN_SUCCESS) { \
goto EDReceiptValidation_GetMacAddress1__bail; \
EDReceiptValidation_CFRelease_(_str2); \
} \
char _str1_[0x50]; \
EDReceiptValidation_ObfuscationFunction4((EDReceiptValidation_strings[73]), _str1_, 93, 16); \
_str1 = _str1_; \
_matchingDict = EDReceiptValidation_IOBSDNameMatching_(_master_port, 0, _str1); \
if (!_matchingDict) { \
goto EDReceiptValidation_GetMacAddress1__bail; \
EDReceiptValidation_CFRelease_(_str1); \
} \
_kernResult = EDReceiptValidation_IOServiceGetMatchingServices_(_master_port, _matchingDict, &_iterator); \
if (_kernResult != KERN_SUCCESS) { \
goto EDReceiptValidation_GetMacAddress1__bail; \
EDReceiptValidation_CFRelease_(_str1); \
} \
while((_service = EDReceiptValidation_IOIteratorNext_(_iterator)) != 0) { \
_kernResult = EDReceiptValidation_IORegistryEntryGetParentEntry_(_service, kIOServicePlane, &_parentService); \
if (_kernResult == KERN_SUCCESS) { \
if (EDReceiptValidation_ctx->EDReceiptValidation_macData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_macData); \
EDReceiptValidation_ctx->EDReceiptValidation_macData = (CFDataRef) EDReceiptValidation_IORegistryEntryCreateCFProperty_(_parentService, _str2, kCFAllocatorDefault, 0); \
EDReceiptValidation_IOObjectRelease_(_parentService); \
} \
EDReceiptValidation_IOObjectRelease_(_iterator); \
EDReceiptValidation_IOObjectRelease_(_service); \
} \
EDReceiptValidation_GetMacAddress1__bail: \
EDReceiptValidation_CFRelease_(_str2); \
}
#endif
    
    //
    // CodeBlock GetReceiptInformation
    //
#if DEBUG
    //
    // Extract an ASN.1 INTEGER value
    //
    inline static void EDReceiptValidation_GetReceiptInformation1X(const EDReceiptValidation_ASN1_DATA *_asn1data, int *_payload) {
        uint8 *_ptr = _asn1data->data;
        size_t _size = _asn1data->length;
        *_payload = 0;
        do {
            *_payload <<= 8;
            *_payload += (uint8) *_ptr++;
        } while(--_size > 0);
    }
#else
    inline static void EDReceiptValidation_GetReceiptInformation1X(const EDReceiptValidation_ASN1_DATA *_asn1data, int *_payload) { \
        uint8 *_ptr = _asn1data->data; \
        size_t _size = _asn1data->length; \
        *_payload = 0; \
        do { \
            *_payload <<= 8; \
            *_payload += (uint8) *_ptr++; \
        } while(--_size > 0); \
    }
#endif
    
#if DEBUG
    inline static void EDReceiptValidation_GetReceiptInformation1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        EDReceiptValidation_Parsing _receiptContext, _inappContext, *_currentContext;
        CMSDecoderRef _decoder = NULL;
        CFDataRef _content = NULL;
        CFNumberRef _key = NULL;
        SecAsn1CoderRef _asn1decoder = NULL;
        OSStatus _status;
        EDReceiptValidation_Payload _payload = { NULL };
        EDReceiptValidation_ReceiptAttribute *_current;
        CFDateFormatterRef _formatter;
        EDReceiptValidation_ReceiptAttributeType _key1, _key2;
        CFTypeRef _value1, _value2;
        EDReceiptValidation_ASN1_DATA _asn1data;
        int _type, _integer;
        // Create a decoder for the encrypted message
        _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Decrypt the message (update pass)
        _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData));
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Decrypt the message (final pass)
        _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Get the message content
        _status = EDReceiptValidation_CMSDecoderCopyContent_(_decoder, &_content);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Create the ASN.1 parser
        _status = EDReceiptValidation_SecAsn1CoderCreate_(&_asn1decoder);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Create a formatter to parse ISO-3339 dates
        _formatter = EDReceiptValidation_CFDateFormatterCreate_(kCFAllocatorDefault, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
        _value1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[65]), 69, 48);
        EDReceiptValidation_CFDateFormatterSetFormat_(_formatter, (CFStringRef) _value1);
        EDReceiptValidation_CFRelease_(_value1);
        // Create the receipt parsing context
        _receiptContext.EDReceiptValidation_source = EDReceiptValidation_CFDataGetBytePtr_(_content);
        _receiptContext.EDReceiptValidation_length = EDReceiptValidation_CFDataGetLength_(_content);
        _receiptContext.EDReceiptValidation_dictionary = NULL;
        _receiptContext.EDReceiptValidation_parent = NULL;
        _currentContext = &_receiptContext;
        while(true) {
            if (!_currentContext->EDReceiptValidation_dictionary) {
                // Create the target dictionary
                _currentContext->EDReceiptValidation_dictionary = EDReceiptValidation_CFDictionaryCreateMutable_(kCFAllocatorDefault, (CFIndex) 0x50, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                // Decode the receipt payload from ASN.1
                _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _currentContext->EDReceiptValidation_source, _currentContext->EDReceiptValidation_length, EDReceiptValidation_kSetOfReceiptAttributeTemplate, &_payload);
                if (_status) {
                    goto EDReceiptValidation_GetReceiptInformation1__bail;
                }
                _currentContext->EDReceiptValidation_pointer = _payload.attributes;
            }
            // Iterate over attributes
            while(*_currentContext->EDReceiptValidation_pointer) {
                _current = *_currentContext->EDReceiptValidation_pointer++;
                EDReceiptValidation_GetReceiptInformation1X((&_current->type), (&_type));
                _key1 = _key2 = EDReceiptValidation_DataStoreNone;
                _value1 = _value2 = NULL;
                // Extract the value
                switch(_type) {
                        // Attributes encoded as ASN.1 UTF8STRING
                    case EDReceiptValidation_ReceiptAttributeTypeBundleId:
                    case EDReceiptValidation_ReceiptAttributeTypeBundleVersion:
                    case EDReceiptValidation_InAppAttributeTypeProductIdentifer:
                    case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer:
                    case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer:
                        _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1UTF8StringTemplate, &_asn1data);
                        if (_status) {
                            goto EDReceiptValidation_GetReceiptInformation1__bail;
                        }
                        _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingUTF8, false);
                        _value2 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length);
                        break;
                        // Attributes encoded as ASN.1 IA5STRING
                    case EDReceiptValidation_InAppAttributeTypePurchaseDate:
                    case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate:
                        _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IA5StringTemplate, &_asn1data);
                        if (_status) {
                            goto EDReceiptValidation_GetReceiptInformation1__bail;
                        }
                        _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingASCII, false);
                        _value2 = EDReceiptValidation_CFDateFormatterCreateDateFromString_(kCFAllocatorDefault, _formatter, (CFStringRef) _value1, NULL);
                        break;
                        // Attributes encoded as ASN.1 INTEGER
                    case EDReceiptValidation_InAppAttributeTypeQuantity:
                        _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IntegerTemplate, &_asn1data);
                        if (_status) {
                            goto EDReceiptValidation_GetReceiptInformation1__bail;
                        }
                        EDReceiptValidation_GetReceiptInformation1X((&_asn1data), (&_integer));
                        _value1 = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_integer);
                        break;
                        // Attributes encoded as ASN.1 OCTETSTRING
                    case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue:
                    case EDReceiptValidation_ReceiptAttributeTypeHash:
                        _value1 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length);
                        break;
                    default:
                        break;
                }
                // Assign the key for storage
                switch(_type) {
                    case EDReceiptValidation_ReceiptAttributeTypeBundleId:
                        _key1 = EDReceiptValidation_DataStoreBundleId;
                        _key2 = EDReceiptValidation_DataStoreBundleIdData;
                        break;
                    case EDReceiptValidation_ReceiptAttributeTypeBundleVersion:
                        _key1 = EDReceiptValidation_DataStoreBundleVersion;
                        _key2 = EDReceiptValidation_DataStoreBundleVersionData;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeProductIdentifer:
                        _key1 = EDReceiptValidation_InAppAttributeTypeProductIdentifer;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer:
                        _key1 = EDReceiptValidation_InAppAttributeTypeTransactionIdentifer;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer:
                        _key1 = EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer;
                        break;
                    case EDReceiptValidation_InAppAttributeTypePurchaseDate:
                        _key2 = EDReceiptValidation_InAppAttributeTypePurchaseDate;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate:
                        _key2 = EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeQuantity:
                        _key1 = EDReceiptValidation_InAppAttributeTypeQuantity;
                        break;
                    case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue:
                        _key1 = EDReceiptValidation_DataStoreOpaqueValue;
                        break;
                    case EDReceiptValidation_ReceiptAttributeTypeHash:
                        _key1 = EDReceiptValidation_DataStoreHash;
                        break;
                    default:
                        break;
                }
                // Store data if any
                if (_key1 != EDReceiptValidation_DataStoreNone) {
                    _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1);
                    EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value1);
                    EDReceiptValidation_CFRelease_(_key);
                }
                // Store data if any
                if (_key2 != EDReceiptValidation_DataStoreNone) {
                    _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key2);
                    EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value2);
                    EDReceiptValidation_CFRelease_(_key);
                }
                if (_value1) EDReceiptValidation_CFRelease_(_value1);
                if (_value2) EDReceiptValidation_CFRelease_(_value2);
                // Step into for InApp purchases
                if (_type == EDReceiptValidation_ReceiptAttributeTypeInAppPurchase) {
                    _inappContext.EDReceiptValidation_source = _current->value.data;
                    _inappContext.EDReceiptValidation_length = _current->value.length;
                    _inappContext.EDReceiptValidation_dictionary = NULL;
                    _inappContext.EDReceiptValidation_parent = _currentContext;
                    _currentContext = &_inappContext;
                    break;
                }
            }
            if (!_currentContext->EDReceiptValidation_dictionary) {
                continue;
            }
            // Step out for InApp purchases
            if (_currentContext->EDReceiptValidation_parent) {
                _key1 = EDReceiptValidation_DataStoreInAppPurchase;
                _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1);
                _value1 = EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key);
                if (!_value1) {
                    _value1 = EDReceiptValidation_CFArrayCreateMutable_(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                    EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key, _value1);
                    EDReceiptValidation_CFRelease_(_value1);
                }
                EDReceiptValidation_CFArrayAppendValue_((CFMutableArrayRef) _value1, _currentContext->EDReceiptValidation_dictionary);
                EDReceiptValidation_CFRelease_(_currentContext->EDReceiptValidation_dictionary);
                EDReceiptValidation_CFRelease_(_key);
                _currentContext = _currentContext->EDReceiptValidation_parent;
            }
            if (*_currentContext->EDReceiptValidation_pointer) {
                continue;
            }
            break;
        }
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict);
        EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = _receiptContext.EDReceiptValidation_dictionary;
    EDReceiptValidation_GetReceiptInformation1__bail:
        if (_formatter) EDReceiptValidation_CFRelease_(_formatter);
        if (_asn1decoder) EDReceiptValidation_SecAsn1CoderRelease_(_asn1decoder);
        if (_content) EDReceiptValidation_CFRelease_(_content);
        if (_decoder) EDReceiptValidation_CFRelease_(_decoder);
    }
#else
#define EDReceiptValidation_GetReceiptInformation1(EDReceiptValidation_ctx) { \
EDReceiptValidation_Parsing _receiptContext, _inappContext, *_currentContext; \
CMSDecoderRef _decoder = NULL; \
CFDataRef _content = NULL; \
CFNumberRef _key = NULL; \
SecAsn1CoderRef _asn1decoder = NULL; \
OSStatus _status; \
EDReceiptValidation_Payload _payload = { NULL }; \
EDReceiptValidation_ReceiptAttribute *_current; \
CFDateFormatterRef _formatter; \
EDReceiptValidation_ReceiptAttributeType _key1, _key2; \
CFTypeRef _value1, _value2; \
EDReceiptValidation_ASN1_DATA _asn1data; \
int _type, _integer; \
_status = EDReceiptValidation_CMSDecoderCreate_(&_decoder); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData)); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderCopyContent_(_decoder, &_content); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_SecAsn1CoderCreate_(&_asn1decoder); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_formatter = EDReceiptValidation_CFDateFormatterCreate_(kCFAllocatorDefault, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
_value1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[65]), 69, 48);  \
EDReceiptValidation_CFDateFormatterSetFormat_(_formatter, (CFStringRef) _value1); \
EDReceiptValidation_CFRelease_(_value1); \
_receiptContext.EDReceiptValidation_source = EDReceiptValidation_CFDataGetBytePtr_(_content); \
_receiptContext.EDReceiptValidation_length = EDReceiptValidation_CFDataGetLength_(_content); \
_receiptContext.EDReceiptValidation_dictionary = NULL; \
_receiptContext.EDReceiptValidation_parent = NULL; \
_currentContext = &_receiptContext; \
while(true) { \
if (!_currentContext->EDReceiptValidation_dictionary) { \
_currentContext->EDReceiptValidation_dictionary = EDReceiptValidation_CFDictionaryCreateMutable_(kCFAllocatorDefault, (CFIndex) 0x50, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks); \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _currentContext->EDReceiptValidation_source, _currentContext->EDReceiptValidation_length, EDReceiptValidation_kSetOfReceiptAttributeTemplate, &_payload); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_currentContext->EDReceiptValidation_pointer = _payload.attributes; \
} \
while(*_currentContext->EDReceiptValidation_pointer) { \
_current = *_currentContext->EDReceiptValidation_pointer++; \
EDReceiptValidation_GetReceiptInformation1X((&_current->type), (&_type)); \
_key1 = _key2 = EDReceiptValidation_DataStoreNone; \
_value1 = _value2 = NULL; \
switch(_type) { \
case EDReceiptValidation_ReceiptAttributeTypeBundleId: \
case EDReceiptValidation_ReceiptAttributeTypeBundleVersion: \
case EDReceiptValidation_InAppAttributeTypeProductIdentifer: \
case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer: \
case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer: \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1UTF8StringTemplate, &_asn1data); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingUTF8, false); \
_value2 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length); \
break; \
case EDReceiptValidation_InAppAttributeTypePurchaseDate: \
case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate: \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IA5StringTemplate, &_asn1data); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingASCII, false); \
_value2 = EDReceiptValidation_CFDateFormatterCreateDateFromString_(kCFAllocatorDefault, _formatter, (CFStringRef) _value1, NULL); \
break; \
case EDReceiptValidation_InAppAttributeTypeQuantity: \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IntegerTemplate, &_asn1data); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
EDReceiptValidation_GetReceiptInformation1X((&_asn1data), (&_integer)); \
_value1 = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_integer); \
break; \
case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue: \
case EDReceiptValidation_ReceiptAttributeTypeHash: \
_value1 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length); \
break; \
default: \
break; \
} \
switch(_type) { \
case EDReceiptValidation_ReceiptAttributeTypeBundleId: \
_key1 = EDReceiptValidation_DataStoreBundleId; \
_key2 = EDReceiptValidation_DataStoreBundleIdData; \
break; \
case EDReceiptValidation_ReceiptAttributeTypeBundleVersion: \
_key1 = EDReceiptValidation_DataStoreBundleVersion; \
_key2 = EDReceiptValidation_DataStoreBundleVersionData; \
break; \
case EDReceiptValidation_InAppAttributeTypeProductIdentifer: \
_key1 = EDReceiptValidation_InAppAttributeTypeProductIdentifer; \
break; \
case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer: \
_key1 = EDReceiptValidation_InAppAttributeTypeTransactionIdentifer; \
break; \
case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer: \
_key1 = EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer; \
break; \
case EDReceiptValidation_InAppAttributeTypePurchaseDate: \
_key2 = EDReceiptValidation_InAppAttributeTypePurchaseDate; \
break; \
case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate: \
_key2 = EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate; \
break; \
case EDReceiptValidation_InAppAttributeTypeQuantity: \
_key1 = EDReceiptValidation_InAppAttributeTypeQuantity; \
break; \
case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue: \
_key1 = EDReceiptValidation_DataStoreOpaqueValue; \
break; \
case EDReceiptValidation_ReceiptAttributeTypeHash: \
_key1 = EDReceiptValidation_DataStoreHash; \
break; \
default: \
break; \
} \
if (_key1 != EDReceiptValidation_DataStoreNone) { \
_key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1); \
EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value1); \
EDReceiptValidation_CFRelease_(_key); \
} \
if (_key2 != EDReceiptValidation_DataStoreNone) { \
_key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key2); \
EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value2); \
EDReceiptValidation_CFRelease_(_key); \
} \
if (_value1) EDReceiptValidation_CFRelease_(_value1); \
if (_value2) EDReceiptValidation_CFRelease_(_value2); \
if (_type == EDReceiptValidation_ReceiptAttributeTypeInAppPurchase) { \
_inappContext.EDReceiptValidation_source = _current->value.data; \
_inappContext.EDReceiptValidation_length = _current->value.length; \
_inappContext.EDReceiptValidation_dictionary = NULL; \
_inappContext.EDReceiptValidation_parent = _currentContext; \
_currentContext = &_inappContext; \
break; \
} \
} \
if (!_currentContext->EDReceiptValidation_dictionary) { \
continue; \
} \
if (_currentContext->EDReceiptValidation_parent) { \
_key1 = EDReceiptValidation_DataStoreInAppPurchase; \
_key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1); \
_value1 = EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key); \
if (!_value1) { \
_value1 = EDReceiptValidation_CFArrayCreateMutable_(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks); \
EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key, _value1); \
EDReceiptValidation_CFRelease_(_value1); \
} \
EDReceiptValidation_CFArrayAppendValue_((CFMutableArrayRef) _value1, _currentContext->EDReceiptValidation_dictionary); \
EDReceiptValidation_CFRelease_(_currentContext->EDReceiptValidation_dictionary); \
EDReceiptValidation_CFRelease_(_key); \
_currentContext = _currentContext->EDReceiptValidation_parent; \
} \
if (*_currentContext->EDReceiptValidation_pointer) { \
continue; \
} \
break; \
} \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict); \
EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = _receiptContext.EDReceiptValidation_dictionary; \
EDReceiptValidation_GetReceiptInformation1__bail: \
if (_formatter) EDReceiptValidation_CFRelease_(_formatter); \
if (_asn1decoder) EDReceiptValidation_SecAsn1CoderRelease_(_asn1decoder); \
if (_content) EDReceiptValidation_CFRelease_(_content); \
if (_decoder) EDReceiptValidation_CFRelease_(_decoder); \
}
#endif
    
    //
    // CodeBlock CheckBundleIdentifier
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckBundleIdentifier1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[59]), -54, 32);
        volatile int _code = 172; _code -= 115; _code *= 3; _code += 2;
        CFStringRef _str2 = EDReceiptValidation_CFBundleGetIdentifier_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_str2);
        }
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckBundleIdentifier1(EDReceiptValidation_ctx) { \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[59]), -54, 32); \
volatile int _code = 147; _code -= 90; _code *= 3; _code += 2; \
CFStringRef _str2 = EDReceiptValidation_CFBundleGetIdentifier_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_str2); \
} \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckBundleVersion
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckBundleVersion1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        volatile int _code = 140; _code -= 83; _code *= 3; _code += 2;
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[8]), 90, 16);
        CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[70]), 11, 32);
        CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_str1);
            EDReceiptValidation_CFRelease_(_str2);
        }
        EDReceiptValidation_CFRelease_(_str2);
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckBundleVersion1(EDReceiptValidation_ctx) { \
volatile int _code = 10; _code -= 1; _code *= 19; _code += 2; \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[8]), 90, 16); \
CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[70]), 11, 32); \
CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_str1); \
EDReceiptValidation_CFRelease_(_str2); \
} \
EDReceiptValidation_CFRelease_(_str2); \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckBundleSignature
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckBundleSignature1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1 = NULL;
        CFURLRef _url1 = NULL;
        SecStaticCodeRef _staticCode = NULL;
        SecRequirementRef _requirement = NULL;
        OSStatus _status;
        CFErrorRef _error = NULL;
        _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
        _status = EDReceiptValidation_SecStaticCodeCreateWithPath_(_url1, kSecCSDefaultFlags, &_staticCode);
        if (_status != errSecSuccess) {
            goto EDReceiptValidation_CheckBundleSignature1__bail;
        }
        _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[91]), -104, 32);
        _status = EDReceiptValidation_SecRequirementCreateWithString_(_str1, kSecCSDefaultFlags, &_requirement);
        if (_status != errSecSuccess) {
            goto EDReceiptValidation_CheckBundleSignature1__bail;
        }
        _status = EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_(_staticCode, kSecCSDefaultFlags, _requirement, &_error);
        if (_status != errSecSuccess) {
            goto EDReceiptValidation_CheckBundleSignature1__bail;
        }
    EDReceiptValidation_CheckBundleSignature1__bail:
        if (_error) EDReceiptValidation_CFRelease_(_error);
        if (_staticCode) EDReceiptValidation_CFRelease_(_staticCode);
        if (_requirement) EDReceiptValidation_CFRelease_(_requirement);
        if (_str1) EDReceiptValidation_CFRelease_(_str1);
        if (_url1) EDReceiptValidation_CFRelease_(_url1);
    }
#else
#define EDReceiptValidation_CheckBundleSignature1(EDReceiptValidation_ctx) { \
CFStringRef _str1 = NULL; \
CFURLRef _url1 = NULL; \
SecStaticCodeRef _staticCode = NULL; \
SecRequirementRef _requirement = NULL; \
OSStatus _status; \
CFErrorRef _error = NULL; \
_url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
_status = EDReceiptValidation_SecStaticCodeCreateWithPath_(_url1, kSecCSDefaultFlags, &_staticCode); \
if (_status != errSecSuccess) { \
goto EDReceiptValidation_CheckBundleSignature1__bail; \
} \
_str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[91]), -104, 32); \
_status = EDReceiptValidation_SecRequirementCreateWithString_(_str1, kSecCSDefaultFlags, &_requirement); \
if (_status != errSecSuccess) { \
goto EDReceiptValidation_CheckBundleSignature1__bail; \
} \
_status = EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_(_staticCode, kSecCSDefaultFlags, _requirement, &_error); \
if (_status != errSecSuccess) { \
goto EDReceiptValidation_CheckBundleSignature1__bail; \
} \
EDReceiptValidation_CheckBundleSignature1__bail: \
if (_error) EDReceiptValidation_CFRelease_(_error); \
if (_staticCode) EDReceiptValidation_CFRelease_(_staticCode); \
if (_requirement) EDReceiptValidation_CFRelease_(_requirement); \
if (_str1) EDReceiptValidation_CFRelease_(_str1); \
if (_url1) EDReceiptValidation_CFRelease_(_url1); \
}
#endif
    
    //
    // CodeBlock CheckReceiptSignature
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptSignature1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CMSDecoderRef _decoder = NULL;
        SecTrustRef _trustRef = NULL;
        SecPolicyRef _policyRef = NULL;
        volatile int _code = 74; _code -= 31; _code *= 4; _code += 1;
        OSStatus _status;
        _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder);
        if (_status) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
        _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData));
        if (_status) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
        _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder);
        if (_status) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
        CMSSignerStatus _signerStatus;
        OSStatus _certVerifyresult;
        _policyRef = EDReceiptValidation_SecPolicyCreateBasicX509_();
        _status = EDReceiptValidation_CMSDecoderCopySignerStatus_(_decoder, 0, _policyRef, TRUE, &_signerStatus, &_trustRef, &_certVerifyresult);
        if (_status) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
    EDReceiptValidation_CheckReceiptSignature1__bail:
        if (_policyRef) EDReceiptValidation_CFRelease_(_policyRef);
        if (_trustRef) EDReceiptValidation_CFRelease_(_trustRef);
        if (_decoder) EDReceiptValidation_CFRelease_(_decoder);
    }
#else
#define EDReceiptValidation_CheckReceiptSignature1(EDReceiptValidation_ctx) { \
CMSDecoderRef _decoder = NULL; \
SecTrustRef _trustRef = NULL; \
SecPolicyRef _policyRef = NULL; \
volatile int _code = 64; _code -= 21; _code *= 4; _code += 1; \
OSStatus _status; \
_status = EDReceiptValidation_CMSDecoderCreate_(&_decoder); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData)); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
CMSSignerStatus _signerStatus; \
OSStatus _certVerifyresult; \
_policyRef = EDReceiptValidation_SecPolicyCreateBasicX509_(); \
_status = EDReceiptValidation_CMSDecoderCopySignerStatus_(_decoder, 0, _policyRef, TRUE, &_signerStatus, &_trustRef, &_certVerifyresult); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
EDReceiptValidation_CheckReceiptSignature1__bail: \
if (_policyRef) EDReceiptValidation_CFRelease_(_policyRef); \
if (_trustRef) EDReceiptValidation_CFRelease_(_trustRef); \
if (_decoder) EDReceiptValidation_CFRelease_(_decoder); \
}
#endif
    
    //
    // CodeBlock CheckReceiptIdentifier
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptIdentifier1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleId;
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[88]), 121, 32);
        volatile int _code = 126; _code -= 69; _code *= 3; _code += 2;
        CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
        }
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckReceiptIdentifier1(EDReceiptValidation_ctx) { \
EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleId; \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[88]), 121, 32); \
volatile int _code = 149; _code -= 92; _code *= 3; _code += 2; \
CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
} \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckReceiptVersion
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptVersion1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleVersion;
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[62]), -87, 16);
        volatile int _code = 61; _code -= 18; _code *= 4; _code += 1;
        CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
        }
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckReceiptVersion1(EDReceiptValidation_ctx) { \
EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleVersion; \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[62]), -87, 16); \
volatile int _code = 61; _code -= 18; _code *= 4; _code += 1; \
CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
} \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckReceiptHash
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptHash1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFDataRef _data1, _data2, _data3;
        CFMutableDataRef _data4;
        unsigned char _digest[0x50];
        volatile int _counter = 11; _counter -= 5; _counter *= 3; _counter += 2;
        EDReceiptValidation_ReceiptAttributeType _value;
        CFNumberRef _key;
        _value = EDReceiptValidation_DataStoreOpaqueValue;
        _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        _data1 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        _value = EDReceiptValidation_DataStoreBundleIdData;
        _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        _data2 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        _value = EDReceiptValidation_DataStoreHash;
        _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        _data3 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        _data4 = EDReceiptValidation_CFDataCreateMutable_(kCFAllocatorDefault, 0);
        EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData));
        EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data1), EDReceiptValidation_CFDataGetLength_(_data1));
        EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data2), EDReceiptValidation_CFDataGetLength_(_data2));
        EDReceiptValidation_CC_SHA1_(EDReceiptValidation_CFDataGetBytePtr_(_data4), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data4), _digest);
        volatile int _code = 169; _code -= 112; _code *= 3; _code += 2;
        CFDataRef _data5 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _digest, _counter);
        if (!EDReceiptValidation_CFEqual_(_data3, _data5)) {
            EDReceiptValidation_CFRelease_(_data5);
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_data5);
            goto EDReceiptValidation_CheckReceiptHash1__bail;
        }
        EDReceiptValidation_CFRelease_(_data5);
    EDReceiptValidation_CheckReceiptHash1__bail:
        EDReceiptValidation_CFRelease_(_data4);
    }
#else
#define EDReceiptValidation_CheckReceiptHash1(EDReceiptValidation_ctx) { \
CFDataRef _data1, _data2, _data3; \
CFMutableDataRef _data4; \
unsigned char _digest[0x50]; \
volatile int _counter = 18; _counter -= 12; _counter *= 3; _counter += 2; \
EDReceiptValidation_ReceiptAttributeType _value; \
CFNumberRef _key; \
_value = EDReceiptValidation_DataStoreOpaqueValue; \
_key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
_data1 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
_value = EDReceiptValidation_DataStoreBundleIdData; \
_key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
_data2 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
_value = EDReceiptValidation_DataStoreHash; \
_key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
_data3 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
_data4 = EDReceiptValidation_CFDataCreateMutable_(kCFAllocatorDefault, 0); \
EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData)); \
EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data1), EDReceiptValidation_CFDataGetLength_(_data1)); \
EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data2), EDReceiptValidation_CFDataGetLength_(_data2)); \
EDReceiptValidation_CC_SHA1_(EDReceiptValidation_CFDataGetBytePtr_(_data4), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data4), _digest); \
volatile int _code = 120; _code -= 63; _code *= 3; _code += 2; \
CFDataRef _data5 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _digest, _counter); \
if (!EDReceiptValidation_CFEqual_(_data3, _data5)) { \
EDReceiptValidation_CFRelease_(_data5); \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_data5); \
goto EDReceiptValidation_CheckReceiptHash1__bail; \
} \
EDReceiptValidation_CFRelease_(_data5); \
EDReceiptValidation_CheckReceiptHash1__bail: \
EDReceiptValidation_CFRelease_(_data4); \
}
#endif
    
    //
    // CodeBlock Runner
    //
#ifdef RUNNER
#define EDRUNNER_SIGNATURE int(*_EDRUNNER_)(int argc, const char *argv[])
    typedef EDRUNNER_SIGNATURE;
    static long *EDRUNNER_ = ((long *)EDRUNNER - 3212);
    
#endif
    
    inline static void EDReceiptValidation_Runner1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        
#ifdef EDRUNNER
        
        ((_EDRUNNER_)(EDRUNNER_ + 3212))(EDReceiptValidation_ctx->EDReceiptValidation_argc, EDReceiptValidation_ctx->EDReceiptValidation_argv);
        
#else
        
        EDReceiptValidation_NSApplicationMain_(EDReceiptValidation_ctx->EDReceiptValidation_argc, EDReceiptValidation_ctx->EDReceiptValidation_argv);
        
#endif
        
    }
    
    //
    // CodeBlock CleanUp
    //
#if DEBUG
    inline static void EDReceiptValidation_CleanUp1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) {
            CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_receiptData);
            EDReceiptValidation_ctx->EDReceiptValidation_receiptData = NULL;
        }
        if (EDReceiptValidation_ctx->EDReceiptValidation_macData) {
            CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_macData);
            EDReceiptValidation_ctx->EDReceiptValidation_macData = NULL;
        }
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) {
            CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict);
            EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = NULL;
        }
    }
#else
#define EDReceiptValidation_CleanUp1(EDReceiptValidation_ctx) { \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) { \
CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_receiptData); \
EDReceiptValidation_ctx->EDReceiptValidation_receiptData = NULL; \
} \
if (EDReceiptValidation_ctx->EDReceiptValidation_macData) { \
CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_macData); \
EDReceiptValidation_ctx->EDReceiptValidation_macData = NULL; \
} \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) { \
CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict); \
EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = NULL; \
} \
}
#endif
    
    
    
    //
    // Entry point for receipt/InApp validation
    //
#if DEBUG || RECEIGEN_PEDANTIC
    inline static int EDCheckReceiptAndRun(int argc, const char *argv[]) {
        EDReceiptValidation_Context EDReceiptValidation_ctx0 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL };
        EDReceiptValidation_ctx0.EDReceiptValidation_argc = argc;
        EDReceiptValidation_ctx0.EDReceiptValidation_argv = (const char **) argv;
        
        volatile int idx = 400;
        while(idx != 830) {
            switch(idx) {
                case 2004:
                {
                    EDReceiptValidation_GetReceiptInformation1((&EDReceiptValidation_ctx0));
                    idx -= 1262; idx *= 3; idx += 2;
                    break;
                }
                case 3074:
                {
                    EDReceiptValidation_GetMacAddress1((&EDReceiptValidation_ctx0));
                    idx += 2938; idx /= 3;
                    break;
                }
                case 2228:
                {
                    EDReceiptValidation_CheckBundleIdentifier1((&EDReceiptValidation_ctx0));
                    idx += 2146; idx /= 3;
                    break;
                }
                case 2950:
                {
                    EDReceiptValidation_CheckReceiptSignature1((&EDReceiptValidation_ctx0));
                    idx -= 1914; idx *= 3; idx += 1;
                    break;
                }
                case 502:
                {
                    EDReceiptValidation_LoadReceipt1((&EDReceiptValidation_ctx0));
                    idx -= 118; idx *= 8; idx += 2;
                    break;
                }
                case 2744:
                {
                    EDReceiptValidation_CheckBundleSignature1((&EDReceiptValidation_ctx0));
                    idx -= 1761; idx *= 3; idx += 1;
                    break;
                }
                case 400:
                {
                    EDReceiptValidation_GetMainBundle1((&EDReceiptValidation_ctx0));
                    idx -= 233; idx *= 3; idx += 1; 
                    break;
                }
                case 118:
                {
                    EDReceiptValidation_CleanUp1((&EDReceiptValidation_ctx0));
                    idx -= 26; idx *= 9; idx += 2; 
                    break;
                }
                case 1458:
                {
                    EDReceiptValidation_CheckBundleVersion1((&EDReceiptValidation_ctx0));
                    idx -= 544; idx *= 3; idx += 2; 
                    break;
                }
                case 3009:
                {
                    EDReceiptValidation_CheckReceiptVersion1((&EDReceiptValidation_ctx0));
                    idx += 1107; idx /= 2; 
                    break;
                }
                case 1154:
                {
                    EDReceiptValidation_Runner1((&EDReceiptValidation_ctx0));
                    idx += 144; idx /= 11; 
                    break;
                }
                case 2058:
                {
                    EDReceiptValidation_CheckReceiptHash1((&EDReceiptValidation_ctx0));
                    idx += 1404; idx /= 3; 
                    break;
                }
                case 3109:
                {
                    EDReceiptValidation_CheckReceiptIdentifier1((&EDReceiptValidation_ctx0));
                    idx += 2909; idx /= 2; 
                    break;
                }
            }
        }
        return 0;
    }
    
#else
#define EDCheckReceiptAndRun(argc, argv) ({ \
EDReceiptValidation_Context EDReceiptValidation_ctx0 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL }; \
EDReceiptValidation_ctx0.EDReceiptValidation_argc = argc; \
EDReceiptValidation_ctx0.EDReceiptValidation_argv = (const char **) argv; \
\
volatile int idx = 400; \
while(idx != 830) { \
switch(idx) { \
case 2004: \
{ \
EDReceiptValidation_GetReceiptInformation1((&EDReceiptValidation_ctx0)); \
idx -= 1262; idx *= 3; idx += 2;  \
break; \
} \
case 3074: \
{ \
EDReceiptValidation_GetMacAddress1((&EDReceiptValidation_ctx0)); \
idx += 2938; idx /= 3;  \
break; \
} \
case 2228: \
{ \
EDReceiptValidation_CheckBundleIdentifier1((&EDReceiptValidation_ctx0)); \
idx += 2146; idx /= 3;  \
break; \
} \
case 2950: \
{ \
EDReceiptValidation_CheckReceiptSignature1((&EDReceiptValidation_ctx0)); \
idx -= 1914; idx *= 3; idx += 1;  \
break; \
} \
case 502: \
{ \
EDReceiptValidation_LoadReceipt1((&EDReceiptValidation_ctx0)); \
idx -= 118; idx *= 8; idx += 2;  \
break; \
} \
case 2744: \
{ \
EDReceiptValidation_CheckBundleSignature1((&EDReceiptValidation_ctx0)); \
idx -= 1761; idx *= 3; idx += 1;  \
break; \
} \
case 400: \
{ \
EDReceiptValidation_GetMainBundle1((&EDReceiptValidation_ctx0)); \
idx -= 233; idx *= 3; idx += 1;  \
break; \
} \
case 118: \
{ \
EDReceiptValidation_CleanUp1((&EDReceiptValidation_ctx0)); \
idx -= 26; idx *= 9; idx += 2;  \
break; \
} \
case 1458: \
{ \
EDReceiptValidation_CheckBundleVersion1((&EDReceiptValidation_ctx0)); \
idx -= 544; idx *= 3; idx += 2;  \
break; \
} \
case 3009: \
{ \
EDReceiptValidation_CheckReceiptVersion1((&EDReceiptValidation_ctx0)); \
idx += 1107; idx /= 2;  \
break; \
} \
case 1154: \
{ \
EDReceiptValidation_Runner1((&EDReceiptValidation_ctx0)); \
idx += 144; idx /= 11;  \
break; \
} \
case 2058: \
{ \
EDReceiptValidation_CheckReceiptHash1((&EDReceiptValidation_ctx0)); \
idx += 1404; idx /= 3;  \
break; \
} \
case 3109: \
{ \
EDReceiptValidation_CheckReceiptIdentifier1((&EDReceiptValidation_ctx0)); \
idx += 2909; idx /= 2;  \
break; \
} \
} \
} \
0; \
}) \

#endif
    
    
    //
    // C++ epilogue
    //
#ifdef __cplusplus
}
#endif

