//  ____                _                  
// |  _ \ ___  ___  ___(_) __ _  ___ _ __  
// | |_) / _ \/ __|/ _ \ |/ _` |/ _ \ '_ \ 
// |  _ <  __/ (__|  __/ | (_| |  __/ | | |
// |_| \_\___|\___|\___|_|\__, |\___|_| |_|
//                        |___/            
//
// This code was generated by Receigen and will use:
//
// CFBundleIdentifier=com.edcodia.graphpouch
// CFBundleShortVersionString=1.0.0
// Prefix=ED
// NoMain=NO
//
// Don't forget to link with the IOKit and Security frameworks !
//

//
// The default pedantic mode (OFF)
// Define to 1 if you need pedantic mode.
//
#ifndef RECEIGEN_PEDANTIC
	#define RECEIGEN_PEDANTIC 0
#endif

//
// C++ prologue
//
#ifdef __cplusplus
extern "C" {
#endif

// Headers for general purpose functions
#import <CoreFoundation/CoreFoundation.h>

// Headers for library loading
#import <dlfcn.h>

// Headers for bundle security checks
#import <CommonCrypto/CommonDigest.h>
#import <Security/Security.h>
#import <Security/CMSDecoder.h>
#import <Security/CSCommon.h>
#import <Security/SecAsn1Coder.h>
#import <Security/SecAsn1Templates.h>
#import <Security/SecCode.h>
#import <Security/SecRequirement.h>
#import <Security/SecStaticCode.h>

// Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>

//
// Structure describing an ASN.1 data
//
typedef struct _EDReceiptValidation_ASN1_DATA {
    size_t length;
    uint8 *data;
} EDReceiptValidation_ASN1_DATA;

//
// Structure describing a receipt attribute
//
// ReceiptAttribute ::= SEQUENCE {
//    type INTEGER,
//    version INTEGER,
//    value OCTET STRING
// }
//
typedef struct _EDReceiptValidation_ReceiptAttribute {
    EDReceiptValidation_ASN1_DATA type;
    EDReceiptValidation_ASN1_DATA version;
    EDReceiptValidation_ASN1_DATA value;
} EDReceiptValidation_ReceiptAttribute;

//
// Structure describing a receipt
//
// Payload ::= SET OF ReceiptAttribute
//
typedef struct _EDReceiptValidation_Payload {
    EDReceiptValidation_ReceiptAttribute **attributes;
} EDReceiptValidation_Payload;

//
// ASN.1 template describing a receipt attribute or an InApp attribute
//
const SecAsn1Template EDReceiptValidation_kReceiptAttributeTemplate[] = {
	{ SEC_ASN1_SEQUENCE, 0, NULL, sizeof(EDReceiptValidation_ReceiptAttribute) },
    { SEC_ASN1_INTEGER, offsetof(EDReceiptValidation_ReceiptAttribute, type), NULL, 0 },
    { SEC_ASN1_INTEGER, offsetof(EDReceiptValidation_ReceiptAttribute, version), NULL, 0 },
    { SEC_ASN1_OCTET_STRING, offsetof(EDReceiptValidation_ReceiptAttribute, value), NULL, 0 },
    { 0, 0, NULL, 0 }
};

//
// ASN.1 template describing a receipt or an InApp receipt
//
const SecAsn1Template EDReceiptValidation_kSetOfReceiptAttributeTemplate[] = {
    { SEC_ASN1_SET_OF, offsetof(EDReceiptValidation_Payload, attributes), EDReceiptValidation_kReceiptAttributeTemplate, sizeof(EDReceiptValidation_Payload) },
    { 0, 0, NULL, 0 }
};

//
// Shared context for receipt/InApp validation and parsing
//
typedef struct _EDReceiptValidation_Context {
	CFTypeRef EDReceiptValidation_dummy5;
	CFTypeRef EDReceiptValidation_mainBundle;
	CFTypeRef EDReceiptValidation_inAppIdentifiers;
	CFTypeRef EDReceiptValidation_dummy0;
	CFTypeRef EDReceiptValidation_receiptDict;
	CFTypeRef EDReceiptValidation_receiptData;
	CFTypeRef EDReceiptValidation_dummy2;
	const char ** EDReceiptValidation_argv;
	CFTypeRef EDReceiptValidation_macData;
	CFTypeRef EDReceiptValidation_dummy1;
	int EDReceiptValidation_argc;
	CFTypeRef EDReceiptValidation_inAppBlock;
	CFTypeRef EDReceiptValidation_dummy4;
	CFTypeRef EDReceiptValidation_dummy3;
} EDReceiptValidation_Context;

typedef struct _EDReceiptValidation_Parsing {
	CFTypeRef EDReceiptValidation_dummy3;
	CFTypeRef EDReceiptValidation_dummy4;
	CFTypeRef EDReceiptValidation_dummy2;
	EDReceiptValidation_ReceiptAttribute ** EDReceiptValidation_pointer;
	CFTypeRef EDReceiptValidation_dictionary;
	CFTypeRef EDReceiptValidation_dummy0;
	CFTypeRef EDReceiptValidation_dummy6;
	CFTypeRef EDReceiptValidation_dummy1;
	struct _EDReceiptValidation_Parsing * EDReceiptValidation_parent;
	size_t EDReceiptValidation_length;
	const void * EDReceiptValidation_source;
	CFTypeRef EDReceiptValidation_dummy5;
} EDReceiptValidation_Parsing;


//
// Keys for each receipt attribute and InApp attribute
//
typedef enum _EDReceiptValidation_ReceiptAttributeType {
	// Bundle identifier
	EDReceiptValidation_ReceiptAttributeTypeBundleId = 2,
	// Application version
	EDReceiptValidation_ReceiptAttributeTypeBundleVersion = 3,
	// Opaque value
	EDReceiptValidation_ReceiptAttributeTypeOpaqueValue = 4,
	// Hash value
	EDReceiptValidation_ReceiptAttributeTypeHash = 5,
	// In-app purchase receipt
	EDReceiptValidation_ReceiptAttributeTypeInAppPurchase = 17,
	
	// Quantity
	EDReceiptValidation_InAppAttributeTypeQuantity = 1701,
	// Product identifier
	EDReceiptValidation_InAppAttributeTypeProductIdentifer = 1702,
	// Transaction identifier
	EDReceiptValidation_InAppAttributeTypeTransactionIdentifer = 1703,
	// Purchase date
	EDReceiptValidation_InAppAttributeTypePurchaseDate = 1704,
	// Original transaction identifier
	EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer = 1705,
	// Original purchase date
	EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate = 1706,

	// Storage key base value
	EDReceiptValidation_DataStoreNone = 3780,
	// Storage key for Bundle identifier
	EDReceiptValidation_DataStoreBundleId = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeBundleId << 2),
	// Storage key for Bundle identifier as raw data
	EDReceiptValidation_DataStoreBundleIdData = EDReceiptValidation_DataStoreBundleId + 1,
	// Storage key for Application version
	EDReceiptValidation_DataStoreBundleVersion = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeBundleVersion << 2),
	// Storage key for Application version as raw data
	EDReceiptValidation_DataStoreBundleVersionData = EDReceiptValidation_DataStoreBundleVersion + 1,
	// Storage key for Opaque value
	EDReceiptValidation_DataStoreOpaqueValue = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeOpaqueValue << 2),
	// Storage key for Hash value
	EDReceiptValidation_DataStoreHash = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeHash << 2),
	// Storage key for In-app purchase receipts
	EDReceiptValidation_DataStoreInAppPurchase = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeInAppPurchase << 2),
} EDReceiptValidation_ReceiptAttributeType;

//
// Table for storing strings
//
static const char *EDReceiptValidation_strings[0x0071] = {
	// "IOIteratorNext" - #M03L10S7a
	"\x33\x35\x33\x0e\x1f\x08\x1b\x0e\x15\x08\x34\x1f\x02\x0e\x7a\x0a",
	// "/usr/lib/libSystem.dylib" - #M02L20S62
	"\xcd\x13\x11\x10\xcd\x0a\x07\x00\xcd\x0a\x07\x00\xf1\x17\x11\x12\x03\x0b\xcc\x02\x17\x0a\x07\x00\x9e\x6e\x1a\x7e\xde\x1c\x0d\x6c",
	// "SecRequirementCreateWithStringAndErrors" - #M03L30S9c
	"\xcf\xf9\xff\xce\xf9\xed\xe9\xf5\xee\xf9\xf1\xf9\xf2\xe8\xdf\xee\xf9\xfd\xe8\xf9\xcb\xf5\xe8\xf4\xcf\xe8\xee\xf5\xf2\xfb\xdd\xf2\xf8\xd9\xee\xee\xf3\xee\xef\x9c\x16\x35\xb7\xf2\xf3\xc7\xcf\xae",
	// "SecStaticCodeCheckValidityWithErrors" - #M02L30Sffffff9c
	"\xb7\xc9\xc7\xb7\xd8\xc5\xd8\xcd\xc7\xa7\xd3\xc8\xc9\xa7\xcc\xc9\xc7\xcf\xba\xc5\xd0\xcd\xc8\xcd\xd8\xdd\xbb\xcd\xd8\xcc\xa9\xd6\xd6\xd3\xd6\xd7\x64\xf5\xf5\xd0\x81\xf8\x8a\x52\xf9\x38\xfd\x16",
	// "exit" - #M03L10Scf
	"\xaa\xb7\xa6\xbb\xcf\xb1\x8d\x73\x50\x2c\x99\xe3\xd9\x38\x63\xe8",
	// "CFURLCreateDataAndPropertiesFromResource" - #M03L30See
	"\xad\xa8\xbb\xbc\xa2\xad\x9c\x8b\x8f\x9a\x8b\xaa\x8f\x9a\x8f\xaf\x80\x8a\xbe\x9c\x81\x9e\x8b\x9c\x9a\x87\x8b\x9d\xa8\x9c\x81\x83\xbc\x8b\x9d\x81\x9b\x9c\x8d\x8b\xee\x84\xa4\x1d\x44\xbb\x8c\xa5",
	// "CFDictionaryCreateMutable" - #M03L20Sa7
	"\xe4\xe1\xe3\xce\xc4\xd3\xce\xc8\xc9\xc6\xd5\xde\xe4\xd5\xc2\xc6\xd3\xc2\xea\xd2\xd3\xc6\xc5\xcb\xc2\xa7\x22\xc3\xa9\xfb\x8b\x24",
	// "CFURLCreateWithFileSystemPathRelativeToBase" - #M02L30S6c
	"\xd7\xda\xe9\xe6\xe0\xd7\x06\xf9\xf5\x08\xf9\xeb\xfd\x08\xfc\xda\xfd\x00\xf9\xe7\x0d\x07\x08\xf9\x01\xe4\xf5\x08\xfc\xe6\xf9\x00\xf5\x08\xfd\x0a\xf9\xe8\x03\xd6\xf5\x07\xf9\x94\x40\x86\xe0\x32",
	// "CMSDecoderCreate" - #M03L20S15
	"\x56\x58\x46\x51\x70\x76\x7a\x71\x70\x67\x56\x67\x70\x74\x61\x70\x15\x5d\x46\xf2\xe8\x1c\x07\x12\xbc\xe1\x74\x0f\xbc\xa7\x95\xc9",
	// Empty slot
	"\xa2\x3a\xa0\x13\xca\x23\x80\xe4\x80\x4f\x69\xbd\x1e\xba\x44\x30",
	// "CFDataGetLength" - #M02L10Sffffffc4
	"\x7f\x82\x80\x9d\xb0\x9d\x83\xa1\xb0\x88\xa1\xaa\xa3\xb0\xa4\x3c",
	// "com.edcodia.graphpouch" - #M02L20S66
	"\xfd\x09\x07\xc8\xff\xfe\xfd\x09\xfe\x03\xfb\xc8\x01\x0c\xfb\x0a\x02\x0a\x09\x0f\xfd\x02\x9a\x99\x16\x6d\xeb\xfa\x9b\x9e\x9d\x83",
	// Empty slot
	"\xb8\xd6\xdf\xda\x53\x32\x1a\xb1\xf9\x8b\x38\xee\x6f\xf5\xfd\x02",
	// "CFRelease" - #M03L10Sc6
	"\x85\x80\x94\xa3\xaa\xa3\xa7\xb5\xa3\xc6\xdf\x62\x38\xe7\x9f\x9b",
	// "CC_SHA1_Update" - #M02L10S3a
	"\x09\x09\x25\x19\x0e\x07\xf7\x25\x1b\x36\x2a\x27\x3a\x2b\xc6\x63",
	// Empty slot
	"\x34\x0f\xe0\xc0\x5a\xbf\x48\xd0\xea\x84\x05\xfd\x6e\xab\x28\x20",
	// Empty slot
	"\x1c\xa6\x08\xc2\x69\xad\xea\x9f\x05\x91\x32\x09\xc8\xc0\x9c\xb0",
	// Empty slot
	"\x64\xe5\xb7\x21\x4b\x98\x07\x98\xb9\x39\xd2\x90\xc8\x6c\xc6\x59",
	// Empty slot
	"\x85\xa7\xbb\x65\x2c\x3c\x65\x84\xaa\xfa\x09\x39\x73\xaf\xc8\x52",
	// Empty slot
	"\xca\xcc\x2b\xdd\xe2\xbc\x59\xc2\x20\x61\x06\x03\x80\xae\x39\x80",
	// "CMSDecoderCopyContent" - #M02L20Sffffffb2
	"\x91\x9b\xa1\x92\xb3\xb1\xbd\xb2\xb3\xc0\x91\xbd\xbe\xc7\x91\xbd\xbc\xc2\xb3\xbc\xc2\x4e\xb5\xb3\xf3\xf8\xf4\x65\x18\x08\xef\x1a",
	// "CFDictionaryGetValue" - #M02L20S1c
	"\x27\x2a\x28\x4d\x47\x58\x4d\x53\x52\x45\x56\x5d\x2b\x49\x58\x3a\x45\x50\x59\x49\xe4\xd0\xc3\x1e\x8f\x23\x68\xf2\xda\xa1\x15\x3b",
	// "1.0.0" - #M02L10Sffffff9b
	"\x96\x93\x95\x93\x95\x65\x20\xe1\x8b\xb6\xe8\x9c\xf2\xaa\x95\xd3",
	// "/usr/lib/libSystem.dylib" - #M02L20S2a
	"\x05\x4b\x49\x48\x05\x42\x3f\x38\x05\x42\x3f\x38\x29\x4f\x49\x4a\x3b\x43\x04\x3a\x4f\x42\x3f\x38\xd6\x81\x0a\xfe\x36\x20\xea\xe7",
	// "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M02L50Sfffffff3
	"\x3c\x60\x86\x80\x81\x72\x7a\x3c\x59\x76\x6f\x7f\x6e\x7f\x86\x3c\x53\x7f\x6e\x7a\x72\x84\x7c\x7f\x78\x80\x3c\x50\x7c\x7f\x72\x53\x7c\x82\x7b\x71\x6e\x81\x76\x7c\x7b\x3b\x73\x7f\x6e\x7a\x72\x84\x7c\x7f\x78\x3c\x50\x7c\x7f\x72\x53\x7c\x82\x7b\x71\x6e\x81\x76\x7c\x7b\x0d\xaf\xd0\x2c\x14\x2a\x81\x5c\xfe\xd0\x3f\x83\x33\xe7",
	// "1.0.0" - #M03L10Sd4
	"\xe5\xfa\xe4\xfa\xe4\xd4\x31\x68\xf9\x80\x26\x77\x4a\xbb\x5f\x9b",
	// Empty slot
	"\xe6\x38\x00\x8e\x4d\xed\xe7\x12\x1b\xeb\xf5\x6d\xb6\x4b\x3e\xf7",
	// "CFURLCreateCopyAppendingPathComponent" - #M03L30Sdc
	"\x9f\x9a\x89\x8e\x90\x9f\xae\xb9\xbd\xa8\xb9\x9f\xb3\xac\xa5\x9d\xac\xac\xb9\xb2\xb8\xb5\xb2\xbb\x8c\xbd\xa8\xb4\x9f\xb3\xb1\xac\xb3\xb2\xb9\xb2\xa8\xdc\x39\xb3\xe3\x42\x4d\xf7\xf8\xaa\x20\xae",
	// "Contents" - #M02L10Sffffffb6
	"\x8d\xb9\xb8\xbe\xaf\xb8\xbe\xbd\x4a\xe4\x3c\x9d\xc8\x7a\x86\x00",
	// "/System/Library/Frameworks/IOKit.framework/IOKit" - #M03L40Sc6
	"\xe9\x95\xbf\xb5\xb2\xa3\xab\xe9\x8a\xaf\xa4\xb4\xa7\xb4\xbf\xe9\x80\xb4\xa7\xab\xa3\xb1\xa9\xb4\xad\xb5\xe9\x8f\x89\x8d\xaf\xb2\xe8\xa0\xb4\xa7\xab\xa3\xb1\xa9\xb4\xad\xe9\x8f\x89\x8d\xaf\xb2\xc6\xff\x5d\xd1\xad\x15\x26\x4b\x8f\x06\x3d\x3b\x15\xa7\xa1\xed",
	// Empty slot
	"\x19\x70\x8a\xc4\xeb\x18\x20\x05\xc0\x83\x64\x9d\xee\x78\x9c\x98",
	// Empty slot
	"\xdf\x1d\x44\x05\xf8\x7c\x13\xd3\xb2\xbb\x53\x1d\xd0\x41\xa2\x1a",
	// Empty slot
	"\xa0\x83\x9f\xe2\xbf\xc0\xe3\x4e\x59\xe3\x4a\x47\xf4\x6b\xfe\x48",
	// "CFArrayCreateMutable" - #M02L20S34
	"\x0f\x12\x0d\x3e\x3e\x2d\x45\x0f\x3e\x31\x2d\x40\x31\x19\x41\x40\x2d\x2e\x38\x31\xcc\x84\xe1\x12\x66\xc2\xd1\xd5\xc2\x54\x7e\x27",
	// Empty slot
	"\x38\x3a\x1a\x98\x7a\xfd\x54\xfe\xcf\x06\x25\x08\x59\x5f\x21\x71",
	// "_MASReceipt" - #M02L10S3f
	"\x20\x0e\x02\x14\x13\x26\x24\x26\x2a\x31\x35\xc1\xcf\x7f\x2f\xdc",
	// "CMSDecoderUpdateMessage" - #M02L20S17
	"\x2c\x36\x3c\x2d\x4e\x4c\x58\x4d\x4e\x5b\x3e\x59\x4d\x4a\x5d\x4e\x36\x4e\x5c\x5c\x4a\x50\x4e\xe9\x5c\x3a\x9d\x0f\xf0\xa8\x3f\xce",
	// "NSApplicationMain" - #M03L20S10
	"\x5e\x43\x51\x60\x60\x7c\x79\x73\x71\x64\x79\x7f\x7e\x5d\x71\x79\x7e\x10\xfe\xa3\x8f\x66\x1d\x5e\xe3\xdc\x18\x84\x79\xb2\xdc\x33",
	// "dlsym" - #M02L10Sffffffdb
	"\x89\x91\x98\x9e\x92\x25\x98\x55\x8b\x45\x82\x32\x4e\xa5\xf8\xf3",
	// "CFBundleGetValueForInfoDictionaryKey" - #M03L30S97
	"\xd4\xd1\xd5\xe2\xf9\xf3\xfb\xf2\xd0\xf2\xe3\xc1\xf6\xfb\xe2\xf2\xd1\xf8\xe5\xde\xf9\xf1\xf8\xd3\xfe\xf4\xe3\xfe\xf8\xf9\xf6\xe5\xee\xdc\xf2\xee\x97\xcc\x84\x21\xec\x0f\x17\x6c\x0b\xa5\xd4\xa6",
	// "CC_SHA1" - #M02L10Sfffffffc
	"\x47\x47\x63\x57\x4c\x45\x35\x04\xcf\xb0\x9c\x8d\x84\xd6\x21\x6f",
	// Empty slot
	"\x2a\x81\x53\xa7\x84\x31\x99\x96\xe4\x0a\xeb\x60\x01\x16\x7e\xb4",
	// "SecStaticCodeCheckValidity" - #M03L20Scd
	"\x9e\xa8\xae\x9e\xb9\xac\xb9\xa4\xae\x8e\xa2\xa9\xa8\x8e\xa5\xa8\xae\xa6\x9b\xac\xa1\xa4\xa9\xa4\xb9\xb4\xcd\x36\xdd\x42\xca\x65",
	// "CFDataCreateMutable" - #M03L20S5f
	"\x1c\x19\x1b\x3e\x2b\x3e\x1c\x2d\x3a\x3e\x2b\x3a\x12\x2a\x2b\x3e\x3d\x33\x3a\x5f\xb7\x1c\x3c\xb4\xe6\x8a\xca\xf0\xc2\x44\xf4\x4c",
	// Empty slot
	"\xeb\x4c\xf8\xc8\xe8\x42\xf9\x2e\x58\x1e\x8f\x18\x3c\xb2\xb5\xc2",
	// Empty slot
	"\xfe\x40\x5c\x94\x69\xe8\xc9\x84\x4e\xcd\xa0\xb2\x15\x12\x05\xa0",
	// "CFEqual" - #M03L10Sca
	"\x89\x8c\x8f\xbb\xbf\xab\xa6\xca\x25\x3a\x0c\xc5\x98\xa9\x21\xa4",
	// Empty slot
	"\xae\x07\x79\x40\x23\x6f\xbc\x68\x82\x13\x4a\xf0\xc8\xb1\xcd\x60",
	// "CFBundleIdentifier" - #M03L20S84
	"\xc7\xc2\xc6\xf1\xea\xe0\xe8\xe1\xcd\xe0\xe1\xea\xf0\xed\xe2\xed\xe1\xf6\x84\xa7\x46\xf1\xef\x3c\xcb\xa9\x3b\xc7\xcd\xa3\x11\xe3",
	// Empty slot
	"\xbb\x1e\xbf\x4f\x01\x6c\xae\x4a\x9e\xf0\x4f\xa7\x1f\x8a\x72\xf0",
	// "CFBundleGetIdentifier" - #M03L20S2f
	"\x6c\x69\x6d\x5a\x41\x4b\x43\x4a\x68\x4a\x5b\x66\x4b\x4a\x41\x5b\x46\x49\x46\x4a\x5d\x2f\x8d\x3e\x3f\x0a\x27\xaa\x60\x4d\xad\x3f",
	// "en0" - #M03L10S9f
	"\xfa\xf1\xaf\x9f\xe7\x47\xa9\x9d\x7e\x62\x33\xc1\x8d\xae\x54\x59",
	// Empty slot
	"\x9b\x7c\xcd\x4b\xea\x04\xf5\x9e\x84\x3d\xd4\x19\xe6\x5d\xd5\x03",
	// "CC_SHA1_Final" - #M03L10S1c
	"\x5f\x5f\x43\x4f\x54\x5d\x2d\x43\x5a\x75\x72\x7d\x70\x1c\x7c\x94",
	// "/System/Library/Frameworks/Security.framework/Security" - #M02L40S2c
	"\x03\x27\x4d\x47\x48\x39\x41\x03\x20\x3d\x36\x46\x35\x46\x4d\x03\x1a\x46\x35\x41\x39\x4b\x43\x46\x3f\x47\x03\x27\x39\x37\x49\x46\x3d\x48\x4d\x02\x3a\x46\x35\x41\x39\x4b\x43\x46\x3f\x03\x27\x39\x37\x49\x46\x3d\x48\x4d\xd4\x74\x03\x69\xc3\x1d\x31\xd7\xb6\xe7",
	// "CFArrayAppendValue" - #M02L20Sffffffac
	"\x97\x9a\x95\xc6\xc6\xb5\xcd\x95\xc4\xc4\xb9\xc2\xb8\xaa\xb5\xc0\xc9\xb9\x54\x7d\x54\x9d\xae\x08\xc6\x42\xa5\x23\xff\xf8\xf6\x66",
	// Empty slot
	"\x2e\xaf\x63\x6d\xf2\x7b\x2e\xbd\x6c\xfc\x73\xd7\x84\xb8\x73\xe4",
	// "/System/Library/Frameworks/Security.framework/Security" - #M02L40S01
	"\x2e\x52\x78\x72\x73\x64\x6c\x2e\x4b\x68\x61\x71\x60\x71\x78\x2e\x45\x71\x60\x6c\x64\x76\x6e\x71\x6a\x72\x2e\x52\x64\x62\x74\x71\x68\x73\x78\x2d\x65\x71\x60\x6c\x64\x76\x6e\x71\x6a\x2e\x52\x64\x62\x74\x71\x68\x73\x78\xff\x46\x4e\xb8\x0a\xc7\xfc\x7e\x06\x1a",
	// Empty slot
	"\x8e\x0d\x1c\xae\xca\x6f\x8a\xb7\xf0\x0f\xec\x93\x79\x33\x1c\xe1",
	// "CC_SHA1_Init" - #M03L10S75
	"\x36\x36\x2a\x26\x3d\x34\x44\x2a\x3c\x1b\x1c\x01\x75\xd1\x79\x73",
	// "CFStringCreateWithBytes" - #M02L20S74
	"\xcf\xd2\xdf\x00\xfe\xf5\xfa\xf3\xcf\xfe\xf1\xed\x00\xf1\xe3\xf5\x00\xf4\xce\x05\x00\xf1\xff\x8c\x15\xee\x81\x9b\xa2\xd6\x4e\xe6",
	// "CMSDecoderGetNumSigners" - #M03L20S86
	"\xc5\xcb\xd5\xc2\xe3\xe5\xe9\xe2\xe3\xf4\xc1\xe3\xf2\xc8\xf3\xeb\xd5\xef\xe1\xe8\xe3\xf4\xf5\x86\x74\x40\xfd\xee\xbf\xee\x33\xf9",
	// Empty slot
	"\x84\x52\x33\x47\x05\xb9\x7d\xb6\xed\xc0\x2f\x3b\x39\x85\x13\xcc",
	// Empty slot
	"\x4d\xc4\x2d\x53\xe3\xa2\xe7\x4c\x2b\x10\x3a\xab\x75\x74\x3f\xb5",
	// "IORegistryEntryGetParentEntry" - #M03L20S9e
	"\xd7\xd1\xcc\xfb\xf9\xf7\xed\xea\xec\xe7\xdb\xf0\xea\xec\xe7\xd9\xfb\xea\xce\xff\xec\xfb\xf0\xea\xdb\xf0\xea\xec\xe7\x9e\x83\xf2",
	// Empty slot
	"\x0e\xb3\xa8\x48\x7f\xed\xd1\xc1\xbf\x57\x81\x77\x8b\xe8\xd0\xa3",
	// "SecRequirementCreateWithString" - #M02L20S65
	"\xee\x00\xfe\xed\x00\x0c\x10\x04\x0d\x00\x08\x00\x09\x0f\xde\x0d\x00\xfc\x0f\x00\xf2\x04\x0f\x03\xee\x0f\x0d\x04\x09\x02\x9b\x83",
	// Empty slot
	"\xe4\xdb\x58\xcd\xbd\xa7\xa1\xcf\x44\x80\x9e\xbc\x3a\x90\xe5\x2b",
	// "CMSDecoderFinalizeMessage" - #M03L20S50
	"\x13\x1d\x03\x14\x35\x33\x3f\x34\x35\x22\x16\x39\x3e\x31\x3c\x39\x2a\x35\x1d\x35\x23\x23\x31\x37\x35\x50\xdc\xff\xe3\x7c\x06\xa0",
	// "SecAsn1CoderCreate" - #M03L20S6b
	"\x38\x0e\x08\x2a\x18\x05\x5a\x28\x04\x0f\x0e\x19\x28\x19\x0e\x0a\x1f\x0e\x6b\x47\xb2\x53\x40\x08\x8a\xc0\x06\x39\x01\x03\x5b\xb9",
	// "CMSDecoderCopySignerStatus" - #M03L20S8d
	"\xce\xc0\xde\xc9\xe8\xee\xe2\xe9\xe8\xff\xce\xe2\xfd\xf4\xde\xe4\xea\xe3\xe8\xff\xde\xf9\xec\xf9\xf8\xfe\x8d\x97\xdd\xbc\x1e\xe5",
	// Empty slot
	"\x00\xd8\xba\xc2\xf9\x2b\xfb\xaa\xe0\x51\xfa\x15\xe4\x3f\xab\x5c",
	// "CFDataCreate" - #M03L10Sad
	"\xee\xeb\xe9\xcc\xd9\xcc\xee\xdf\xc8\xcc\xd9\xc8\xad\x45\x6c\x50",
	// "CFDictionaryAddValue" - #M02L20Sfffffffa
	"\x49\x4c\x4a\x6f\x69\x7a\x6f\x75\x74\x67\x78\x7f\x47\x6a\x6a\x5c\x67\x72\x7b\x6b\x06\xdf\x9d\x48\x64\xae\xd7\xd2\xa2\x67\x21\x70",
	// Empty slot
	"\xcc\xba\x0c\xb9\x39\xaf\xd0\xe2\xb2\xd0\x8e\xbc\xf4\xa6\xc6\x15",
	// "/System/Library/Frameworks/AppKit.framework/AppKit" - #M02L40S40
	"\xef\x13\x39\x33\x34\x25\x2d\xef\x0c\x29\x22\x32\x21\x32\x39\xef\x06\x32\x21\x2d\x25\x37\x2f\x32\x2b\x33\xef\x01\x30\x30\x0b\x29\x34\xee\x26\x32\x21\x2d\x25\x37\x2f\x32\x2b\xef\x01\x30\x30\x0b\x29\x34\xc0\xa5\x71\xc5\xcf\x38\x46\x11\xf1\x4f\xc6\x29\x81\xf6",
	// "IOBSDNameMatching" - #M02L20S11
	"\x38\x3e\x31\x42\x33\x3d\x50\x5c\x54\x3c\x50\x63\x52\x57\x58\x5d\x56\xef\x6e\x83\x02\x55\xb6\x41\x47\x65\x7d\x4f\x37\x2a\x31\x3d",
	// "/System/Library/Frameworks/Security.framework/Security" - #M02L40S6e
	"\xc1\xe5\x0b\x05\x06\xf7\xff\xc1\xde\xfb\xf4\x04\xf3\x04\x0b\xc1\xd8\x04\xf3\xff\xf7\x09\x01\x04\xfd\x05\xc1\xe5\xf7\xf5\x07\x04\xfb\x06\x0b\xc0\xf8\x04\xf3\xff\xf7\x09\x01\x04\xfd\xc1\xe5\xf7\xf5\x07\x04\xfb\x06\x0b\x92\x1d\xb8\xed\x2e\x0e\x68\xd3\xcc\x7b",
	// "/System/Library/Frameworks/Security.framework/Security" - #M03L40S9a
	"\xb5\xc9\xe3\xe9\xee\xff\xf7\xb5\xd6\xf3\xf8\xe8\xfb\xe8\xe3\xb5\xdc\xe8\xfb\xf7\xff\xed\xf5\xe8\xf1\xe9\xb5\xc9\xff\xf9\xef\xe8\xf3\xee\xe3\xb4\xfc\xe8\xfb\xf7\xff\xed\xf5\xe8\xf1\xb5\xc9\xff\xf9\xef\xe8\xf3\xee\xe3\x9a\x7c\xc3\x80\xe6\x84\xbd\x6f\x21\x70",
	// Empty slot
	"\x76\x2f\x7c\x76\x04\x91\xf8\x88\x0f\x9e\xc1\x04\x6e\xf1\xfe\x61",
	// "CFStringCreateWithCString" - #M03L20See
	"\xad\xa8\xbd\x9a\x9c\x87\x80\x89\xad\x9c\x8b\x8f\x9a\x8b\xb9\x87\x9a\x86\xad\xbd\x9a\x9c\x87\x80\x89\xee\x76\xee\x74\xb9\x9b\x21",
	// "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M02L50S6d
	"\xc2\xe6\x0c\x06\x07\xf8\x00\xc2\xdf\xfc\xf5\x05\xf4\x05\x0c\xc2\xd9\x05\xf4\x00\xf8\x0a\x02\x05\xfe\x06\xc2\xd6\x02\x05\xf8\xd9\x02\x08\x01\xf7\xf4\x07\xfc\x02\x01\xc1\xf9\x05\xf4\x00\xf8\x0a\x02\x05\xfe\xc2\xd6\x02\x05\xf8\xd9\x02\x08\x01\xf7\xf4\x07\xfc\x02\x01\x93\xcb\x52\xa4\x69\x0b\x09\x0a\x5d\x87\xe4\xa1\x14\xf8",
	// "/System/Library/Frameworks/IOKit.framework/IOKit" - #M03L40S94
	"\xbb\xc7\xed\xe7\xe0\xf1\xf9\xbb\xd8\xfd\xf6\xe6\xf5\xe6\xed\xbb\xd2\xe6\xf5\xf9\xf1\xe3\xfb\xe6\xff\xe7\xbb\xdd\xdb\xdf\xfd\xe0\xba\xf2\xe6\xf5\xf9\xf1\xe3\xfb\xe6\xff\xbb\xdd\xdb\xdf\xfd\xe0\x94\xdf\xa3\x6a\x1b\x5e\x42\x74\x59\x39\x52\xa8\x68\x1a\xb0\xc2",
	// Empty slot
	"\xcd\xce\x2e\x7d\x9c\x3f\x65\xeb\x61\x8b\x45\x83\x26\x6a\xb1\x57",
	// "anchor apple generic" - #M03L20S27
	"\x46\x49\x44\x4f\x48\x55\x07\x46\x57\x57\x4b\x42\x07\x40\x42\x49\x42\x55\x4e\x44\x27\xc3\x1d\x7f\xc4\x1b\x9e\x2d\xdd\x28\xd5\xe0",
	// Empty slot
	"\x42\x5b\x54\xdf\xd1\xb9\x5d\x6b\xec\x3e\x8a\xbb\x13\x91\x7c\xc6",
	// "CFDateFormatterSetFormat" - #M03L20Se5
	"\xa6\xa3\xa1\x84\x91\x80\xa3\x8a\x97\x88\x84\x91\x91\x80\x97\xb6\x80\x91\xa3\x8a\x97\x88\x84\x91\xe5\x7b\xd5\x89\x25\xb8\xad\xcb",
	// "CFBundleGetMainBundle" - #M02L20Sffffffd8
	"\x6b\x6e\x6a\x9d\x96\x8c\x94\x8d\x6f\x8d\x9c\x75\x89\x91\x96\x6a\x9d\x96\x8c\x94\x8d\x28\x8f\x75\xf4\x4f\x67\x77\xce\x08\xd8\x07",
	// "SecStaticCodeCreateWithPath" - #M03L20Sd5
	"\x86\xb0\xb6\x86\xa1\xb4\xa1\xbc\xb6\x96\xba\xb1\xb0\x96\xa7\xb0\xb4\xa1\xb0\x82\xbc\xa1\xbd\x85\xb4\xa1\xbd\xd5\x84\xe3\x38\xf2",
	// "IORegistryEntryCreateCFProperty" - #M02L20S23
	"\x26\x2c\x2f\x42\x44\x46\x50\x51\x4f\x56\x22\x4b\x51\x4f\x56\x20\x4f\x42\x3e\x51\x42\x20\x23\x2d\x4f\x4c\x4d\x42\x4f\x51\x56\xdd",
	// Empty slot
	"\x6f\x02\x77\x70\x7f\x5b\x63\x1f\xec\x21\x21\x24\xc0\x3f\x2a\xa3",
	// "CFBundleCopyBundleURL" - #M02L20S68
	"\xdb\xde\xda\x0d\x06\xfc\x04\xfd\xdb\x07\x08\x11\xda\x0d\x06\xfc\x04\xfd\xed\xea\xe4\x98\xd9\x96\xa5\x30\x8b\x13\x38\xa8\x27\x3e",
	// "CFStringCompare" - #M03L10Sb7
	"\xf4\xf1\xe4\xc3\xc5\xde\xd9\xd0\xf4\xd8\xda\xc7\xd6\xc5\xd2\xb7",
	// "CFDateFormatterCreateDateFromString" - #M03L30Sbe
	"\xfd\xf8\xfa\xdf\xca\xdb\xf8\xd1\xcc\xd3\xdf\xca\xca\xdb\xcc\xfd\xcc\xdb\xdf\xca\xdb\xfa\xdf\xca\xdb\xf8\xcc\xd1\xd3\xed\xca\xcc\xd7\xd0\xd9\xbe\x18\x1e\xfd\x1c\x27\x11\xe6\xcb\xc5\x62\x99\x99",
	// "/System/Library/Frameworks/IOKit.framework/IOKit" - #M02L40S4e
	"\xe1\x05\x2b\x25\x26\x17\x1f\xe1\xfe\x1b\x14\x24\x13\x24\x2b\xe1\xf8\x24\x13\x1f\x17\x29\x21\x24\x1d\x25\xe1\xfb\x01\xfd\x1b\x26\xe0\x18\x24\x13\x1f\x17\x29\x21\x24\x1d\xe1\xfb\x01\xfd\x1b\x26\xb2\x56\xd8\x86\xa9\xc7\x80\xa8\x3f\x71\x11\x28\x3b\x3d\xe0\x04",
	// "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" - #M02L30Sffffffc1
	"\xb8\xb8\xb8\xb8\x66\x6c\x66\x8c\x8c\x66\x6c\x66\xa3\xa3\x66\x93\x66\x87\x87\x66\x79\x66\xac\xac\x66\x79\x66\xb2\xb2\x66\x99\x66\x3f\xa7\x2c\xc7\x88\xe2\x3a\x86\xea\x64\x75\x52\x49\x24\x90\xd1",
	// "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M02L50S1c
	"\x13\x37\x5d\x57\x58\x49\x51\x13\x30\x4d\x46\x56\x45\x56\x5d\x13\x2a\x56\x45\x51\x49\x5b\x53\x56\x4f\x57\x13\x27\x53\x56\x49\x2a\x53\x59\x52\x48\x45\x58\x4d\x53\x52\x12\x4a\x56\x45\x51\x49\x5b\x53\x56\x4f\x13\x27\x53\x56\x49\x2a\x53\x59\x52\x48\x45\x58\x4d\x53\x52\xe4\x40\xf5\xeb\xd0\x8b\xa9\x7a\x64\x14\x14\x0c\x2a\xbc",
	// "SecPolicyCreateBasicX509" - #M02L20Sffffffac
	"\xa7\xb9\xb7\xa4\xc3\xc0\xbd\xb7\xcd\x97\xc6\xb9\xb5\xc8\xb9\x96\xb5\xc7\xbd\xb7\xac\x89\x84\x8d\x54\x51\x95\x0e\x19\x2b\xae\x92",
	// "receipt" - #M02L10Sfffffffd
	"\x75\x68\x66\x68\x6c\x73\x77\x03\x3e\x6a\xa1\x3a\x54\x58\xb8\x89",
	// "SecAsn1Decode" - #M02L10Sffffff8f
	"\xc4\xd6\xd4\xb2\xe4\xdf\xa2\xb5\xd6\xd4\xe0\xd5\xd6\x71\x38\x73",
	// "CFDateFormatterCreate" - #M03L20Sc7
	"\x84\x81\x83\xa6\xb3\xa2\x81\xa8\xb5\xaa\xa6\xb3\xb3\xa2\xb5\x84\xb5\xa2\xa6\xb3\xa2\xc7\xda\x83\xdf\x6e\xb7\xb1\xa3\xd6\x16\x5e",
	// "IOMasterPort" - #M03L10S4e
	"\x07\x01\x03\x2f\x3d\x3a\x2b\x3c\x1e\x21\x3c\x3a\x4e\x0f\x57\xad",
	// "CFDataGetBytePtr" - #M03L20Sd1
	"\x92\x97\x95\xb0\xa5\xb0\x96\xb4\xa5\x93\xa8\xa5\xb4\x81\xa5\xa3\xd1\xe3\x54\xa9\x0b\x66\xd6\x06\xc1\x1f\xf8\xa7\x45\x27\x7a\xc1",
	// "CFDataAppendBytes" - #M03L20S7e
	"\x3d\x38\x3a\x1f\x0a\x1f\x3f\x0e\x0e\x1b\x10\x1a\x3c\x07\x0a\x1b\x0d\x7e\x0e\x0a\x6d\x39\xd5\x76\x2e\x3c\xa6\x56\x0c\x84\xc9\xec",
	// "IOObjectRelease" - #M03L10S57
	"\x1e\x18\x18\x35\x3d\x32\x34\x23\x05\x32\x3b\x32\x36\x24\x32\x57",
	// "IOServiceGetMatchingServices" - #M02L20Sffffffda
	"\x6f\x75\x79\x8b\x98\x9c\x8f\x89\x8b\x6d\x8b\x9a\x73\x87\x9a\x89\x8e\x8f\x94\x8d\x79\x8b\x98\x9c\x8f\x89\x8b\x99\x26\x6a\x3b\x17",
	// "/usr/lib/libSystem.dylib" - #M03L20S2f
	"\x00\x5a\x5c\x5d\x00\x43\x46\x4d\x00\x43\x46\x4d\x7c\x56\x5c\x5b\x4a\x42\x01\x4b\x56\x43\x46\x4d\x2f\xa6\xff\xe6\xa6\xc7\x52\xf5",
	// "CFNumberCreate" - #M03L10Se5
	"\xa6\xa3\xab\x90\x88\x87\x80\x97\xa6\x97\x80\x84\x91\x80\xe5\x27",
	// "dlopen" - #M03L10S31
	"\x55\x5d\x5e\x41\x54\x5f\x31\x9c\xaa\xa8\xf7\xc4\xe2\xd4\xd9\x4d",
	// "SecAsn1CoderRelease" - #M02L20S52
	"\x01\x13\x11\xef\x21\x1c\xdf\xf1\x1d\x12\x13\x20\x00\x13\x1a\x13\x0f\x21\x13\xae\x34\x86\x72\x60\x8f\xfd\x21\x4a\xfb\xb3\x89\xf7",
	// "CFBundleShortVersionString" - #M03L20Saf
	"\xec\xe9\xed\xda\xc1\xcb\xc3\xca\xfc\xc7\xc0\xdd\xdb\xf9\xca\xdd\xdc\xc6\xc0\xc1\xfc\xdb\xdd\xc6\xc1\xc8\xaf\x90\x5e\xb3\x8f\x0e",
	// "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M02L50Sffffff8c
	"\xa3\xc7\xed\xe7\xe8\xd9\xe1\xa3\xc0\xdd\xd6\xe6\xd5\xe6\xed\xa3\xba\xe6\xd5\xe1\xd9\xeb\xe3\xe6\xdf\xe7\xa3\xb7\xe3\xe6\xd9\xba\xe3\xe9\xe2\xd8\xd5\xe8\xdd\xe3\xe2\xa2\xda\xe6\xd5\xe1\xd9\xeb\xe3\xe6\xdf\xa3\xb7\xe3\xe6\xd9\xba\xe3\xe9\xe2\xd8\xd5\xe8\xdd\xe3\xe2\x74\x05\x5b\x51\x2d\x8c\x01\x61\xfb\x26\xef\xde\x5c\x24",
	// "IOMACAddress" - #M02L10S0b
	"\x3e\x44\x42\x36\x38\x36\x59\x59\x67\x5a\x68\x68\xf5\x18\x59\x69",
};


//
// Table for storing various pointers
//
static void *EDReceiptValidation_pointers[0x0071] = {
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	((void *) dlsym), 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	((void *) CFStringCreateWithBytes), 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	((void *) CFStringCreateWithCString), 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
	((void *) dlopen), 
	NULL, 
	NULL, 
	NULL, 
	NULL, 
};


//
// Function pointer for string decryption
//
typedef void (*EDReceiptValidation_decrypt)(const char *p1, char *p2, char p3, int p4);

// Function pointer for 'CC_SHA1'
typedef unsigned char *(*_EDReceiptValidation_CC_SHA1_)(const void *data, CC_LONG len, unsigned char *md);
// Function pointer for 'CC_SHA1_Final'
typedef int (*_EDReceiptValidation_CC_SHA1_Final_)(unsigned char *md, CC_SHA1_CTX *c);
// Function pointer for 'CC_SHA1_Init'
typedef int (*_EDReceiptValidation_CC_SHA1_Init_)(CC_SHA1_CTX *c);
// Function pointer for 'CC_SHA1_Update'
typedef int (*_EDReceiptValidation_CC_SHA1_Update_)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
// Function pointer for 'CFArrayAppendValue'
typedef void (*_EDReceiptValidation_CFArrayAppendValue_)(CFMutableArrayRef theArray, const void *value);
// Function pointer for 'CFArrayCreateMutable'
typedef CFMutableArrayRef (*_EDReceiptValidation_CFArrayCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
// Function pointer for 'CFBundleCopyBundleURL'
typedef CFURLRef (*_EDReceiptValidation_CFBundleCopyBundleURL_)(CFBundleRef bundle);
// Function pointer for 'CFBundleGetIdentifier'
typedef CFStringRef (*_EDReceiptValidation_CFBundleGetIdentifier_)(CFBundleRef bundle);
// Function pointer for 'CFBundleGetMainBundle'
typedef CFBundleRef (*_EDReceiptValidation_CFBundleGetMainBundle_)();
// Function pointer for 'CFBundleGetValueForInfoDictionaryKey'
typedef CFTypeRef (*_EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_)(CFBundleRef bundle, CFStringRef key);
// Function pointer for 'CFDataAppendBytes'
typedef void (*_EDReceiptValidation_CFDataAppendBytes_)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
// Function pointer for 'CFDataCreate'
typedef CFDataRef (*_EDReceiptValidation_CFDataCreate_)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
// Function pointer for 'CFDataCreateMutable'
typedef CFMutableDataRef (*_EDReceiptValidation_CFDataCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity);
// Function pointer for 'CFDataGetBytePtr'
typedef const UInt8 *(*_EDReceiptValidation_CFDataGetBytePtr_)(CFDataRef theData);
// Function pointer for 'CFDataGetLength'
typedef CFIndex (*_EDReceiptValidation_CFDataGetLength_)(CFDataRef theData);
// Function pointer for 'CFDateFormatterCreate'
typedef CFDateFormatterRef (*_EDReceiptValidation_CFDateFormatterCreate_)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
// Function pointer for 'CFDateFormatterCreateDateFromString'
typedef CFDateRef (*_EDReceiptValidation_CFDateFormatterCreateDateFromString_)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
// Function pointer for 'CFDateFormatterSetFormat'
typedef void (*_EDReceiptValidation_CFDateFormatterSetFormat_)(CFDateFormatterRef formatter, CFStringRef formatString);
// Function pointer for 'CFDictionaryAddValue'
typedef void (*_EDReceiptValidation_CFDictionaryAddValue_)(CFMutableDictionaryRef theDict, const void *key, const void *value);
// Function pointer for 'CFDictionaryCreateMutable'
typedef CFMutableDictionaryRef (*_EDReceiptValidation_CFDictionaryCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
// Function pointer for 'CFDictionaryGetValue'
typedef const void *(*_EDReceiptValidation_CFDictionaryGetValue_)(CFDictionaryRef theDict, const void *key);
// Function pointer for 'CFEqual'
typedef Boolean (*_EDReceiptValidation_CFEqual_)(CFTypeRef cf1, CFTypeRef cf2);
// Function pointer for 'CFNumberCreate'
typedef CFNumberRef (*_EDReceiptValidation_CFNumberCreate_)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
// Function pointer for 'CFRelease'
typedef void (*_EDReceiptValidation_CFRelease_)(CFTypeRef cf);
// Function pointer for 'CFStringCompare'
typedef CFComparisonResult (*_EDReceiptValidation_CFStringCompare_)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
// Function pointer for 'CFStringCreateWithBytes'
typedef CFStringRef (*_EDReceiptValidation_CFStringCreateWithBytes_)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
// Function pointer for 'CFStringCreateWithCString'
typedef CFStringRef (*_EDReceiptValidation_CFStringCreateWithCString_)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
// Function pointer for 'CFURLCreateCopyAppendingPathComponent'
typedef CFURLRef (*_EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
// Function pointer for 'CFURLCreateDataAndPropertiesFromResource'
typedef Boolean (*_EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_)(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode);
// Function pointer for 'CFURLCreateWithFileSystemPathRelativeToBase'
typedef CFURLRef (*_EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
// Function pointer for 'CMSDecoderCopyContent'
typedef OSStatus (*_EDReceiptValidation_CMSDecoderCopyContent_)(CMSDecoderRef cmsDecoder, CFDataRef *contentOut);
// Function pointer for 'CMSDecoderCopySignerStatus'
typedef OSStatus (*_EDReceiptValidation_CMSDecoderCopySignerStatus_)(CMSDecoderRef cmsDecoder, size_t signerIndex, CFTypeRef policyOrArray, Boolean evaluateSecTrust, CMSSignerStatus *signerStatusOut, SecTrustRef *secTrustOut, OSStatus *certVerifyResultCodeOut);
// Function pointer for 'CMSDecoderCreate'
typedef OSStatus (*_EDReceiptValidation_CMSDecoderCreate_)(CMSDecoderRef *cmsDecoderOut);
// Function pointer for 'CMSDecoderFinalizeMessage'
typedef OSStatus (*_EDReceiptValidation_CMSDecoderFinalizeMessage_)(CMSDecoderRef cmsDecoder);
// Function pointer for 'CMSDecoderGetNumSigners'
typedef OSStatus (*_EDReceiptValidation_CMSDecoderGetNumSigners_)(CMSDecoderRef cmsDecoder, size_t *numSignersOut);
// Function pointer for 'CMSDecoderUpdateMessage'
typedef OSStatus (*_EDReceiptValidation_CMSDecoderUpdateMessage_)(CMSDecoderRef cmsDecoder, const void *msgBytes, size_t msgBytesLen);
// Function pointer for 'dlopen'
typedef void *(*_EDReceiptValidation_dlopen_)(const char * __path, int __mode);
// Function pointer for 'dlsym'
typedef void *(*_EDReceiptValidation_dlsym_)(void * __handle, const char * __symbol);
// Function pointer for 'exit'
typedef void (*_EDReceiptValidation_exit_)(int status);
// Function pointer for 'IOBSDNameMatching'
typedef CFMutableDictionaryRef (*_EDReceiptValidation_IOBSDNameMatching_)(mach_port_t masterPort, uint32_t options, const char * bsdName);
// Function pointer for 'IOIteratorNext'
typedef io_object_t (*_EDReceiptValidation_IOIteratorNext_)(io_iterator_t iterator);
// Function pointer for 'IOMasterPort'
typedef kern_return_t (*_EDReceiptValidation_IOMasterPort_)(mach_port_t bootstrapPort, mach_port_t *masterPort);
// Function pointer for 'IOObjectRelease'
typedef kern_return_t (*_EDReceiptValidation_IOObjectRelease_)(io_object_t object);
// Function pointer for 'IORegistryEntryCreateCFProperty'
typedef CFTypeRef (*_EDReceiptValidation_IORegistryEntryCreateCFProperty_)(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options);
// Function pointer for 'IORegistryEntryGetParentEntry'
typedef kern_return_t (*_EDReceiptValidation_IORegistryEntryGetParentEntry_)(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t * parent);
// Function pointer for 'IOServiceGetMatchingServices'
typedef kern_return_t (*_EDReceiptValidation_IOServiceGetMatchingServices_)(mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t *existing);
// Function pointer for 'NSApplicationMain'
typedef int (*_EDReceiptValidation_NSApplicationMain_)(int argc, const char *argv[]);
// Function pointer for 'SecAsn1CoderCreate'
typedef OSStatus (*_EDReceiptValidation_SecAsn1CoderCreate_)(SecAsn1CoderRef *coder);
// Function pointer for 'SecAsn1CoderRelease'
typedef OSStatus (*_EDReceiptValidation_SecAsn1CoderRelease_)(SecAsn1CoderRef coder);
// Function pointer for 'SecAsn1Decode'
typedef OSStatus (*_EDReceiptValidation_SecAsn1Decode_)(SecAsn1CoderRef coder, const void *src, size_t len, const SecAsn1Template *templates, void *dest);
// Function pointer for 'SecPolicyCreateBasicX509'
typedef SecPolicyRef (*_EDReceiptValidation_SecPolicyCreateBasicX509_)(void);
// Function pointer for 'SecRequirementCreateWithString'
typedef OSStatus (*_EDReceiptValidation_SecRequirementCreateWithString_)(CFStringRef text, SecCSFlags flags, SecRequirementRef *requirement);
// Function pointer for 'SecRequirementCreateWithStringAndErrors'
typedef OSStatus (*_EDReceiptValidation_SecRequirementCreateWithStringAndErrors_)(CFStringRef text, SecCSFlags flags, CFErrorRef *errors, SecRequirementRef *requirement);
// Function pointer for 'SecStaticCodeCheckValidity'
typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCheckValidity_)(SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement);
// Function pointer for 'SecStaticCodeCheckValidityWithErrors'
typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_)(SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement, CFErrorRef *errors);
// Function pointer for 'SecStaticCodeCreateWithPath'
typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCreateWithPath_)(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode);


// Function wrapper for 'CC_SHA1'
#define EDReceiptValidation_CC_SHA1_ ((_EDReceiptValidation_CC_SHA1_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 1, 98, 32, EDReceiptValidation_ObfuscationFunction2, 40, -4, 16))
// Function wrapper for 'CC_SHA1_Final'
#define EDReceiptValidation_CC_SHA1_Final_ ((_EDReceiptValidation_CC_SHA1_Final_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 23, 42, 32, EDReceiptValidation_ObfuscationFunction3, 53, 28, 16))
// Function wrapper for 'CC_SHA1_Init'
#define EDReceiptValidation_CC_SHA1_Init_ ((_EDReceiptValidation_CC_SHA1_Init_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 106, 47, 32, EDReceiptValidation_ObfuscationFunction3, 59, 117, 16))
// Function wrapper for 'CC_SHA1_Update'
#define EDReceiptValidation_CC_SHA1_Update_ ((_EDReceiptValidation_CC_SHA1_Update_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 106, 47, 32, EDReceiptValidation_ObfuscationFunction2, 14, 58, 16))
// Function wrapper for 'CFArrayAppendValue'
#define EDReceiptValidation_CFArrayAppendValue_ ((_EDReceiptValidation_CFArrayAppendValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 111, -116, 80, EDReceiptValidation_ObfuscationFunction1, 55, -84, 32))
// Function wrapper for 'CFArrayCreateMutable'
#define EDReceiptValidation_CFArrayCreateMutable_ ((_EDReceiptValidation_CFArrayCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 24, -13, 80, EDReceiptValidation_ObfuscationFunction1, 33, 52, 32))
// Function wrapper for 'CFBundleCopyBundleURL'
#define EDReceiptValidation_CFBundleCopyBundleURL_ ((_EDReceiptValidation_CFBundleCopyBundleURL_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 111, -116, 80, EDReceiptValidation_ObfuscationFunction2, 91, 104, 32))
// Function wrapper for 'CFBundleGetIdentifier'
#define EDReceiptValidation_CFBundleGetIdentifier_ ((_EDReceiptValidation_CFBundleGetIdentifier_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 24, -13, 80, EDReceiptValidation_ObfuscationFunction3, 50, 47, 32))
// Function wrapper for 'CFBundleGetMainBundle'
#define EDReceiptValidation_CFBundleGetMainBundle_ ((_EDReceiptValidation_CFBundleGetMainBundle_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 24, -13, 80, EDReceiptValidation_ObfuscationFunction2, 87, -40, 32))
// Function wrapper for 'CFBundleGetValueForInfoDictionaryKey'
#define EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_ ((_EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 96, 28, 80, EDReceiptValidation_ObfuscationFunction4, 39, 151, 48))
// Function wrapper for 'CFDataAppendBytes'
#define EDReceiptValidation_CFDataAppendBytes_ ((_EDReceiptValidation_CFDataAppendBytes_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 96, 28, 80, EDReceiptValidation_ObfuscationFunction3, 103, 126, 32))
// Function wrapper for 'CFDataCreate'
#define EDReceiptValidation_CFDataCreate_ ((_EDReceiptValidation_CFDataCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 111, -116, 80, EDReceiptValidation_ObfuscationFunction4, 72, 173, 16))
// Function wrapper for 'CFDataCreateMutable'
#define EDReceiptValidation_CFDataCreateMutable_ ((_EDReceiptValidation_CFDataCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 96, 28, 80, EDReceiptValidation_ObfuscationFunction3, 43, 95, 32))
// Function wrapper for 'CFDataGetBytePtr'
#define EDReceiptValidation_CFDataGetBytePtr_ ((_EDReceiptValidation_CFDataGetBytePtr_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 96, 28, 80, EDReceiptValidation_ObfuscationFunction3, 102, 209, 32))
// Function wrapper for 'CFDataGetLength'
#define EDReceiptValidation_CFDataGetLength_ ((_EDReceiptValidation_CFDataGetLength_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 111, -116, 80, EDReceiptValidation_ObfuscationFunction2, 10, -60, 16))
// Function wrapper for 'CFDateFormatterCreate'
#define EDReceiptValidation_CFDateFormatterCreate_ ((_EDReceiptValidation_CFDateFormatterCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 96, 28, 80, EDReceiptValidation_ObfuscationFunction4, 100, 199, 32))
// Function wrapper for 'CFDateFormatterCreateDateFromString'
#define EDReceiptValidation_CFDateFormatterCreateDateFromString_ ((_EDReceiptValidation_CFDateFormatterCreateDateFromString_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 111, -116, 80, EDReceiptValidation_ObfuscationFunction3, 93, 190, 48))
// Function wrapper for 'CFDateFormatterSetFormat'
#define EDReceiptValidation_CFDateFormatterSetFormat_ ((_EDReceiptValidation_CFDateFormatterSetFormat_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 111, -116, 80, EDReceiptValidation_ObfuscationFunction3, 86, 229, 32))
// Function wrapper for 'CFDictionaryAddValue'
#define EDReceiptValidation_CFDictionaryAddValue_ ((_EDReceiptValidation_CFDictionaryAddValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 96, 28, 80, EDReceiptValidation_ObfuscationFunction1, 73, -6, 32))
// Function wrapper for 'CFDictionaryCreateMutable'
#define EDReceiptValidation_CFDictionaryCreateMutable_ ((_EDReceiptValidation_CFDictionaryCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 24, -13, 80, EDReceiptValidation_ObfuscationFunction4, 6, 167, 32))
// Function wrapper for 'CFDictionaryGetValue'
#define EDReceiptValidation_CFDictionaryGetValue_ ((_EDReceiptValidation_CFDictionaryGetValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 81, 109, 80, EDReceiptValidation_ObfuscationFunction1, 21, 28, 32))
// Function wrapper for 'CFEqual'
#define EDReceiptValidation_CFEqual_ ((_EDReceiptValidation_CFEqual_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 24, -13, 80, EDReceiptValidation_ObfuscationFunction4, 46, 202, 16))
// Function wrapper for 'CFNumberCreate'
#define EDReceiptValidation_CFNumberCreate_ ((_EDReceiptValidation_CFNumberCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 96, 28, 80, EDReceiptValidation_ObfuscationFunction3, 107, 229, 16))
// Function wrapper for 'CFRelease'
#define EDReceiptValidation_CFRelease_ ((_EDReceiptValidation_CFRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 24, -13, 80, EDReceiptValidation_ObfuscationFunction3, 13, 198, 16))
// Function wrapper for 'CFStringCompare'
#define EDReceiptValidation_CFStringCompare_ ((_EDReceiptValidation_CFStringCompare_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 96, 28, 80, EDReceiptValidation_ObfuscationFunction3, 92, 183, 16))
// Function wrapper for 'CFStringCreateWithBytes'
#define EDReceiptValidation_CFStringCreateWithBytes_ ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_pointers[60])
// Function wrapper for 'CFStringCreateWithCString'
#define EDReceiptValidation_CFStringCreateWithCString_ ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_pointers[80])
// Function wrapper for 'CFURLCreateCopyAppendingPathComponent'
#define EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_ ((_EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 24, -13, 80, EDReceiptValidation_ObfuscationFunction3, 27, 220, 48))
// Function wrapper for 'CFURLCreateDataAndPropertiesFromResource'
#define EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_ ((_EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 24, -13, 80, EDReceiptValidation_ObfuscationFunction4, 5, 238, 48))
// Function wrapper for 'CFURLCreateWithFileSystemPathRelativeToBase'
#define EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_ ((_EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 24, -13, 80, EDReceiptValidation_ObfuscationFunction2, 7, 108, 48))
// Function wrapper for 'CMSDecoderCopyContent'
#define EDReceiptValidation_CMSDecoderCopyContent_ ((_EDReceiptValidation_CMSDecoderCopyContent_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 57, 1, 64, EDReceiptValidation_ObfuscationFunction1, 20, -78, 32))
// Function wrapper for 'CMSDecoderCopySignerStatus'
#define EDReceiptValidation_CMSDecoderCopySignerStatus_ ((_EDReceiptValidation_CMSDecoderCopySignerStatus_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 57, 1, 64, EDReceiptValidation_ObfuscationFunction3, 70, 141, 32))
// Function wrapper for 'CMSDecoderCreate'
#define EDReceiptValidation_CMSDecoderCreate_ ((_EDReceiptValidation_CMSDecoderCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 57, 1, 64, EDReceiptValidation_ObfuscationFunction3, 8, 21, 32))
// Function wrapper for 'CMSDecoderFinalizeMessage'
#define EDReceiptValidation_CMSDecoderFinalizeMessage_ ((_EDReceiptValidation_CMSDecoderFinalizeMessage_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 78, 154, 64, EDReceiptValidation_ObfuscationFunction4, 68, 80, 32))
// Function wrapper for 'CMSDecoderGetNumSigners'
#define EDReceiptValidation_CMSDecoderGetNumSigners_ ((_EDReceiptValidation_CMSDecoderGetNumSigners_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 77, 110, 64, EDReceiptValidation_ObfuscationFunction4, 61, 134, 32))
// Function wrapper for 'CMSDecoderUpdateMessage'
#define EDReceiptValidation_CMSDecoderUpdateMessage_ ((_EDReceiptValidation_CMSDecoderUpdateMessage_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 57, 1, 64, EDReceiptValidation_ObfuscationFunction1, 36, 23, 32))
// Function wrapper for 'dlopen'
#define EDReceiptValidation_dlopen_ ((_EDReceiptValidation_dlopen_) EDReceiptValidation_pointers[108])
// Function wrapper for 'dlsym'
#define EDReceiptValidation_dlsym_ ((_EDReceiptValidation_dlsym_) EDReceiptValidation_pointers[38])
// Function wrapper for 'exit'
#define EDReceiptValidation_exit_ ((_EDReceiptValidation_exit_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 106, 47, 32, EDReceiptValidation_ObfuscationFunction3, 4, 207, 16))
// Function wrapper for 'IOBSDNameMatching'
#define EDReceiptValidation_IOBSDNameMatching_ ((_EDReceiptValidation_IOBSDNameMatching_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 94, 78, 64, EDReceiptValidation_ObfuscationFunction1, 76, 17, 32))
// Function wrapper for 'IOIteratorNext'
#define EDReceiptValidation_IOIteratorNext_ ((_EDReceiptValidation_IOIteratorNext_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 29, 198, 64, EDReceiptValidation_ObfuscationFunction3, 0, 122, 16))
// Function wrapper for 'IOMasterPort'
#define EDReceiptValidation_IOMasterPort_ ((_EDReceiptValidation_IOMasterPort_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 82, 148, 64, EDReceiptValidation_ObfuscationFunction3, 101, 78, 16))
// Function wrapper for 'IOObjectRelease'
#define EDReceiptValidation_IOObjectRelease_ ((_EDReceiptValidation_IOObjectRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 94, 78, 64, EDReceiptValidation_ObfuscationFunction3, 104, 87, 16))
// Function wrapper for 'IORegistryEntryCreateCFProperty'
#define EDReceiptValidation_IORegistryEntryCreateCFProperty_ ((_EDReceiptValidation_IORegistryEntryCreateCFProperty_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 82, 148, 64, EDReceiptValidation_ObfuscationFunction1, 89, 35, 32))
// Function wrapper for 'IORegistryEntryGetParentEntry'
#define EDReceiptValidation_IORegistryEntryGetParentEntry_ ((_EDReceiptValidation_IORegistryEntryGetParentEntry_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 29, 198, 64, EDReceiptValidation_ObfuscationFunction3, 64, 158, 32))
// Function wrapper for 'IOServiceGetMatchingServices'
#define EDReceiptValidation_IOServiceGetMatchingServices_ ((_EDReceiptValidation_IOServiceGetMatchingServices_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 82, 148, 64, EDReceiptValidation_ObfuscationFunction1, 105, -38, 32))
// Function wrapper for 'NSApplicationMain'
#define EDReceiptValidation_NSApplicationMain_ ((_EDReceiptValidation_NSApplicationMain_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 75, 64, 64, EDReceiptValidation_ObfuscationFunction3, 37, 16, 32))
// Function wrapper for 'SecAsn1CoderCreate'
#define EDReceiptValidation_SecAsn1CoderCreate_ ((_EDReceiptValidation_SecAsn1CoderCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 57, 1, 64, EDReceiptValidation_ObfuscationFunction3, 69, 107, 32))
// Function wrapper for 'SecAsn1CoderRelease'
#define EDReceiptValidation_SecAsn1CoderRelease_ ((_EDReceiptValidation_SecAsn1CoderRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 57, 1, 64, EDReceiptValidation_ObfuscationFunction2, 109, 82, 32))
// Function wrapper for 'SecAsn1Decode'
#define EDReceiptValidation_SecAsn1Decode_ ((_EDReceiptValidation_SecAsn1Decode_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 77, 110, 64, EDReceiptValidation_ObfuscationFunction1, 99, -113, 16))
// Function wrapper for 'SecPolicyCreateBasicX509'
#define EDReceiptValidation_SecPolicyCreateBasicX509_ ((_EDReceiptValidation_SecPolicyCreateBasicX509_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 78, 154, 64, EDReceiptValidation_ObfuscationFunction2, 97, -84, 32))
// Function wrapper for 'SecRequirementCreateWithString'
#define EDReceiptValidation_SecRequirementCreateWithString_ ((_EDReceiptValidation_SecRequirementCreateWithString_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 77, 110, 64, EDReceiptValidation_ObfuscationFunction1, 66, 101, 32))
// Function wrapper for 'SecRequirementCreateWithStringAndErrors'
#define EDReceiptValidation_SecRequirementCreateWithStringAndErrors_ ((_EDReceiptValidation_SecRequirementCreateWithStringAndErrors_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 57, 1, 64, EDReceiptValidation_ObfuscationFunction3, 2, 156, 48))
// Function wrapper for 'SecStaticCodeCheckValidity'
#define EDReceiptValidation_SecStaticCodeCheckValidity_ ((_EDReceiptValidation_SecStaticCodeCheckValidity_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 54, 44, 64, EDReceiptValidation_ObfuscationFunction4, 42, 205, 32))
// Function wrapper for 'SecStaticCodeCheckValidityWithErrors'
#define EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_ ((_EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 54, 44, 64, EDReceiptValidation_ObfuscationFunction2, 3, -100, 48))
// Function wrapper for 'SecStaticCodeCreateWithPath'
#define EDReceiptValidation_SecStaticCodeCreateWithPath_ ((_EDReceiptValidation_SecStaticCodeCreateWithPath_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 57, 1, 64, EDReceiptValidation_ObfuscationFunction3, 88, 213, 32))


//
// CodeBlock ObfuscationFunction
//
inline static void EDReceiptValidation_ObfuscationFunction1(const char *_p1, char *_p2, char _p3, int _p4) {
    int _i1 = 0;
    while(_i1 < _p4) { _p2[_i1] = _p1[_i1] + _p3; _i1++; }
}

inline static CFStringRef EDReceiptValidation_ObfuscationFunction1CF(const char *_p1, char _p3, int _p4) {
    char _tmp1[0x50];
    char *_tmp2 = _tmp1;
    EDReceiptValidation_ObfuscationFunction1(_p1, _tmp1, _p3, _p4);
    while(*_tmp2) { _tmp2++; }
    CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
    return _str1;
}

//
// CodeBlock ObfuscationFunction
//
inline static void EDReceiptValidation_ObfuscationFunction2(const char *_p1, char *_p2, char _p3, int _p4) {
    int _i1 = 0;
    while(_i1 < _p4) { _p2[_i1] = _p1[_i1] + _p3; _i1++; }
}

inline static CFStringRef EDReceiptValidation_ObfuscationFunction2CF(const char *_p1, char _p3, int _p4) {
    char _tmp1[0x50];
    EDReceiptValidation_ObfuscationFunction2(_p1, _tmp1, _p3, _p4);
    CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_CFStringCreateWithCString_)(kCFAllocatorDefault, _tmp1, kCFStringEncodingUTF8);
    return _str1;
}

//
// CodeBlock ObfuscationFunction
//
inline static void EDReceiptValidation_ObfuscationFunction3(const char *_p1, char *_p2, char _p3, int _p4) {
    int _i1 = 0;
    while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ _p3; _i1++; }
}

inline static CFStringRef EDReceiptValidation_ObfuscationFunction3CF(const char *_p1, char _p3, int _p4) {
    char _tmp1[0x50];
    char *_tmp2 = _tmp1;
    EDReceiptValidation_ObfuscationFunction3(_p1, _tmp1, _p3, _p4);
    while(*_tmp2) { _tmp2++; }
    CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
    return _str1;
}

//
// CodeBlock ObfuscationFunction
//
inline static void EDReceiptValidation_ObfuscationFunction4(const char *_p1, char *_p2, char _p3, int _p4) {
    int _i1 = 0;
    while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ _p3; _i1++; }
}

inline static CFStringRef EDReceiptValidation_ObfuscationFunction4CF(const char *_p1, char _p3, int _p4) {
    char _tmp1[0x50];
    EDReceiptValidation_ObfuscationFunction4(_p1, _tmp1, _p3, _p4);
    CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_CFStringCreateWithCString_)(kCFAllocatorDefault, _tmp1, kCFStringEncodingUTF8);
    return _str1;
}

//
// CodeBlock LookupFunction
//
inline static void *EDReceiptValidation_LookupFunction1(EDReceiptValidation_decrypt _func1, int _index1, char _seed1, int _len1, EDReceiptValidation_decrypt _func2, int _index2, char _seed2, int _len2) {
    char tmp[0x50];
    // Load the library if needed
    if (EDReceiptValidation_pointers[_index1] == NULL) {
        _func1(EDReceiptValidation_strings[_index1], tmp, _seed1, _len1);
        EDReceiptValidation_pointers[_index1] = ((_EDReceiptValidation_dlopen_) EDReceiptValidation_dlopen_)(tmp, RTLD_LAZY);
    }
    // Locate the function if needed
    if (EDReceiptValidation_pointers[_index2] == NULL) {
        _func2(EDReceiptValidation_strings[_index2], tmp, _seed2, _len2);
        EDReceiptValidation_pointers[_index2] = ((_EDReceiptValidation_dlsym_) EDReceiptValidation_dlsym_)(EDReceiptValidation_pointers[_index1], tmp);
    }
    return EDReceiptValidation_pointers[_index2];
}

//
// CodeBlock GetMainBundle
//
#if DEBUG
inline static void EDReceiptValidation_GetMainBundle1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    // Retrieve the main bundle
    EDReceiptValidation_ctx->EDReceiptValidation_mainBundle = EDReceiptValidation_CFBundleGetMainBundle_();
    if (!EDReceiptValidation_ctx->EDReceiptValidation_mainBundle) {
        EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
    }
}
#else
#define EDReceiptValidation_GetMainBundle1(EDReceiptValidation_ctx) { \
    EDReceiptValidation_ctx->EDReceiptValidation_mainBundle = EDReceiptValidation_CFBundleGetMainBundle_(); \
    if (!EDReceiptValidation_ctx->EDReceiptValidation_mainBundle) { \
        EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
    } \
}
#endif

//
// CodeBlock LoadReceipt
//
#if DEBUG
inline static void EDReceiptValidation_LoadReceipt1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    CFStringRef _str1;
    CFURLRef _url1, _url2;
    SInt32 _errorCode;
    volatile int _code = 135; _code -= 78; _code *= 3; _code += 2;
    // Compute the path to the receipt
    _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
    _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[28]), -74, 16);
    _url2 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url1, _str1, true);
    EDReceiptValidation_CFRelease_(_str1);
    EDReceiptValidation_CFRelease_(_url1);
    _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[35]), 63, 16);
    _url1 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url2, _str1, true);
    EDReceiptValidation_CFRelease_(_str1);
    EDReceiptValidation_CFRelease_(_url2);
    _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[98]), -3, 16);
    _url2 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url1, _str1, false);
    EDReceiptValidation_CFRelease_(_str1);
    EDReceiptValidation_CFRelease_(_url1);
    // Load the receipt data
    if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptData);
    EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_(kCFAllocatorDefault, _url2, (CFDataRef *) &(EDReceiptValidation_ctx->EDReceiptValidation_receiptData), NULL, NULL, &_errorCode);
    if (_errorCode) {
        EDReceiptValidation_exit_(_code);
           EDReceiptValidation_CFRelease_(_str1);
    }
    EDReceiptValidation_CFRelease_(_url2);
}
#else
#define EDReceiptValidation_LoadReceipt1(EDReceiptValidation_ctx) { \
    CFStringRef _str1; \
    CFURLRef _url1, _url2; \
    SInt32 _errorCode; \
    volatile int _code = 124; _code -= 67; _code *= 3; _code += 2; \
    _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
    _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[28]), -74, 16); \
    _url2 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url1, _str1, true); \
    EDReceiptValidation_CFRelease_(_str1); \
    EDReceiptValidation_CFRelease_(_url1); \
    _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[35]), 63, 16); \
    _url1 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url2, _str1, true); \
    EDReceiptValidation_CFRelease_(_str1); \
    EDReceiptValidation_CFRelease_(_url2); \
    _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[98]), -3, 16); \
    _url2 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url1, _str1, false); \
    EDReceiptValidation_CFRelease_(_str1); \
    EDReceiptValidation_CFRelease_(_url1); \
    if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptData); \
    EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_(kCFAllocatorDefault, _url2, (CFDataRef *) &(EDReceiptValidation_ctx->EDReceiptValidation_receiptData), NULL, NULL, &_errorCode); \
    if (_errorCode) { \
        EDReceiptValidation_exit_(_code); \
           EDReceiptValidation_CFRelease_(_str1); \
    } \
    EDReceiptValidation_CFRelease_(_url2); \
}
#endif

//
// CodeBlock GetMacAddress
//
#if DEBUG
inline static void EDReceiptValidation_GetMacAddress1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    kern_return_t _kernResult;
    mach_port_t _master_port;
    CFMutableDictionaryRef _matchingDict;
    io_iterator_t _iterator;
    io_object_t _service, _parentService;
    volatile int _code = 126; _code -= 69; _code *= 3; _code += 2;
    char *_str1;
    CFStringRef _str2;
    _str2 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[112]), 11, 16); 
    // Open a MACH port
    _kernResult = EDReceiptValidation_IOMasterPort_(MACH_PORT_NULL, &_master_port);
    if (_kernResult != KERN_SUCCESS) {
        EDReceiptValidation_exit_(_code);
        goto EDReceiptValidation_GetMacAddress1__bail;
        EDReceiptValidation_CFRelease_(_str2);
    }
    // Create a search for primary interface
 char _str1_[0x50];
 EDReceiptValidation_ObfuscationFunction3((EDReceiptValidation_strings[51]), _str1_, 159, 16);
 _str1 = _str1_;
    _matchingDict = EDReceiptValidation_IOBSDNameMatching_(_master_port, 0, _str1);
    if (!_matchingDict) {
        EDReceiptValidation_exit_(_code);
        goto EDReceiptValidation_GetMacAddress1__bail;
        EDReceiptValidation_CFRelease_(_str1);
    }
    // Perform the search
    _kernResult = EDReceiptValidation_IOServiceGetMatchingServices_(_master_port, _matchingDict, &_iterator);
    if (_kernResult != KERN_SUCCESS) {
        EDReceiptValidation_exit_(_code);
        goto EDReceiptValidation_GetMacAddress1__bail;
        EDReceiptValidation_CFRelease_(_str1);
    }
    // Iterate over the result
    while((_service = EDReceiptValidation_IOIteratorNext_(_iterator)) != 0) {
        _kernResult = EDReceiptValidation_IORegistryEntryGetParentEntry_(_service, kIOServicePlane, &_parentService);
        if (_kernResult == KERN_SUCCESS) {
            if (EDReceiptValidation_ctx->EDReceiptValidation_macData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_macData);
            EDReceiptValidation_ctx->EDReceiptValidation_macData = (CFDataRef) EDReceiptValidation_IORegistryEntryCreateCFProperty_(_parentService, _str2, kCFAllocatorDefault, 0);
            EDReceiptValidation_IOObjectRelease_(_parentService);
        }
        EDReceiptValidation_IOObjectRelease_(_iterator);
        EDReceiptValidation_IOObjectRelease_(_service);
    }
EDReceiptValidation_GetMacAddress1__bail:
    EDReceiptValidation_CFRelease_(_str2);
}
#else
#define EDReceiptValidation_GetMacAddress1(EDReceiptValidation_ctx) { \
    kern_return_t _kernResult; \
    mach_port_t _master_port; \
    CFMutableDictionaryRef _matchingDict; \
    io_iterator_t _iterator; \
    io_object_t _service, _parentService; \
    volatile int _code = 19; _code -= 4; _code *= 11; _code += 8; \
    char *_str1; \
    CFStringRef _str2; \
    _str2 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[112]), 11, 16);  \
    _kernResult = EDReceiptValidation_IOMasterPort_(MACH_PORT_NULL, &_master_port); \
    if (_kernResult != KERN_SUCCESS) { \
        EDReceiptValidation_exit_(_code); \
        goto EDReceiptValidation_GetMacAddress1__bail; \
        EDReceiptValidation_CFRelease_(_str2); \
    } \
 char _str1_[0x50]; \
 EDReceiptValidation_ObfuscationFunction3((EDReceiptValidation_strings[51]), _str1_, 159, 16); \
 _str1 = _str1_; \
    _matchingDict = EDReceiptValidation_IOBSDNameMatching_(_master_port, 0, _str1); \
    if (!_matchingDict) { \
        EDReceiptValidation_exit_(_code); \
        goto EDReceiptValidation_GetMacAddress1__bail; \
        EDReceiptValidation_CFRelease_(_str1); \
    } \
    _kernResult = EDReceiptValidation_IOServiceGetMatchingServices_(_master_port, _matchingDict, &_iterator); \
    if (_kernResult != KERN_SUCCESS) { \
        EDReceiptValidation_exit_(_code); \
        goto EDReceiptValidation_GetMacAddress1__bail; \
        EDReceiptValidation_CFRelease_(_str1); \
    } \
    while((_service = EDReceiptValidation_IOIteratorNext_(_iterator)) != 0) { \
        _kernResult = EDReceiptValidation_IORegistryEntryGetParentEntry_(_service, kIOServicePlane, &_parentService); \
        if (_kernResult == KERN_SUCCESS) { \
            if (EDReceiptValidation_ctx->EDReceiptValidation_macData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_macData); \
            EDReceiptValidation_ctx->EDReceiptValidation_macData = (CFDataRef) EDReceiptValidation_IORegistryEntryCreateCFProperty_(_parentService, _str2, kCFAllocatorDefault, 0); \
            EDReceiptValidation_IOObjectRelease_(_parentService); \
        } \
        EDReceiptValidation_IOObjectRelease_(_iterator); \
        EDReceiptValidation_IOObjectRelease_(_service); \
    } \
EDReceiptValidation_GetMacAddress1__bail: \
    EDReceiptValidation_CFRelease_(_str2); \
}
#endif

//
// CodeBlock GetReceiptInformation
//
#if DEBUG
//
// Extract an ASN.1 INTEGER value
//
inline static void EDReceiptValidation_GetReceiptInformation1X(const EDReceiptValidation_ASN1_DATA *_asn1data, int *_payload) {
    uint8 *_ptr = _asn1data->data;
    size_t _size = _asn1data->length;
    *_payload = 0;
    do {
        *_payload <<= 8;
        *_payload += (uint8) *_ptr++;
    } while(--_size > 0);
}
#else
inline static void EDReceiptValidation_GetReceiptInformation1X(const EDReceiptValidation_ASN1_DATA *_asn1data, int *_payload) { \
    uint8 *_ptr = _asn1data->data; \
    size_t _size = _asn1data->length; \
    *_payload = 0; \
    do { \
        *_payload <<= 8; \
        *_payload += (uint8) *_ptr++; \
    } while(--_size > 0); \
}
#endif

#if DEBUG
inline static void EDReceiptValidation_GetReceiptInformation1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    EDReceiptValidation_Parsing _receiptContext, _inappContext, *_currentContext;
    CMSDecoderRef _decoder = NULL;
    CFDataRef _content = NULL;
    CFNumberRef _key = NULL;
    SecAsn1CoderRef _asn1decoder = NULL;
    OSStatus _status;
    EDReceiptValidation_Payload _payload = { NULL };
    EDReceiptValidation_ReceiptAttribute *_current;
    CFDateFormatterRef _formatter;
    EDReceiptValidation_ReceiptAttributeType _key1, _key2;
    CFTypeRef _value1, _value2;
    EDReceiptValidation_ASN1_DATA _asn1data;
    int _type, _integer;
    // Create a decoder for the encrypted message
    _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder);
    if (_status) {
        goto EDReceiptValidation_GetReceiptInformation1__bail;
    }
    // Decrypt the message (update pass)
    _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData));
    if (_status) {
        goto EDReceiptValidation_GetReceiptInformation1__bail;
    }
    // Decrypt the message (final pass)
    _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder);
    if (_status) {
        goto EDReceiptValidation_GetReceiptInformation1__bail;
    }
    // Get the message content
    _status = EDReceiptValidation_CMSDecoderCopyContent_(_decoder, &_content);
    if (_status) {
        goto EDReceiptValidation_GetReceiptInformation1__bail;
    }
    // Create the ASN.1 parser
    _status = EDReceiptValidation_SecAsn1CoderCreate_(&_asn1decoder);
    if (_status) {
        goto EDReceiptValidation_GetReceiptInformation1__bail;
    }
    // Create a formatter to parse ISO-3339 dates
    _formatter = EDReceiptValidation_CFDateFormatterCreate_(kCFAllocatorDefault, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    _value1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[95]), -63, 48); 
    EDReceiptValidation_CFDateFormatterSetFormat_(_formatter, (CFStringRef) _value1);
    EDReceiptValidation_CFRelease_(_value1);
    // Create the receipt parsing context                
    _receiptContext.EDReceiptValidation_source = EDReceiptValidation_CFDataGetBytePtr_(_content);
    _receiptContext.EDReceiptValidation_length = EDReceiptValidation_CFDataGetLength_(_content);
    _receiptContext.EDReceiptValidation_dictionary = NULL;
    _receiptContext.EDReceiptValidation_parent = NULL;
    _currentContext = &_receiptContext;
    while(true) {
        if (!_currentContext->EDReceiptValidation_dictionary) {
            // Create the target dictionary
            _currentContext->EDReceiptValidation_dictionary = EDReceiptValidation_CFDictionaryCreateMutable_(kCFAllocatorDefault, (CFIndex) 0x50, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            // Decode the receipt payload from ASN.1
            _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _currentContext->EDReceiptValidation_source, _currentContext->EDReceiptValidation_length, EDReceiptValidation_kSetOfReceiptAttributeTemplate, &_payload);
            if (_status) {
                goto EDReceiptValidation_GetReceiptInformation1__bail;
            }
            _currentContext->EDReceiptValidation_pointer = _payload.attributes;
        }
        // Iterate over attributes
        while(*_currentContext->EDReceiptValidation_pointer) {
            _current = *_currentContext->EDReceiptValidation_pointer++;
            EDReceiptValidation_GetReceiptInformation1X((&_current->type), (&_type));
            _key1 = _key2 = EDReceiptValidation_DataStoreNone;
            _value1 = _value2 = NULL;
            // Extract the value
            switch(_type) {
                // Attributes encoded as ASN.1 UTF8STRING
                case EDReceiptValidation_ReceiptAttributeTypeBundleId:
                case EDReceiptValidation_ReceiptAttributeTypeBundleVersion:
                case EDReceiptValidation_InAppAttributeTypeProductIdentifer:
                case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer:
                case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer:
                    _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1UTF8StringTemplate, &_asn1data);
                    if (_status) {
                        goto EDReceiptValidation_GetReceiptInformation1__bail;
                    }
                    _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingUTF8, false);
                    _value2 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length);
                    break;
                // Attributes encoded as ASN.1 IA5STRING
                case EDReceiptValidation_InAppAttributeTypePurchaseDate:
                case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate:
                    _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IA5StringTemplate, &_asn1data);
                    if (_status) {
                        goto EDReceiptValidation_GetReceiptInformation1__bail;
                    }
                    _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingASCII, false);
                    _value2 = EDReceiptValidation_CFDateFormatterCreateDateFromString_(kCFAllocatorDefault, _formatter, (CFStringRef) _value1, NULL);
                    break;
                // Attributes encoded as ASN.1 INTEGER
                case EDReceiptValidation_InAppAttributeTypeQuantity:
                    _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IntegerTemplate, &_asn1data);
                    if (_status) {
                        goto EDReceiptValidation_GetReceiptInformation1__bail;
                    }
                    EDReceiptValidation_GetReceiptInformation1X((&_asn1data), (&_integer));
                    _value1 = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_integer);
                    break;
                    // Attributes encoded as ASN.1 OCTETSTRING
                case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue:
                case EDReceiptValidation_ReceiptAttributeTypeHash:
                    _value1 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length);
                    break;
                default:
                    break;
            }
            // Assign the key for storage
            switch(_type) {
                case EDReceiptValidation_ReceiptAttributeTypeBundleId:
                    _key1 = EDReceiptValidation_DataStoreBundleId;
                    _key2 = EDReceiptValidation_DataStoreBundleIdData;
                    break;
                case EDReceiptValidation_ReceiptAttributeTypeBundleVersion:
                    _key1 = EDReceiptValidation_DataStoreBundleVersion;
                    _key2 = EDReceiptValidation_DataStoreBundleVersionData;
                    break;
                case EDReceiptValidation_InAppAttributeTypeProductIdentifer:
                    _key1 = EDReceiptValidation_InAppAttributeTypeProductIdentifer;
                    break;
                case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer:
                    _key1 = EDReceiptValidation_InAppAttributeTypeTransactionIdentifer;
                    break;
                case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer:
                    _key1 = EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer;
                    break;
                case EDReceiptValidation_InAppAttributeTypePurchaseDate:
                    _key2 = EDReceiptValidation_InAppAttributeTypePurchaseDate;
                    break;
                case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate:
                    _key2 = EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate;
                    break;
                case EDReceiptValidation_InAppAttributeTypeQuantity:
                    _key1 = EDReceiptValidation_InAppAttributeTypeQuantity;
                    break;
                case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue:
                    _key1 = EDReceiptValidation_DataStoreOpaqueValue;
                    break;
                case EDReceiptValidation_ReceiptAttributeTypeHash:
                    _key1 = EDReceiptValidation_DataStoreHash;
                    break;
                default:
                    break;
            }
            // Store data if any
            if (_key1 != EDReceiptValidation_DataStoreNone) {
                _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1);
                EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value1);
                EDReceiptValidation_CFRelease_(_key);
            }
            // Store data if any
            if (_key2 != EDReceiptValidation_DataStoreNone) {
                _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key2);
                EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value2);
                EDReceiptValidation_CFRelease_(_key);
            }
            if (_value1) EDReceiptValidation_CFRelease_(_value1);
            if (_value2) EDReceiptValidation_CFRelease_(_value2);
            // Step into for InApp purchases
            if (_type == EDReceiptValidation_ReceiptAttributeTypeInAppPurchase) {
                _inappContext.EDReceiptValidation_source = _current->value.data;
                _inappContext.EDReceiptValidation_length = _current->value.length;
                _inappContext.EDReceiptValidation_dictionary = NULL;
                _inappContext.EDReceiptValidation_parent = _currentContext;
                _currentContext = &_inappContext;
                break;
            }
        }
        if (!_currentContext->EDReceiptValidation_dictionary) {
            continue;
        }
        // Step out for InApp purchases
        if (_currentContext->EDReceiptValidation_parent) {
            _key1 = EDReceiptValidation_DataStoreInAppPurchase;
            _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1);
            _value1 = EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key);
            if (!_value1) {
                _value1 = EDReceiptValidation_CFArrayCreateMutable_(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key, _value1);
                EDReceiptValidation_CFRelease_(_value1);
            }
            EDReceiptValidation_CFArrayAppendValue_((CFMutableArrayRef) _value1, _currentContext->EDReceiptValidation_dictionary);
            EDReceiptValidation_CFRelease_(_currentContext->EDReceiptValidation_dictionary);
            EDReceiptValidation_CFRelease_(_key);
            _currentContext = _currentContext->EDReceiptValidation_parent;
        }
        if (*_currentContext->EDReceiptValidation_pointer) {
            continue;
        }
        break;
    }
    if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict);
    EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = _receiptContext.EDReceiptValidation_dictionary;
EDReceiptValidation_GetReceiptInformation1__bail:
    if (_formatter) EDReceiptValidation_CFRelease_(_formatter);
    if (_asn1decoder) EDReceiptValidation_SecAsn1CoderRelease_(_asn1decoder);
    if (_content) EDReceiptValidation_CFRelease_(_content);
    if (_decoder) EDReceiptValidation_CFRelease_(_decoder);
}
#else
#define EDReceiptValidation_GetReceiptInformation1(EDReceiptValidation_ctx) { \
    EDReceiptValidation_Parsing _receiptContext, _inappContext, *_currentContext; \
    CMSDecoderRef _decoder = NULL; \
    CFDataRef _content = NULL; \
    CFNumberRef _key = NULL; \
    SecAsn1CoderRef _asn1decoder = NULL; \
    OSStatus _status; \
    EDReceiptValidation_Payload _payload = { NULL }; \
    EDReceiptValidation_ReceiptAttribute *_current; \
    CFDateFormatterRef _formatter; \
    EDReceiptValidation_ReceiptAttributeType _key1, _key2; \
    CFTypeRef _value1, _value2; \
    EDReceiptValidation_ASN1_DATA _asn1data; \
    int _type, _integer; \
    _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder); \
    if (_status) { \
        goto EDReceiptValidation_GetReceiptInformation1__bail; \
    } \
    _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData)); \
    if (_status) { \
        goto EDReceiptValidation_GetReceiptInformation1__bail; \
    } \
    _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder); \
    if (_status) { \
        goto EDReceiptValidation_GetReceiptInformation1__bail; \
    } \
    _status = EDReceiptValidation_CMSDecoderCopyContent_(_decoder, &_content); \
    if (_status) { \
        goto EDReceiptValidation_GetReceiptInformation1__bail; \
    } \
    _status = EDReceiptValidation_SecAsn1CoderCreate_(&_asn1decoder); \
    if (_status) { \
        goto EDReceiptValidation_GetReceiptInformation1__bail; \
    } \
    _formatter = EDReceiptValidation_CFDateFormatterCreate_(kCFAllocatorDefault, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
    _value1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[95]), -63, 48);  \
    EDReceiptValidation_CFDateFormatterSetFormat_(_formatter, (CFStringRef) _value1); \
    EDReceiptValidation_CFRelease_(_value1); \
    _receiptContext.EDReceiptValidation_source = EDReceiptValidation_CFDataGetBytePtr_(_content); \
    _receiptContext.EDReceiptValidation_length = EDReceiptValidation_CFDataGetLength_(_content); \
    _receiptContext.EDReceiptValidation_dictionary = NULL; \
    _receiptContext.EDReceiptValidation_parent = NULL; \
    _currentContext = &_receiptContext; \
    while(true) { \
        if (!_currentContext->EDReceiptValidation_dictionary) { \
            _currentContext->EDReceiptValidation_dictionary = EDReceiptValidation_CFDictionaryCreateMutable_(kCFAllocatorDefault, (CFIndex) 0x50, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks); \
            _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _currentContext->EDReceiptValidation_source, _currentContext->EDReceiptValidation_length, EDReceiptValidation_kSetOfReceiptAttributeTemplate, &_payload); \
            if (_status) { \
                goto EDReceiptValidation_GetReceiptInformation1__bail; \
            } \
            _currentContext->EDReceiptValidation_pointer = _payload.attributes; \
        } \
        while(*_currentContext->EDReceiptValidation_pointer) { \
            _current = *_currentContext->EDReceiptValidation_pointer++; \
            EDReceiptValidation_GetReceiptInformation1X((&_current->type), (&_type)); \
            _key1 = _key2 = EDReceiptValidation_DataStoreNone; \
            _value1 = _value2 = NULL; \
            switch(_type) { \
                case EDReceiptValidation_ReceiptAttributeTypeBundleId: \
                case EDReceiptValidation_ReceiptAttributeTypeBundleVersion: \
                case EDReceiptValidation_InAppAttributeTypeProductIdentifer: \
                case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer: \
                case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer: \
                    _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1UTF8StringTemplate, &_asn1data); \
                    if (_status) { \
                        goto EDReceiptValidation_GetReceiptInformation1__bail; \
                    } \
                    _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingUTF8, false); \
                    _value2 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length); \
                    break; \
                case EDReceiptValidation_InAppAttributeTypePurchaseDate: \
                case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate: \
                    _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IA5StringTemplate, &_asn1data); \
                    if (_status) { \
                        goto EDReceiptValidation_GetReceiptInformation1__bail; \
                    } \
                    _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingASCII, false); \
                    _value2 = EDReceiptValidation_CFDateFormatterCreateDateFromString_(kCFAllocatorDefault, _formatter, (CFStringRef) _value1, NULL); \
                    break; \
                case EDReceiptValidation_InAppAttributeTypeQuantity: \
                    _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IntegerTemplate, &_asn1data); \
                    if (_status) { \
                        goto EDReceiptValidation_GetReceiptInformation1__bail; \
                    } \
                    EDReceiptValidation_GetReceiptInformation1X((&_asn1data), (&_integer)); \
                    _value1 = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_integer); \
                    break; \
                case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue: \
                case EDReceiptValidation_ReceiptAttributeTypeHash: \
                    _value1 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length); \
                    break; \
                default: \
                    break; \
            } \
            switch(_type) { \
                case EDReceiptValidation_ReceiptAttributeTypeBundleId: \
                    _key1 = EDReceiptValidation_DataStoreBundleId; \
                    _key2 = EDReceiptValidation_DataStoreBundleIdData; \
                    break; \
                case EDReceiptValidation_ReceiptAttributeTypeBundleVersion: \
                    _key1 = EDReceiptValidation_DataStoreBundleVersion; \
                    _key2 = EDReceiptValidation_DataStoreBundleVersionData; \
                    break; \
                case EDReceiptValidation_InAppAttributeTypeProductIdentifer: \
                    _key1 = EDReceiptValidation_InAppAttributeTypeProductIdentifer; \
                    break; \
                case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer: \
                    _key1 = EDReceiptValidation_InAppAttributeTypeTransactionIdentifer; \
                    break; \
                case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer: \
                    _key1 = EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer; \
                    break; \
                case EDReceiptValidation_InAppAttributeTypePurchaseDate: \
                    _key2 = EDReceiptValidation_InAppAttributeTypePurchaseDate; \
                    break; \
                case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate: \
                    _key2 = EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate; \
                    break; \
                case EDReceiptValidation_InAppAttributeTypeQuantity: \
                    _key1 = EDReceiptValidation_InAppAttributeTypeQuantity; \
                    break; \
                case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue: \
                    _key1 = EDReceiptValidation_DataStoreOpaqueValue; \
                    break; \
                case EDReceiptValidation_ReceiptAttributeTypeHash: \
                    _key1 = EDReceiptValidation_DataStoreHash; \
                    break; \
                default: \
                    break; \
            } \
            if (_key1 != EDReceiptValidation_DataStoreNone) { \
                _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1); \
                EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value1); \
                EDReceiptValidation_CFRelease_(_key); \
            } \
            if (_key2 != EDReceiptValidation_DataStoreNone) { \
                _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key2); \
                EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value2); \
                EDReceiptValidation_CFRelease_(_key); \
            } \
            if (_value1) EDReceiptValidation_CFRelease_(_value1); \
            if (_value2) EDReceiptValidation_CFRelease_(_value2); \
            if (_type == EDReceiptValidation_ReceiptAttributeTypeInAppPurchase) { \
                _inappContext.EDReceiptValidation_source = _current->value.data; \
                _inappContext.EDReceiptValidation_length = _current->value.length; \
                _inappContext.EDReceiptValidation_dictionary = NULL; \
                _inappContext.EDReceiptValidation_parent = _currentContext; \
                _currentContext = &_inappContext; \
                break; \
            } \
        } \
        if (!_currentContext->EDReceiptValidation_dictionary) { \
            continue; \
        } \
        if (_currentContext->EDReceiptValidation_parent) { \
            _key1 = EDReceiptValidation_DataStoreInAppPurchase; \
            _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1); \
            _value1 = EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key); \
            if (!_value1) { \
                _value1 = EDReceiptValidation_CFArrayCreateMutable_(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks); \
                EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key, _value1); \
                EDReceiptValidation_CFRelease_(_value1); \
            } \
            EDReceiptValidation_CFArrayAppendValue_((CFMutableArrayRef) _value1, _currentContext->EDReceiptValidation_dictionary); \
            EDReceiptValidation_CFRelease_(_currentContext->EDReceiptValidation_dictionary); \
            EDReceiptValidation_CFRelease_(_key); \
            _currentContext = _currentContext->EDReceiptValidation_parent; \
        } \
        if (*_currentContext->EDReceiptValidation_pointer) { \
            continue; \
        } \
        break; \
    } \
    if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict); \
    EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = _receiptContext.EDReceiptValidation_dictionary; \
EDReceiptValidation_GetReceiptInformation1__bail: \
    if (_formatter) EDReceiptValidation_CFRelease_(_formatter); \
    if (_asn1decoder) EDReceiptValidation_SecAsn1CoderRelease_(_asn1decoder); \
    if (_content) EDReceiptValidation_CFRelease_(_content); \
    if (_decoder) EDReceiptValidation_CFRelease_(_decoder); \
}
#endif

//
// CodeBlock CheckBundleIdentifier
//
#if DEBUG
inline static void EDReceiptValidation_CheckBundleIdentifier1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[11]), 102, 32);
    CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[48]), 132, 32);
    volatile int _code = 49; _code -= 15; _code *= 5; _code += 3;
    CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2);
    if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) {
        EDReceiptValidation_exit_(_code);
        EDReceiptValidation_CFRelease_(_str1);
        EDReceiptValidation_CFRelease_(_str2);
    }
    EDReceiptValidation_CFRelease_(_str2);
    EDReceiptValidation_CFRelease_(_str1);
}
#else
#define EDReceiptValidation_CheckBundleIdentifier1(EDReceiptValidation_ctx) { \
    CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[11]), 102, 32); \
    CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[48]), 132, 32); \
    volatile int _code = 130; _code -= 73; _code *= 3; _code += 2; \
    CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2); \
    if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) { \
        EDReceiptValidation_exit_(_code); \
        EDReceiptValidation_CFRelease_(_str1); \
        EDReceiptValidation_CFRelease_(_str2); \
    } \
    EDReceiptValidation_CFRelease_(_str2); \
    EDReceiptValidation_CFRelease_(_str1); \
}
#endif

//
// CodeBlock CheckBundleVersion
//
#if DEBUG
inline static void EDReceiptValidation_CheckBundleVersion1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    volatile int _code = 117; _code -= 60; _code *= 3; _code += 2;
    CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[25]), 212, 16);
    CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[110]), 175, 32);
    CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2);
    if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) {
        EDReceiptValidation_exit_(_code);
        EDReceiptValidation_CFRelease_(_str1);
        EDReceiptValidation_CFRelease_(_str2);
    }
    EDReceiptValidation_CFRelease_(_str2);
    EDReceiptValidation_CFRelease_(_str1);
}
#else
#define EDReceiptValidation_CheckBundleVersion1(EDReceiptValidation_ctx) { \
    volatile int _code = 21; _code -= 4; _code *= 10; _code += 3; \
    CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[25]), 212, 16); \
    CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[110]), 175, 32); \
    CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2); \
    if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) { \
        EDReceiptValidation_exit_(_code); \
        EDReceiptValidation_CFRelease_(_str1); \
        EDReceiptValidation_CFRelease_(_str2); \
    } \
    EDReceiptValidation_CFRelease_(_str2); \
    EDReceiptValidation_CFRelease_(_str1); \
}
#endif

//
// CodeBlock CheckBundleSignature
//
#if DEBUG
inline static void EDReceiptValidation_CheckBundleSignature1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    CFStringRef _str1 = NULL;
    CFURLRef _url1 = NULL;
    SecStaticCodeRef _staticCode = NULL;
    SecRequirementRef _requirement = NULL;
    OSStatus _status;
    CFErrorRef _error = NULL;
    _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
    _status = EDReceiptValidation_SecStaticCodeCreateWithPath_(_url1, kSecCSDefaultFlags, &_staticCode);
    if (_status != errSecSuccess) {
        goto EDReceiptValidation_CheckBundleSignature1__bail;
    }
    _str1 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[84]), 39, 32);
    _status = EDReceiptValidation_SecRequirementCreateWithString_(_str1, kSecCSDefaultFlags, &_requirement);
    if (_status != errSecSuccess) {
        goto EDReceiptValidation_CheckBundleSignature1__bail;
    }
    _status = EDReceiptValidation_SecStaticCodeCheckValidity_(_staticCode, kSecCSDefaultFlags, _requirement);
    if (_status != errSecSuccess) {
        goto EDReceiptValidation_CheckBundleSignature1__bail;
    }
EDReceiptValidation_CheckBundleSignature1__bail:
    if (_error) EDReceiptValidation_CFRelease_(_error);
    if (_staticCode) EDReceiptValidation_CFRelease_(_staticCode);
    if (_requirement) EDReceiptValidation_CFRelease_(_requirement);
    if (_str1) EDReceiptValidation_CFRelease_(_str1);
    if (_url1) EDReceiptValidation_CFRelease_(_url1);
}
#else
#define EDReceiptValidation_CheckBundleSignature1(EDReceiptValidation_ctx) { \
    CFStringRef _str1 = NULL; \
    CFURLRef _url1 = NULL; \
    SecStaticCodeRef _staticCode = NULL; \
    SecRequirementRef _requirement = NULL; \
    OSStatus _status; \
    CFErrorRef _error = NULL; \
    _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
    _status = EDReceiptValidation_SecStaticCodeCreateWithPath_(_url1, kSecCSDefaultFlags, &_staticCode); \
    if (_status != errSecSuccess) { \
        goto EDReceiptValidation_CheckBundleSignature1__bail; \
    } \
    _str1 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[84]), 39, 32); \
    _status = EDReceiptValidation_SecRequirementCreateWithString_(_str1, kSecCSDefaultFlags, &_requirement); \
    if (_status != errSecSuccess) { \
        goto EDReceiptValidation_CheckBundleSignature1__bail; \
    } \
    _status = EDReceiptValidation_SecStaticCodeCheckValidity_(_staticCode, kSecCSDefaultFlags, _requirement); \
    if (_status != errSecSuccess) { \
        goto EDReceiptValidation_CheckBundleSignature1__bail; \
    } \
EDReceiptValidation_CheckBundleSignature1__bail: \
    if (_error) EDReceiptValidation_CFRelease_(_error); \
    if (_staticCode) EDReceiptValidation_CFRelease_(_staticCode); \
    if (_requirement) EDReceiptValidation_CFRelease_(_requirement); \
    if (_str1) EDReceiptValidation_CFRelease_(_str1); \
    if (_url1) EDReceiptValidation_CFRelease_(_url1); \
}
#endif

//
// CodeBlock CheckReceiptSignature
//
#if DEBUG
inline static void EDReceiptValidation_CheckReceiptSignature1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    CMSDecoderRef _decoder = NULL;
    SecTrustRef _trustRef = NULL;
    SecPolicyRef _policyRef = NULL;
    volatile int _code = 71; _code -= 28; _code *= 4; _code += 1;
    OSStatus _status;
    _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder);
    if (_status) {
        EDReceiptValidation_exit_(_code);
        goto EDReceiptValidation_CheckReceiptSignature1__bail;
    }
    _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData));
    if (_status) {
        EDReceiptValidation_exit_(_code);
        EDReceiptValidation_CFRelease_(_policyRef);
        goto EDReceiptValidation_CheckReceiptSignature1__bail;
    }
    _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder);
    if (_status) {
        EDReceiptValidation_exit_(_code);
        goto EDReceiptValidation_CheckReceiptSignature1__bail;
    }
    CMSSignerStatus _signerStatus;
    OSStatus _certVerifyresult;
    _policyRef = EDReceiptValidation_SecPolicyCreateBasicX509_();
    _status = EDReceiptValidation_CMSDecoderCopySignerStatus_(_decoder, 0, _policyRef, TRUE, &_signerStatus, &_trustRef, &_certVerifyresult);
    if (_status) {
        EDReceiptValidation_exit_(_code);
        goto EDReceiptValidation_CheckReceiptSignature1__bail;
    }
EDReceiptValidation_CheckReceiptSignature1__bail:
    if (_policyRef) EDReceiptValidation_CFRelease_(_policyRef);
    if (_trustRef) EDReceiptValidation_CFRelease_(_trustRef);
    if (_decoder) EDReceiptValidation_CFRelease_(_decoder);
}
#else
#define EDReceiptValidation_CheckReceiptSignature1(EDReceiptValidation_ctx) { \
    CMSDecoderRef _decoder = NULL; \
    SecTrustRef _trustRef = NULL; \
    SecPolicyRef _policyRef = NULL; \
    volatile int _code = 42; _code -= 14; _code *= 6; _code += 5; \
    OSStatus _status; \
    _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder); \
    if (_status) { \
        EDReceiptValidation_exit_(_code); \
        goto EDReceiptValidation_CheckReceiptSignature1__bail; \
    } \
    _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData)); \
    if (_status) { \
        EDReceiptValidation_exit_(_code); \
        EDReceiptValidation_CFRelease_(_policyRef); \
        goto EDReceiptValidation_CheckReceiptSignature1__bail; \
    } \
    _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder); \
    if (_status) { \
        EDReceiptValidation_exit_(_code); \
        goto EDReceiptValidation_CheckReceiptSignature1__bail; \
    } \
    CMSSignerStatus _signerStatus; \
    OSStatus _certVerifyresult; \
    _policyRef = EDReceiptValidation_SecPolicyCreateBasicX509_(); \
    _status = EDReceiptValidation_CMSDecoderCopySignerStatus_(_decoder, 0, _policyRef, TRUE, &_signerStatus, &_trustRef, &_certVerifyresult); \
    if (_status) { \
        EDReceiptValidation_exit_(_code); \
        goto EDReceiptValidation_CheckReceiptSignature1__bail; \
    } \
EDReceiptValidation_CheckReceiptSignature1__bail: \
    if (_policyRef) EDReceiptValidation_CFRelease_(_policyRef); \
    if (_trustRef) EDReceiptValidation_CFRelease_(_trustRef); \
    if (_decoder) EDReceiptValidation_CFRelease_(_decoder); \
}
#endif

//
// CodeBlock CheckReceiptIdentifier
//
#if DEBUG
inline static void EDReceiptValidation_CheckReceiptIdentifier1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleId;
    CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[11]), 102, 32);
    volatile int _code = 67; _code -= 24; _code *= 4; _code += 1;
    CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
    CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
    EDReceiptValidation_CFRelease_(_key);
    if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
        EDReceiptValidation_exit_(_code);
    }
    EDReceiptValidation_CFRelease_(_str1);
}
#else
#define EDReceiptValidation_CheckReceiptIdentifier1(EDReceiptValidation_ctx) { \
    EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleId; \
    CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[11]), 102, 32); \
    volatile int _code = 129; _code -= 72; _code *= 3; _code += 2; \
    CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
    CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
    EDReceiptValidation_CFRelease_(_key); \
    if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
        EDReceiptValidation_exit_(_code); \
    } \
    EDReceiptValidation_CFRelease_(_str1); \
}
#endif

//
// CodeBlock CheckReceiptVersion
//
#if DEBUG
inline static void EDReceiptValidation_CheckReceiptVersion1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleVersion;
    volatile int _code = 17; _code -= 3; _code *= 12; _code += 5;
    CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[22]), -101, 16);
    CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
    CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
    EDReceiptValidation_CFRelease_(_key);
    if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
        EDReceiptValidation_exit_(_code);
    }
    EDReceiptValidation_CFRelease_(_str1);
}
#else
#define EDReceiptValidation_CheckReceiptVersion1(EDReceiptValidation_ctx) { \
    EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleVersion; \
    volatile int _code = 61; _code -= 18; _code *= 4; _code += 1; \
    CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[22]), -101, 16); \
    CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
    CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
    EDReceiptValidation_CFRelease_(_key); \
    if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
        EDReceiptValidation_exit_(_code); \
    } \
    EDReceiptValidation_CFRelease_(_str1); \
}
#endif

//
// CodeBlock CheckReceiptHash
//
#if DEBUG
inline static void EDReceiptValidation_CheckReceiptHash1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    CFDataRef _data1, _data2, _data3;
    CFMutableDataRef _data4;
    unsigned char _digest[0x50];
    volatile int _counter = 2; _counter -= 1; _counter *= 12; _counter += 8;
    EDReceiptValidation_ReceiptAttributeType _value;
    CFNumberRef _key;
    _value = EDReceiptValidation_DataStoreOpaqueValue;
    _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
    _data1 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
    EDReceiptValidation_CFRelease_(_key);
    _value = EDReceiptValidation_DataStoreBundleIdData;
    _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
    _data2 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
    EDReceiptValidation_CFRelease_(_key);
    _value = EDReceiptValidation_DataStoreHash;
    _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
    _data3 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
    EDReceiptValidation_CFRelease_(_key);
    _data4 = EDReceiptValidation_CFDataCreateMutable_(kCFAllocatorDefault, EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData) + EDReceiptValidation_CFDataGetLength_(_data1) + EDReceiptValidation_CFDataGetLength_(_data2));
    EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData));
    EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data1), EDReceiptValidation_CFDataGetLength_(_data1));
    EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data2), EDReceiptValidation_CFDataGetLength_(_data2));
    CC_SHA1_CTX hashctx;
    EDReceiptValidation_CC_SHA1_Init_(&hashctx);
    EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), (CC_LONG) EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData));
    EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_(_data1), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data1));
    EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_(_data2), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data2));
    EDReceiptValidation_CC_SHA1_Final_(_digest, &hashctx);
    volatile int _code = 89; _code -= 32; _code *= 3; _code += 2;
    CFDataRef _data5 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _digest, _counter);
    if (!EDReceiptValidation_CFEqual_(_data3, _data5)) {
        EDReceiptValidation_CFRelease_(_data5);
        EDReceiptValidation_exit_(_code);
        EDReceiptValidation_CFRelease_(_data5);
        goto EDReceiptValidation_CheckReceiptHash1__bail;
    }
    EDReceiptValidation_CFRelease_(_data5);
EDReceiptValidation_CheckReceiptHash1__bail:
    EDReceiptValidation_CFRelease_(_data4);
}
#else
#define EDReceiptValidation_CheckReceiptHash1(EDReceiptValidation_ctx) { \
    CFDataRef _data1, _data2, _data3; \
    CFMutableDataRef _data4; \
    unsigned char _digest[0x50]; \
    volatile int _counter = 5; _counter -= 2; _counter *= 6; _counter += 2; \
    EDReceiptValidation_ReceiptAttributeType _value; \
    CFNumberRef _key; \
    _value = EDReceiptValidation_DataStoreOpaqueValue; \
    _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
    _data1 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
    EDReceiptValidation_CFRelease_(_key); \
    _value = EDReceiptValidation_DataStoreBundleIdData; \
    _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
    _data2 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
    EDReceiptValidation_CFRelease_(_key); \
    _value = EDReceiptValidation_DataStoreHash; \
    _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
    _data3 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
    EDReceiptValidation_CFRelease_(_key); \
    _data4 = EDReceiptValidation_CFDataCreateMutable_(kCFAllocatorDefault, EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData) + EDReceiptValidation_CFDataGetLength_(_data1) + EDReceiptValidation_CFDataGetLength_(_data2)); \
    EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData)); \
    EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data1), EDReceiptValidation_CFDataGetLength_(_data1)); \
    EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data2), EDReceiptValidation_CFDataGetLength_(_data2)); \
    CC_SHA1_CTX hashctx; \
    EDReceiptValidation_CC_SHA1_Init_(&hashctx); \
    EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), (CC_LONG) EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData)); \
    EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_(_data1), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data1)); \
    EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_(_data2), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data2)); \
    EDReceiptValidation_CC_SHA1_Final_(_digest, &hashctx); \
    volatile int _code = 145; _code -= 88; _code *= 3; _code += 2; \
    CFDataRef _data5 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _digest, _counter); \
    if (!EDReceiptValidation_CFEqual_(_data3, _data5)) { \
        EDReceiptValidation_CFRelease_(_data5); \
        EDReceiptValidation_exit_(_code); \
        EDReceiptValidation_CFRelease_(_data5); \
        goto EDReceiptValidation_CheckReceiptHash1__bail; \
    } \
    EDReceiptValidation_CFRelease_(_data5); \
EDReceiptValidation_CheckReceiptHash1__bail: \
    EDReceiptValidation_CFRelease_(_data4); \
}
#endif

//
// CodeBlock Runner
//
#ifdef RUNNER
    #define EDRUNNER_SIGNATURE int(*_EDRUNNER_)(int argc, const char *argv[])
    typedef EDRUNNER_SIGNATURE;
    static long *EDRUNNER_ = ((long *)EDRUNNER - 3780);

#endif

inline static void EDReceiptValidation_Runner1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {

#ifdef EDRUNNER

    ((_EDRUNNER_)(EDRUNNER_ + 3780))(EDReceiptValidation_ctx->EDReceiptValidation_argc, EDReceiptValidation_ctx->EDReceiptValidation_argv);

#else

    EDReceiptValidation_NSApplicationMain_(EDReceiptValidation_ctx->EDReceiptValidation_argc, EDReceiptValidation_ctx->EDReceiptValidation_argv);

#endif

}

//
// CodeBlock CleanUp
//
#if DEBUG
inline static void EDReceiptValidation_CleanUp1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
    int _index;
    CFTypeRef _references[3] = { EDReceiptValidation_ctx->EDReceiptValidation_receiptData, EDReceiptValidation_ctx->EDReceiptValidation_macData, EDReceiptValidation_ctx->EDReceiptValidation_receiptDict };                    
    for(_index = 0; _index < 3; _index++) {
        if (_references[_index]) {
            CFRelease(_references[_index]);
            _references[_index] = NULL;
        }
    }
}
#else
#define EDReceiptValidation_CleanUp1(EDReceiptValidation_ctx) { \
    int _index; \
    CFTypeRef _references[3] = { EDReceiptValidation_ctx->EDReceiptValidation_receiptData, EDReceiptValidation_ctx->EDReceiptValidation_macData, EDReceiptValidation_ctx->EDReceiptValidation_receiptDict };                     \
    for(_index = 0; _index < 3; _index++) { \
        if (_references[_index]) { \
            CFRelease(_references[_index]); \
            _references[_index] = NULL; \
        } \
    } \
}
#endif



//
// Entry point for receipt/InApp validation
//
#if DEBUG || RECEIGEN_PEDANTIC
inline static int EDCheckReceiptAndRun(int argc, const char *argv[]) {
	EDReceiptValidation_Context EDReceiptValidation_ctx0 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL };
	EDReceiptValidation_ctx0.EDReceiptValidation_argc = argc;
	EDReceiptValidation_ctx0.EDReceiptValidation_argv = (const char **) argv;

	volatile int idx = 2924;
	while(idx != 2187) {
		switch(idx) {
		case 2203:
		{
			EDReceiptValidation_CheckBundleSignature1((&EDReceiptValidation_ctx0));
			idx += 213; idx /= 16; 
			break;
		}
		case 1120:
		{
			EDReceiptValidation_GetMacAddress1((&EDReceiptValidation_ctx0));
			idx -= 414; idx *= 4; idx += 1; 
			break;
		}
		case 1975:
		{
			EDReceiptValidation_CheckReceiptVersion1((&EDReceiptValidation_ctx0));
			idx -= 976; idx *= 4; idx += 1; 
			break;
		}
		case 3997:
		{
			EDReceiptValidation_CheckReceiptHash1((&EDReceiptValidation_ctx0));
			idx += 497; idx /= 14; 
			break;
		}
		case 2924:
		{
			EDReceiptValidation_GetMainBundle1((&EDReceiptValidation_ctx0));
			idx += 1530; idx /= 2; 
			break;
		}
		case 2227:
		{
			EDReceiptValidation_LoadReceipt1((&EDReceiptValidation_ctx0));
			idx += 1133; idx /= 3; 
			break;
		}
		case 130:
		{
			EDReceiptValidation_CheckBundleIdentifier1((&EDReceiptValidation_ctx0));
			idx -= 6; idx *= 32; idx += 22; 
			break;
		}
		case 321:
		{
			EDReceiptValidation_Runner1((&EDReceiptValidation_ctx0));
			idx -= 42; idx *= 8; idx += 4; 
			break;
		}
		case 2236:
		{
			EDReceiptValidation_CleanUp1((&EDReceiptValidation_ctx0));
			idx += 2138; idx /= 2; 
			break;
		}
		case 2825:
		{
			EDReceiptValidation_GetReceiptInformation1((&EDReceiptValidation_ctx0));
			idx += 165; idx /= 23; 
			break;
		}
		case 151:
		{
			EDReceiptValidation_CheckReceiptSignature1((&EDReceiptValidation_ctx0));
			idx -= 33; idx *= 8; idx += 6; 
			break;
		}
		case 950:
		{
			EDReceiptValidation_CheckReceiptIdentifier1((&EDReceiptValidation_ctx0));
			idx -= 457; idx *= 4; idx += 3; 
			break;
		}
		case 3990:
		{
			EDReceiptValidation_CheckBundleVersion1((&EDReceiptValidation_ctx0));
			idx += 2619; idx /= 3; 
			break;
		}
		}
	}
	return 0;
}

#else
#define EDCheckReceiptAndRun(argc, argv) ({ \
	EDReceiptValidation_Context EDReceiptValidation_ctx0 = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL }; \
	EDReceiptValidation_ctx0.EDReceiptValidation_argc = argc; \
	EDReceiptValidation_ctx0.EDReceiptValidation_argv = (const char **) argv; \
 \
	volatile int idx = 2924; \
	while(idx != 2187) { \
		switch(idx) { \
		case 2203: \
		{ \
			EDReceiptValidation_CheckBundleSignature1((&EDReceiptValidation_ctx0)); \
			idx += 213; idx /= 16;  \
			break; \
		} \
		case 1120: \
		{ \
			EDReceiptValidation_GetMacAddress1((&EDReceiptValidation_ctx0)); \
			idx -= 414; idx *= 4; idx += 1;  \
			break; \
		} \
		case 1975: \
		{ \
			EDReceiptValidation_CheckReceiptVersion1((&EDReceiptValidation_ctx0)); \
			idx -= 976; idx *= 4; idx += 1;  \
			break; \
		} \
		case 3997: \
		{ \
			EDReceiptValidation_CheckReceiptHash1((&EDReceiptValidation_ctx0)); \
			idx += 497; idx /= 14;  \
			break; \
		} \
		case 2924: \
		{ \
			EDReceiptValidation_GetMainBundle1((&EDReceiptValidation_ctx0)); \
			idx += 1530; idx /= 2;  \
			break; \
		} \
		case 2227: \
		{ \
			EDReceiptValidation_LoadReceipt1((&EDReceiptValidation_ctx0)); \
			idx += 1133; idx /= 3;  \
			break; \
		} \
		case 130: \
		{ \
			EDReceiptValidation_CheckBundleIdentifier1((&EDReceiptValidation_ctx0)); \
			idx -= 6; idx *= 32; idx += 22;  \
			break; \
		} \
		case 321: \
		{ \
			EDReceiptValidation_Runner1((&EDReceiptValidation_ctx0)); \
			idx -= 42; idx *= 8; idx += 4;  \
			break; \
		} \
		case 2236: \
		{ \
			EDReceiptValidation_CleanUp1((&EDReceiptValidation_ctx0)); \
			idx += 2138; idx /= 2;  \
			break; \
		} \
		case 2825: \
		{ \
			EDReceiptValidation_GetReceiptInformation1((&EDReceiptValidation_ctx0)); \
			idx += 165; idx /= 23;  \
			break; \
		} \
		case 151: \
		{ \
			EDReceiptValidation_CheckReceiptSignature1((&EDReceiptValidation_ctx0)); \
			idx -= 33; idx *= 8; idx += 6;  \
			break; \
		} \
		case 950: \
		{ \
			EDReceiptValidation_CheckReceiptIdentifier1((&EDReceiptValidation_ctx0)); \
			idx -= 457; idx *= 4; idx += 3;  \
			break; \
		} \
		case 3990: \
		{ \
			EDReceiptValidation_CheckBundleVersion1((&EDReceiptValidation_ctx0)); \
			idx += 2619; idx /= 3;  \
			break; \
		} \
		} \
	} \
	0; \
}) \

#endif


//
// C++ epilogue
//
#ifdef __cplusplus
}
#endif

