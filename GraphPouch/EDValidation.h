//  ____                _
// |  _ \ ___  ___  ___(_) __ _  ___ _ __
// | |_) / _ \/ __|/ _ \ |/ _` |/ _ \ '_ \
// |  _ <  __/ (__|  __/ | (_| |  __/ | | |
// |_| \_\___|\___|\___|_|\__, |\___|_| |_|
//                        |___/
//
// This code was generated by Receigen and will use:
//
// CFBundleIdentifier=com.edcodia.graphpouch
// CFBundleShortVersionString=1.0.1
// Prefix=ED
// NoMain=NO
//
// Don't forget to link with the IOKit and Security frameworks !
//

//
// The default pedantic mode (OFF)
// Define to 1 if you need pedantic mode.
//
#ifndef RECEIGEN_PEDANTIC
#define RECEIGEN_PEDANTIC 0
#endif

//
// C++ prologue
//
#ifdef __cplusplus
extern "C" {
#endif
    
    // Headers for general purpose functions
#import <CoreFoundation/CoreFoundation.h>
    
    // Headers for library loading
#import <dlfcn.h>
    
    // Headers for bundle security checks
#import <CommonCrypto/CommonDigest.h>
#import <Security/Security.h>
#import <Security/CMSDecoder.h>
#import <Security/CSCommon.h>
#import <Security/SecAsn1Coder.h>
#import <Security/SecAsn1Templates.h>
#import <Security/SecCode.h>
#import <Security/SecRequirement.h>
#import <Security/SecStaticCode.h>
    
    // Headers for network checks
#import <IOKit/IOKitLib.h>
#import <arpa/inet.h>
#import <ifaddrs.h>
#import <net/if.h>
#import <net/if_dl.h>
    
    //
    // Structure describing an ASN.1 data
    //
    typedef struct _EDReceiptValidation_ASN1_DATA {
        size_t length;
        uint8 *data;
    } EDReceiptValidation_ASN1_DATA;
    
    //
    // Structure describing a receipt attribute
    //
    // ReceiptAttribute ::= SEQUENCE {
    //    type INTEGER,
    //    version INTEGER,
    //    value OCTET STRING
    // }
    //
    typedef struct _EDReceiptValidation_ReceiptAttribute {
        EDReceiptValidation_ASN1_DATA type;
        EDReceiptValidation_ASN1_DATA version;
        EDReceiptValidation_ASN1_DATA value;
    } EDReceiptValidation_ReceiptAttribute;
    
    //
    // Structure describing a receipt
    //
    // Payload ::= SET OF ReceiptAttribute
    //
    typedef struct _EDReceiptValidation_Payload {
        EDReceiptValidation_ReceiptAttribute **attributes;
    } EDReceiptValidation_Payload;
    
    //
    // ASN.1 template describing a receipt attribute or an InApp attribute
    //
    const SecAsn1Template EDReceiptValidation_kReceiptAttributeTemplate[] = {
        { SEC_ASN1_SEQUENCE, 0, NULL, sizeof(EDReceiptValidation_ReceiptAttribute) },
        { SEC_ASN1_INTEGER, offsetof(EDReceiptValidation_ReceiptAttribute, type), NULL, 0 },
        { SEC_ASN1_INTEGER, offsetof(EDReceiptValidation_ReceiptAttribute, version), NULL, 0 },
        { SEC_ASN1_OCTET_STRING, offsetof(EDReceiptValidation_ReceiptAttribute, value), NULL, 0 },
        { 0, 0, NULL, 0 }
    };
    
    //
    // ASN.1 template describing a receipt or an InApp receipt
    //
    const SecAsn1Template EDReceiptValidation_kSetOfReceiptAttributeTemplate[] = {
        { SEC_ASN1_SET_OF, offsetof(EDReceiptValidation_Payload, attributes), EDReceiptValidation_kReceiptAttributeTemplate, sizeof(EDReceiptValidation_Payload) },
        { 0, 0, NULL, 0 }
    };
    
    //
    // Shared context for receipt/InApp validation and parsing
    //
    typedef struct _EDReceiptValidation_Context {
        CFTypeRef EDReceiptValidation_macData;
        CFTypeRef EDReceiptValidation_receiptDict;
        CFTypeRef EDReceiptValidation_dummy4;
        CFTypeRef EDReceiptValidation_receiptData;
        int EDReceiptValidation_argc;
        CFTypeRef EDReceiptValidation_dummy2;
        CFTypeRef EDReceiptValidation_dummy0;
        CFTypeRef EDReceiptValidation_mainBundle;
        const char ** EDReceiptValidation_argv;
        CFTypeRef EDReceiptValidation_inAppIdentifiers;
        CFTypeRef EDReceiptValidation_dummy3;
        CFTypeRef EDReceiptValidation_inAppBlock;
        CFTypeRef EDReceiptValidation_dummy1;
    } EDReceiptValidation_Context;
    
    typedef struct _EDReceiptValidation_Parsing {
        size_t EDReceiptValidation_length;
        CFTypeRef EDReceiptValidation_dummy3;
        CFTypeRef EDReceiptValidation_dummy1;
        struct _EDReceiptValidation_Parsing * EDReceiptValidation_parent;
        CFTypeRef EDReceiptValidation_dummy4;
        CFTypeRef EDReceiptValidation_dummy2;
        CFTypeRef EDReceiptValidation_dictionary;
        const void * EDReceiptValidation_source;
        CFTypeRef EDReceiptValidation_dummy0;
        EDReceiptValidation_ReceiptAttribute ** EDReceiptValidation_pointer;
    } EDReceiptValidation_Parsing;
    
    
    //
    // Keys for each receipt attribute and InApp attribute
    //
    typedef enum _EDReceiptValidation_ReceiptAttributeType {
        // Bundle identifier
        EDReceiptValidation_ReceiptAttributeTypeBundleId = 2,
        // Application version
        EDReceiptValidation_ReceiptAttributeTypeBundleVersion = 3,
        // Opaque value
        EDReceiptValidation_ReceiptAttributeTypeOpaqueValue = 4,
        // Hash value
        EDReceiptValidation_ReceiptAttributeTypeHash = 5,
        // In-app purchase receipt
        EDReceiptValidation_ReceiptAttributeTypeInAppPurchase = 17,
        
        // Quantity
        EDReceiptValidation_InAppAttributeTypeQuantity = 1701,
        // Product identifier
        EDReceiptValidation_InAppAttributeTypeProductIdentifer = 1702,
        // Transaction identifier
        EDReceiptValidation_InAppAttributeTypeTransactionIdentifer = 1703,
        // Purchase date
        EDReceiptValidation_InAppAttributeTypePurchaseDate = 1704,
        // Original transaction identifier
        EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer = 1705,
        // Original purchase date
        EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate = 1706,
        
        // Storage key base value
        EDReceiptValidation_DataStoreNone = 2830,
        // Storage key for Bundle identifier
        EDReceiptValidation_DataStoreBundleId = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeBundleId << 2),
        // Storage key for Bundle identifier as raw data
        EDReceiptValidation_DataStoreBundleIdData = EDReceiptValidation_DataStoreBundleId + 1,
        // Storage key for Application version
        EDReceiptValidation_DataStoreBundleVersion = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeBundleVersion << 2),
        // Storage key for Application version as raw data
        EDReceiptValidation_DataStoreBundleVersionData = EDReceiptValidation_DataStoreBundleVersion + 1,
        // Storage key for Opaque value
        EDReceiptValidation_DataStoreOpaqueValue = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeOpaqueValue << 2),
        // Storage key for Hash value
        EDReceiptValidation_DataStoreHash = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeHash << 2),
        // Storage key for In-app purchase receipts
        EDReceiptValidation_DataStoreInAppPurchase = EDReceiptValidation_DataStoreNone + (EDReceiptValidation_ReceiptAttributeTypeInAppPurchase << 2),
    } EDReceiptValidation_ReceiptAttributeType;
    
    //
    // Table for storing strings
    //
    static const char *EDReceiptValidation_strings[0x007f] = {
        // Empty slot
        "\xf5\x89\x2f\x46\x5e\x5e\x3b\xdb\x74\xc5\xd7\x16\x2f\xa3\x9c\x3e",
        // "/System/Library/Frameworks/Security.framework/Security" - #M03L40S46
        "\x69\x15\x3f\x35\x32\x23\x2b\x69\x0a\x2f\x24\x34\x27\x34\x3f\x69\x00\x34\x27\x2b\x23\x31\x29\x34\x2d\x35\x69\x15\x23\x25\x33\x34\x2f\x32\x3f\x68\x20\x34\x27\x2b\x23\x31\x29\x34\x2d\x69\x15\x23\x25\x33\x34\x2f\x32\x3f\x46\xa3\xb8\xf8\x25\xe5\xa3\x31\x54\x9d",
        // "CFURLCreateDataAndPropertiesFromResource" - #M03L30Sca
        "\x89\x8c\x9f\x98\x86\x89\xb8\xaf\xab\xbe\xaf\x8e\xab\xbe\xab\x8b\xa4\xae\x9a\xb8\xa5\xba\xaf\xb8\xbe\xa3\xaf\xb9\x8c\xb8\xa5\xa7\x98\xaf\xb9\xa5\xbf\xb8\xa9\xaf\xca\xf6\x7d\xc2\xad\xa6\x90\x3a",
        // Empty slot
        "\xc4\x33\x6a\x06\xef\x5c\x20\x02\xfc\xe7\x23\xc2\x7a\xaf\x7c\x58",
        // Empty slot
        "\x13\x3c\xf3\x26\x96\x5b\xa8\x6d\x4c\xc5\xe8\xc5\xa2\x1a\x23\xab",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M03L50Sa1
        "\x8e\xf2\xd8\xd2\xd5\xc4\xcc\x8e\xed\xc8\xc3\xd3\xc0\xd3\xd8\x8e\xe7\xd3\xc0\xcc\xc4\xd6\xce\xd3\xca\xd2\x8e\xe2\xce\xd3\xc4\xe7\xce\xd4\xcf\xc5\xc0\xd5\xc8\xce\xcf\x8f\xc7\xd3\xc0\xcc\xc4\xd6\xce\xd3\xca\x8e\xe2\xce\xd3\xc4\xe7\xce\xd4\xcf\xc5\xc0\xd5\xc8\xce\xcf\xa1\xef\x3c\xfd\xde\x5f\x35\x13\x8b\xf9\x7f\xe5\x35\x97",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M02L40Sffffffdf
        "\x50\x74\x9a\x94\x95\x86\x8e\x50\x6d\x8a\x83\x93\x82\x93\x9a\x50\x67\x93\x82\x8e\x86\x98\x90\x93\x8c\x94\x50\x6a\x70\x6c\x8a\x95\x4f\x87\x93\x82\x8e\x86\x98\x90\x93\x8c\x50\x6a\x70\x6c\x8a\x95\x21\xce\xba\xe2\x4a\x71\x24\x1d\x14\x06\x92\xba\x05\x23\x87\x88",
        // "CFDataCreateMutable" - #M02L20Sffffffc2
        "\x81\x84\x82\x9f\xb2\x9f\x81\xb0\xa3\x9f\xb2\xa3\x8b\xb3\xb2\x9f\xa0\xaa\xa3\x3e\x4a\x03\xe2\x7b\x14\xb8\xe2\xfd\x11\x31\x86\xc6",
        // Empty slot
        "\x96\xfb\xb2\x0d\xe7\xc7\xc8\x9c\x75\xf3\x52\x37\xc7\xdf\x32\x07",
        // Empty slot
        "\x78\x12\x2d\x69\x01\x82\x1a\x19\x9c\x6f\x54\xe1\x74\x59\x39\x5f",
        // Empty slot
        "\x71\x30\x70\x42\xe7\x9d\x26\x0c\xc4\xe1\xf8\x2c\x5a\x26\x52\x33",
        // "IORegistryEntryGetParentEntry" - #M02L20Sffffffe4
        "\x65\x6b\x6e\x81\x83\x85\x8f\x90\x8e\x95\x61\x8a\x90\x8e\x95\x63\x81\x90\x6c\x7d\x8e\x81\x8a\x90\x61\x8a\x90\x8e\x95\x1c\x66\x44",
        // "en0" - #M03L10S96
        "\xf3\xf8\xa6\x96\xc8\x5f\x32\x1f\xed\x73\xf5\x21\xfe\x76\x4f\x97",
        // "CMSDecoderCopyContent" - #M02L20Sffffff8a
        "\xb9\xc3\xc9\xba\xdb\xd9\xe5\xda\xdb\xe8\xb9\xe5\xe6\xef\xb9\xe5\xe4\xea\xdb\xe4\xea\x76\x84\xc6\xb1\x02\xfc\x15\x40\xb0\x0a\x72",
        // "CFURLCreateWithFileSystemPathRelativeToBase" - #M03L30S6c
        "\x2f\x2a\x39\x3e\x20\x2f\x1e\x09\x0d\x18\x09\x3b\x05\x18\x04\x2a\x05\x00\x09\x3f\x15\x1f\x18\x09\x01\x3c\x0d\x18\x04\x3e\x09\x00\x0d\x18\x05\x1a\x09\x38\x03\x2e\x0d\x1f\x09\x6c\x1d\xfc\xe0\xb2",
        // Empty slot
        "\x28\x78\x71\xc0\xa5\xca\x72\x36\x89\x81\x9d\xa4\xdf\x2b\x76\x68",
        // "SecAsn1Decode" - #M03L10S6c
        "\x3f\x09\x0f\x2d\x1f\x02\x5d\x28\x09\x0f\x03\x08\x09\x6c\x82\x84",
        // "SecStaticCodeCheckValidityWithErrors" - #M02L30Sfffffff3
        "\x60\x72\x70\x60\x81\x6e\x81\x76\x70\x50\x7c\x71\x72\x50\x75\x72\x70\x78\x63\x6e\x79\x76\x71\x76\x81\x86\x64\x76\x81\x75\x52\x7f\x7f\x7c\x7f\x80\x0d\x7c\x34\x0a\x04\x69\xb0\x40\xcd\x8c\x18\x9b",
        // "IOMACAddress" - #M02L10Sffffffb5
        "\x94\x9a\x98\x8c\x8e\x8c\xaf\xaf\xbd\xb0\xbe\xbe\x4b\x75\x13\x5a",
        // "1.0.1" - #M03L10S4c
        "\x7d\x62\x7c\x62\x7d\x4c\xc7\x80\x71\x4b\xc6\x06\xfc\x6d\xef\xbb",
        // Empty slot
        "\x2e\x70\x3f\x9a\x84\x0c\xb4\x44\xea\xb5\xf8\x40\xdc\x50\xa7\x66",
        // "CFDataGetLength" - #M03L10S83
        "\xc0\xc5\xc7\xe2\xf7\xe2\xc4\xe6\xf7\xcf\xe6\xed\xe4\xf7\xeb\x83",
        // "/usr/lib/libSystem.dylib" - #M02L20S14
        "\x1b\x61\x5f\x5e\x1b\x58\x55\x4e\x1b\x58\x55\x4e\x3f\x65\x5f\x60\x51\x59\x1a\x50\x65\x58\x55\x4e\xec\x2c\x46\x8e\x09\x14\x33\x68",
        // "com.edcodia.graphpouch" - #M03L20S32
        "\x51\x5d\x5f\x1c\x57\x56\x51\x5d\x56\x5b\x53\x1c\x55\x40\x53\x42\x5a\x42\x5d\x47\x51\x5a\x32\xdf\x84\x73\xf5\xba\xb3\x8c\x13\x62",
        // "CFDateFormatterCreateDateFromString" - #M02L30S0d
        "\x36\x39\x37\x54\x67\x58\x39\x62\x65\x60\x54\x67\x67\x58\x65\x36\x65\x58\x54\x67\x58\x37\x54\x67\x58\x39\x65\x62\x60\x46\x67\x65\x5c\x61\x5a\xf3\xf3\x39\x74\xe2\x79\x0b\x30\x21\x20\x03\xd5\xb4",
        // "/System/Library/Frameworks/AppKit.framework/AppKit" - #M02L40Sffffff84
        "\xab\xcf\xf5\xef\xf0\xe1\xe9\xab\xc8\xe5\xde\xee\xdd\xee\xf5\xab\xc2\xee\xdd\xe9\xe1\xf3\xeb\xee\xe7\xef\xab\xbd\xec\xec\xc7\xe5\xf0\xaa\xe2\xee\xdd\xe9\xe1\xf3\xeb\xee\xe7\xab\xbd\xec\xec\xc7\xe5\xf0\x7c\x0f\xdc\xf0\x4c\x6a\x01\x5c\xe4\x14\x78\xed\x78\xdf",
        // "IOServiceGetMatchingServices" - #M03L20S59
        "\x10\x16\x0a\x3c\x2b\x2f\x30\x3a\x3c\x1e\x3c\x2d\x14\x38\x2d\x3a\x31\x30\x37\x3e\x0a\x3c\x2b\x2f\x30\x3a\x3c\x2a\x59\x7c\x4b\x20",
        // Empty slot
        "\xe6\xd2\x43\xd0\x79\x0e\xe9\x09\x01\xff\x03\x4c\x18\x19\x57\x7f",
        // "NSApplicationMain" - #M02L20Sffffffee
        "\x60\x65\x53\x82\x82\x7e\x7b\x75\x73\x86\x7b\x81\x80\x5f\x73\x7b\x80\x12\x95\xac\xe8\xb0\xc3\xc5\x95\xc3\xbe\x93\x3e\xf7\x15\x53",
        // Empty slot
        "\xf7\x43\x34\x19\x49\x02\x8c\xc2\x92\x9e\x7c\xd4\x50\x64\x4d\x80",
        // Empty slot
        "\x7f\x9e\xa0\x92\x13\x5c\x11\xaf\x79\xfb\x66\x6a\xc2\xb2\xb8\x28",
        // Empty slot
        "\x23\x5a\xc3\x07\xff\x43\x19\x65\x53\xa5\x30\xe6\xfa\x8d\xf7\x52",
        // "CFBundleCopyBundleURL" - #M03L20Sd8
        "\x9b\x9e\x9a\xad\xb6\xbc\xb4\xbd\x9b\xb7\xa8\xa1\x9a\xad\xb6\xbc\xb4\xbd\x8d\x8a\x94\xd8\xf7\x86\xa9\x15\x9c\x1a\x78\x18\x2a\xb3",
        // "CFBundleGetValueForInfoDictionaryKey" - #M02L30Sffffffe3
        "\x60\x63\x5f\x92\x8b\x81\x89\x82\x64\x82\x91\x73\x7e\x89\x92\x82\x63\x8c\x8f\x66\x8b\x83\x8c\x61\x86\x80\x91\x86\x8c\x8b\x7e\x8f\x96\x68\x82\x96\x1d\xb8\xe8\xcc\xcb\xf3\x54\x69\x2b\x6e\xde\x0c",
        // "Contents/_MASReceipt/receipt" - #M02L20S53
        "\xf0\x1c\x1b\x21\x12\x1b\x21\x20\xdc\x0c\xfa\xee\x00\xff\x12\x10\x12\x16\x1d\x21\xdc\x1f\x12\x10\x12\x16\x1d\x21\xad\x2f\x71\x24",
        // Empty slot
        "\x85\x07\xe6\xad\x56\xa5\xc7\xce\x20\xda\x56\x41\x02\x49\xa8\x2c",
        // "dlopen" - #M03L10S65
        "\x01\x09\x0a\x15\x00\x0b\x65\x06\x95\x6e\xd9\xa9\x45\xf2\xb7\xed",
        // "CFBundleGetMainBundle" - #M03L20S8a
        "\xc9\xcc\xc8\xff\xe4\xee\xe6\xef\xcd\xef\xfe\xc7\xeb\xe3\xe4\xc8\xff\xe4\xee\xe6\xef\x8a\x53\xf1\x4c\xcd\x08\x15\x3d\x44\x09\x5f",
        // "CFBundleGetIdentifier" - #M02L20S5b
        "\xe8\xeb\xe7\x1a\x13\x09\x11\x0a\xec\x0a\x19\xee\x09\x0a\x13\x19\x0e\x0b\x0e\x0a\x17\xa5\xf7\xb6\x3c\xc3\x13\x29\x44\x59\x1d\x98",
        // Empty slot
        "\x4b\xd7\xa4\x6a\x69\xbf\x88\x2c\x19\x98\xac\x66\x05\x6c\xe7\xaa",
        // "/usr/lib/libSystem.dylib" - #M02L20S5d
        "\xd2\x18\x16\x15\xd2\x0f\x0c\x05\xd2\x0f\x0c\x05\xf6\x1c\x16\x17\x08\x10\xd1\x07\x1c\x0f\x0c\x05\xa3\xeb\x9b\x0c\xca\x4b\x57\x3c",
        // "IORegistryEntryCreateCFProperty" - #M03L20S3d
        "\x74\x72\x6f\x58\x5a\x54\x4e\x49\x4f\x44\x78\x53\x49\x4f\x44\x7e\x4f\x58\x5c\x49\x58\x7e\x7b\x6d\x4f\x52\x4d\x58\x4f\x49\x44\x3d",
        // Empty slot
        "\xdb\x8c\x14\x81\xaf\x6e\x7f\xf6\x0e\xec\x63\x94\xd9\x59\xdd\x26",
        // "CFDictionaryGetValue" - #M03L20S17
        "\x54\x51\x53\x7e\x74\x63\x7e\x78\x79\x76\x65\x6e\x50\x72\x63\x41\x76\x7b\x62\x72\x17\x1c\x79\x46\xee\xfa\x3a\x07\xee\xb5\x33\x1d",
        // "CFDateFormatterCreate" - #M02L20Sffffff8f
        "\xb4\xb7\xb5\xd2\xe5\xd6\xb7\xe0\xe3\xde\xd2\xe5\xe5\xd6\xe3\xb4\xe3\xd6\xd2\xe5\xd6\x71\x48\xc8\x2c\x90\x02\x80\x2d\x25\xfc\x45",
        // Empty slot
        "\x8c\x97\x39\x94\x87\x8b\x6b\xda\x2c\x59\x98\xd5\xf5\x58\x4f\x29",
        // "SecStaticCodeCheckValidity" - #M03L20S46
        "\x15\x23\x25\x15\x32\x27\x32\x2f\x25\x05\x29\x22\x23\x05\x2e\x23\x25\x2d\x10\x27\x2a\x2f\x22\x2f\x32\x3f\x46\x28\x32\x27\x15\x51",
        // "/usr/lib/libSystem.dylib" - #M02L20S03
        "\x2c\x72\x70\x6f\x2c\x69\x66\x5f\x2c\x69\x66\x5f\x50\x76\x70\x71\x62\x6a\x2b\x61\x76\x69\x66\x5f\xfd\x23\xdd\x06\x56\xaf\x9c\xfb",
        // "CFDataAppendBytes" - #M03L20S64
        "\x27\x22\x20\x05\x10\x05\x25\x14\x14\x01\x0a\x00\x26\x1d\x10\x01\x17\x64\x39\xce\xa2\x59\x9b\x56\x21\x76\x56\x80\x8e\x8b\x1b\xe1",
        // "CMSDecoderCreate" - #M03L20Sb8
        "\xfb\xf5\xeb\xfc\xdd\xdb\xd7\xdc\xdd\xca\xfb\xca\xdd\xd9\xcc\xdd\xb8\x96\x59\x94\x98\x7f\xec\xee\xcf\x1d\x9a\x52\xa9\x37\x0a\xf9",
        // Empty slot
        "\xcb\x6a\xde\x6d\x6f\x4f\x4e\x24\x4b\x0c\x30\xd4\x38\xfc\xc1\x3e",
        // "SecAsn1CoderCreate" - #M02L20S01
        "\x52\x64\x62\x40\x72\x6d\x30\x42\x6e\x63\x64\x71\x42\x71\x64\x60\x73\x64\xff\x7b\x87\x5e\xe8\x8e\xa6\xa1\x03\xbb\xa1\x06\x1e\xa5",
        // Empty slot
        "\x6c\x52\xcd\x30\x76\x8e\x5b\xb2\xc0\xaa\xa3\x41\xff\x2f\xa7\xe9",
        // "com.edcodia.graphpouch" - #M02L20Sffffff94
        "\xcf\xdb\xd9\x9a\xd1\xd0\xcf\xdb\xd0\xd5\xcd\x9a\xd3\xde\xcd\xdc\xd4\xdc\xdb\xe1\xcf\xd4\x6c\x63\xcf\x9f\xd3\xd8\xe7\x57\x8a\xc9",
        // Empty slot
        "\xa0\x57\x64\x04\x21\xe0\x64\x4d\x2b\xe7\xc7\x57\x15\xdc\x7f\x79",
        // "CFRelease" - #M02L10Sffffffd4
        "\x6f\x72\x7e\x91\x98\x91\x8d\x9f\x91\x2c\x03\xdf\x85\x3e\xfd\xb1",
        // Empty slot
        "\x98\xed\x32\xb3\x59\x20\x81\xe1\xc9\x87\x09\x6a\x2e\x6d\xc0\xfe",
        // Empty slot
        "\xe1\x49\x0d\xe1\xe7\xe4\xbf\xf2\xb9\xdf\xfd\xc3\x34\x3a\x30\xdf",
        // "CFArrayAppendValue" - #M02L20Sffffffb2
        "\x91\x94\x8f\xc0\xc0\xaf\xc7\x8f\xbe\xbe\xb3\xbc\xb2\xa4\xaf\xba\xc3\xb3\x4e\x5f\x6b\x43\xe0\xad\x8d\x2c\xbe\xeb\xee\xac\x31\x93",
        // Empty slot
        "\xe1\x1c\x38\x94\x01\x3a\x29\xa2\x75\x1b\xf7\x3f\xf9\x7f\x8d\x38",
        // "CFBundleShortVersionString" - #M03L20S14
        "\x57\x52\x56\x61\x7a\x70\x78\x71\x47\x7c\x7b\x66\x60\x42\x71\x66\x67\x7d\x7b\x7a\x47\x60\x66\x7d\x7a\x73\x14\x18\xc3\x89\xeb\xdf",
        // "CFStringCreateWithBytes" - #M02L20S0b
        "\x38\x3b\x48\x69\x67\x5e\x63\x5c\x38\x67\x5a\x56\x69\x5a\x4c\x5e\x69\x5d\x37\x6e\x69\x5a\x68\xf5\xb1\x4b\xe0\x2d\xaf\x3d\xaa\x1d",
        // Empty slot
        "\x2d\xe7\x59\x52\xa7\x44\x48\xb9\x0c\x16\x7b\xc5\x1f\x47\xb7\x26",
        // "CFStringCreateWithCString" - #M03L20S4a
        "\x09\x0c\x19\x3e\x38\x23\x24\x2d\x09\x38\x2f\x2b\x3e\x2f\x1d\x23\x3e\x22\x09\x19\x3e\x38\x23\x24\x2d\x4a\x7b\x53\xd4\x00\x28\x7b",
        // Empty slot
        "\x11\xee\x73\xee\x74\x40\x70\xa8\x1b\x26\x87\x95\x3d\x7b\xaa\x00",
        // Empty slot
        "\xd2\xe7\x47\x6f\x1b\xe9\x27\xba\x0a\x49\x20\x12\xc5\xe9\x32\xcd",
        // Empty slot
        "\xff\xd1\xb8\x64\x42\x12\x8e\x2d\x14\x72\x0a\x38\x28\x5f\x92\x51",
        // "CC_SHA1" - #M02L10Sffffffd6
        "\x6d\x6d\x89\x7d\x72\x6b\x5b\x2a\x63\xc3\xed\x73\x02\x1a\xb4\xb0",
        // Empty slot
        "\x0b\x31\xa4\x0c\x81\xce\xf4\x44\xef\xa2\x36\x0f\xfd\x5d\x1a\xee",
        // "CFDataCreate" - #M02L10Sffffff9a
        "\xa9\xac\xaa\xc7\xda\xc7\xa9\xd8\xcb\xc7\xda\xcb\x66\xb7\x07\x14",
        // "CMSDecoderFinalizeMessage" - #M02L20S43
        "\x00\x0a\x10\x01\x22\x20\x2c\x21\x22\x2f\x03\x26\x2b\x1e\x29\x26\x37\x22\x0a\x22\x30\x30\x1e\x24\x22\xbd\xca\x0b\x26\x30\x0f\x99",
        // Empty slot
        "\x11\x15\x8a\x04\x52\x4b\x6e\x80\xdb\x16\xca\x0f\x67\x58\xc6\xc6",
        // Empty slot
        "\x5a\x7e\xdb\xb6\xeb\xd4\xb2\x10\xbf\xa2\xd9\x3d\xbf\x42\xbf\x93",
        // "/System/Library/Frameworks/Security.framework/Security" - #M02L40S44
        "\xeb\x0f\x35\x2f\x30\x21\x29\xeb\x08\x25\x1e\x2e\x1d\x2e\x35\xeb\x02\x2e\x1d\x29\x21\x33\x2b\x2e\x27\x2f\xeb\x0f\x21\x1f\x31\x2e\x25\x30\x35\xea\x22\x2e\x1d\x29\x21\x33\x2b\x2e\x27\xeb\x0f\x21\x1f\x31\x2e\x25\x30\x35\xbc\x26\xd4\x44\x3c\x18\xd9\x98\x0e\x85",
        // Empty slot
        "\x96\xf4\x6d\x18\xf7\x39\x8b\x44\xd7\x26\x30\xcb\xe3\x1f\x91\xde",
        // "CC_SHA1_Final" - #M03L10Sd7
        "\x94\x94\x88\x84\x9f\x96\xe6\x88\x91\xbe\xb9\xb6\xbb\xd7\xd7\xb4",
        // Empty slot
        "\xe2\x94\x35\xc0\x9e\xd8\x2f\x7d\x7f\x96\x97\x3a\x53\x35\xf5\x96",
        // "CC_SHA1_Init" - #M03L10Sba
        "\xf9\xf9\xe5\xe9\xf2\xfb\x8b\xe5\xf3\xd4\xd3\xce\xba\xd2\xb3\x19",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M03L50Sc0
        "\xef\x93\xb9\xb3\xb4\xa5\xad\xef\x8c\xa9\xa2\xb2\xa1\xb2\xb9\xef\x86\xb2\xa1\xad\xa5\xb7\xaf\xb2\xab\xb3\xef\x83\xaf\xb2\xa5\x86\xaf\xb5\xae\xa4\xa1\xb4\xa9\xaf\xae\xee\xa6\xb2\xa1\xad\xa5\xb7\xaf\xb2\xab\xef\x83\xaf\xb2\xa5\x86\xaf\xb5\xae\xa4\xa1\xb4\xa9\xaf\xae\xc0\x9e\x63\xac\x87\x0d\x9c\xc6\x51\x06\x6a\x81\x78\x2b",
        // Empty slot
        "\x3f\xa3\xde\x9c\x75\xa6\x34\x7b\x9b\x47\x80\x2b\x35\xda\xe0\x42",
        // Empty slot
        "\x23\x43\xa6\x85\xee\x89\x9e\xff\xb5\xc9\x3a\x5a\xc3\xe5\x0f\x5b",
        // "/System/Library/Frameworks/Security.framework/Security" - #M03L40Sd0
        "\xff\x83\xa9\xa3\xa4\xb5\xbd\xff\x9c\xb9\xb2\xa2\xb1\xa2\xa9\xff\x96\xa2\xb1\xbd\xb5\xa7\xbf\xa2\xbb\xa3\xff\x83\xb5\xb3\xa5\xa2\xb9\xa4\xa9\xfe\xb6\xa2\xb1\xbd\xb5\xa7\xbf\xa2\xbb\xff\x83\xb5\xb3\xa5\xa2\xb9\xa4\xa9\xd0\xf5\x83\x42\x3e\xab\xaa\xfb\xb7\xe0",
        // "IOObjectRelease" - #M02L10Sfffffff3
        "\x56\x5c\x5c\x6f\x77\x72\x70\x81\x5f\x72\x79\x72\x6e\x80\x72\x0d",
        // "IOBSDNameMatching" - #M02L20Sffffffe8
        "\x61\x67\x5a\x6b\x5c\x66\x79\x85\x7d\x65\x79\x8c\x7b\x80\x81\x86\x7f\x18\x65\x17\x19\x64\x95\x1f\xbd\xde\xce\xb5\xd7\xe2\x78\x8e",
        // Empty slot
        "\x8b\xe9\x4b\xb7\xe9\xb7\xfe\xa0\x71\xf1\x19\x19\xe9\xa5\xdf\x7f",
        // "CFEqual" - #M02L10S2f
        "\x14\x17\x16\x42\x46\x32\x3d\xd1\x57\xc6\x9c\xca\xe4\x9b\x9e\xdc",
        // Empty slot
        "\xe0\xcd\xff\xf9\x71\x0f\x87\xe3\x18\xf5\x51\xbe\xbc\x7c\x7d\xfa",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M03L40S1f
        "\x30\x4c\x66\x6c\x6b\x7a\x72\x30\x53\x76\x7d\x6d\x7e\x6d\x66\x30\x59\x6d\x7e\x72\x7a\x68\x70\x6d\x74\x6c\x30\x56\x50\x54\x76\x6b\x31\x79\x6d\x7e\x72\x7a\x68\x70\x6d\x74\x30\x56\x50\x54\x76\x6b\x1f\xc4\xb8\x49\xd8\xe8\x28\xe8\x8a\x64\x49\x5b\x8c\xff\x19\x19",
        // "SecRequirementCreateWithString" - #M02L20S75
        "\xde\xf0\xee\xdd\xf0\xfc\x00\xf4\xfd\xf0\xf8\xf0\xf9\xff\xce\xfd\xf0\xec\xff\xf0\xe2\xf4\xff\xf3\xde\xff\xfd\xf4\xf9\xf2\x8b\x03",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M02L50Sfffffffa
        "\x35\x59\x7f\x79\x7a\x6b\x73\x35\x52\x6f\x68\x78\x67\x78\x7f\x35\x4c\x78\x67\x73\x6b\x7d\x75\x78\x71\x79\x35\x49\x75\x78\x6b\x4c\x75\x7b\x74\x6a\x67\x7a\x6f\x75\x74\x34\x6c\x78\x67\x73\x6b\x7d\x75\x78\x71\x35\x49\x75\x78\x6b\x4c\x75\x7b\x74\x6a\x67\x7a\x6f\x75\x74\x06\x43\x46\x9e\x10\x6a\x7f\xa8\xbb\x95\x37\x3c\xe4\x8a",
        // "CFStringCompare" - #M02L10Sffffff92
        "\xb1\xb4\xc1\xe2\xe0\xd7\xdc\xd5\xb1\xdd\xdb\xde\xcf\xe0\xd3\x6e",
        // "SecPolicyCreateBasicX509" - #M02L20S4b
        "\x08\x1a\x18\x05\x24\x21\x1e\x18\x2e\xf8\x27\x1a\x16\x29\x1a\xf7\x16\x28\x1e\x18\x0d\xea\xe5\xee\xb5\xce\x19\x38\x09\x5f\xe7\xbd",
        // Empty slot
        "\xd6\x8e\x11\x1c\xf0\x3a\x63\xa3\x62\xd9\x85\xf5\x18\x8e\x78\xd1",
        // "dlsym" - #M02L10Sffffffc3
        "\xa1\xa9\xb0\xb6\xaa\x3d\x39\x7c\xb2\xea\xe4\x45\x7b\xb5\xdf\x1d",
        // "CFArrayCreateMutable" - #M03L20S6f
        "\x2c\x29\x2e\x1d\x1d\x0e\x16\x2c\x1d\x0a\x0e\x1b\x0a\x22\x1a\x1b\x0e\x0d\x03\x0a\x6f\x4b\x65\x3d\x29\x6e\x4b\xd0\x90\x99\x82\xda",
        // "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'" - #M02L30S31
        "\x48\x48\x48\x48\xf6\xfc\xf6\x1c\x1c\xf6\xfc\xf6\x33\x33\xf6\x23\xf6\x17\x17\xf6\x09\xf6\x3c\x3c\xf6\x09\xf6\x42\x42\xf6\x29\xf6\xcf\xd8\xae\x0e\x68\xc5\x09\x6a\xe5\xa8\x62\xbb\x4e\x09\xd7\x03",
        // Empty slot
        "\xb1\x45\x09\x05\x28\x92\xde\x90\x13\xbc\xa5\xcd\xc7\xc3\x3d\xcd",
        // "CFDataGetBytePtr" - #M03L20Sb2
        "\xf1\xf4\xf6\xd3\xc6\xd3\xf5\xd7\xc6\xf0\xcb\xc6\xd7\xe2\xc6\xc0\xb2\xf6\xba\xf5\xe2\x37\xf2\x30\x34\x0b\x48\xdf\x51\x55\xb5\x32",
        // "IOIteratorNext" - #M02L10S19
        "\x30\x36\x30\x5b\x4c\x59\x48\x5b\x56\x59\x35\x4c\x5f\x5b\xe7\xc0",
        // Empty slot
        "\x8f\x3f\x93\xf3\x8d\x50\x07\x0f\x1c\xba\xef\x6c\xe7\xf4\x04\x88",
        // "SecAsn1CoderRelease" - #M03L20S3b
        "\x68\x5e\x58\x7a\x48\x55\x0a\x78\x54\x5f\x5e\x49\x69\x5e\x57\x5e\x5a\x48\x5e\x3b\x1c\x77\x77\x2c\xeb\x30\x7f\x67\x2d\x73\x9f\x8c",
        // "CC_SHA1_Update" - #M03L10S6d
        "\x2e\x2e\x32\x3e\x25\x2c\x5c\x32\x38\x1d\x09\x0c\x19\x08\x6d\x05",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M03L40Sbc
        "\x93\xef\xc5\xcf\xc8\xd9\xd1\x93\xf0\xd5\xde\xce\xdd\xce\xc5\x93\xfa\xce\xdd\xd1\xd9\xcb\xd3\xce\xd7\xcf\x93\xf5\xf3\xf7\xd5\xc8\x92\xda\xce\xdd\xd1\xd9\xcb\xd3\xce\xd7\x93\xf5\xf3\xf7\xd5\xc8\xbc\x2f\x9f\x10\xeb\x1c\x58\x69\xd1\x07\xf2\x11\x3a\x54\xbe\x91",
        // "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" - #M03L50Se2
        "\xcd\xb1\x9b\x91\x96\x87\x8f\xcd\xae\x8b\x80\x90\x83\x90\x9b\xcd\xa4\x90\x83\x8f\x87\x95\x8d\x90\x89\x91\xcd\xa1\x8d\x90\x87\xa4\x8d\x97\x8c\x86\x83\x96\x8b\x8d\x8c\xcc\x84\x90\x83\x8f\x87\x95\x8d\x90\x89\xcd\xa1\x8d\x90\x87\xa4\x8d\x97\x8c\x86\x83\x96\x8b\x8d\x8c\xe2\x9d\x20\x88\x62\x21\x2a\x5d\xe1\xc6\x2e\x3e\x97\x8a",
        // Empty slot
        "\xe1\x94\x18\xef\xb5\xb9\xbd\x08\xff\xd2\x89\xfd\xad\x12\x9b\x53",
        // Empty slot
        "\xbd\xcb\x06\xab\xa7\x84\xcd\x28\x63\x74\xec\x39\xdd\x24\xd2\x0b",
        // "IOMasterPort" - #M03L10S18
        "\x51\x57\x55\x79\x6b\x6c\x7d\x6a\x48\x77\x6a\x6c\x18\x17\x63\x6d",
        // Empty slot
        "\xbd\xd3\x43\xc9\x16\x2a\x32\x3b\x82\xc8\xed\xe2\xa8\x83\x41\xf3",
        // Empty slot
        "\x57\x7a\x80\xad\x16\xe0\xb5\xd6\xd7\x44\xab\xec\xa3\x92\xd5\xc3",
        // Empty slot
        "\x4f\xc1\x10\xca\x69\x18\x11\xca\x74\x8b\x2b\xfa\x6d\xed\x72\x8c",
        // "CFNumberCreate" - #M03L10Sec
        "\xaf\xaa\xa2\x99\x81\x8e\x89\x9e\xaf\x9e\x89\x8d\x98\x89\xec\x3e",
        // "CFDateFormatterSetFormat" - #M02L20Sffffffc4
        "\x7f\x82\x80\x9d\xb0\xa1\x82\xab\xae\xa9\x9d\xb0\xb0\xa1\xae\x8f\xa1\xb0\x82\xab\xae\xa9\x9d\xb0\x3c\x59\xde\xcd\x2a\xe1\x2a\xc0",
        // "CMSDecoderUpdateMessage" - #M02L20S18
        "\x2b\x35\x3b\x2c\x4d\x4b\x57\x4c\x4d\x5a\x3d\x58\x4c\x49\x5c\x4d\x35\x4d\x5b\x5b\x49\x4f\x4d\xe8\x1d\x79\xcd\x90\xd9\x95\x38\xb5",
        // "CFDictionaryAddValue" - #M03L20S50
        "\x13\x16\x14\x39\x33\x24\x39\x3f\x3e\x31\x22\x29\x11\x34\x34\x06\x31\x3c\x25\x35\x50\x88\x73\x04\xc6\x92\x2a\x17\xfc\xa9\xf7\x1c",
        // "CFURLCreateCopyAppendingPathComponent" - #M02L30S10
        "\x33\x36\x45\x42\x3c\x33\x62\x55\x51\x64\x55\x33\x5f\x60\x69\x31\x60\x60\x55\x5e\x54\x59\x5e\x57\x40\x51\x64\x58\x33\x5f\x5d\x60\x5f\x5e\x55\x5e\x64\xf0\x94\xa2\x24\x98\x77\x30\x0b\xdc\xb4\xaf",
        // "1.0.1" - #M02L10Sfffffff7
        "\x3a\x37\x39\x37\x3a\x09\xa4\x7e\xf3\xeb\x74\xe9\x79\x13\xa7\x35",
        // Empty slot
        "\x9d\xa7\x8d\xf0\x81\x3f\x35\xf9\x83\x81\xb9\x4b\xc0\x19\x29\xb8",
        // Empty slot
        "\x53\x62\xb7\xae\x15\x54\x80\xca\xdd\xd8\x1f\x25\x5f\x76\xa1\xdd",
        // "exit" - #M03L10S95
        "\xf0\xed\xfc\xe1\x95\x32\xbc\x51\xba\xf8\x8b\x9e\x59\x38\x3e\x95",
        // "SecRequirementCreateWithStringAndErrors" - #M02L30Sffffff96
        "\xbd\xcf\xcd\xbc\xcf\xdb\xdf\xd3\xdc\xcf\xd7\xcf\xd8\xde\xad\xdc\xcf\xcb\xde\xcf\xc1\xd3\xde\xd2\xbd\xde\xdc\xd3\xd8\xd1\xab\xd8\xce\xaf\xdc\xdc\xd9\xdc\xdd\x6a\x9d\x6d\x62\xe3\x60\x53\x4e\x6a",
        // "CMSDecoderCopySignerStatus" - #M03L20S37
        "\x74\x7a\x64\x73\x52\x54\x58\x53\x52\x45\x74\x58\x47\x4e\x64\x5e\x50\x59\x52\x45\x64\x43\x56\x43\x42\x44\x37\xd1\xca\x73\x92\xe7",
        // "anchor apple generic" - #M03L20S22
        "\x43\x4c\x41\x4a\x4d\x50\x02\x43\x52\x52\x4e\x47\x02\x45\x47\x4c\x47\x50\x4b\x41\x22\x3a\xc4\xe8\x43\x65\x85\x93\xc9\x65\x20\x02",
        // "/System/Library/Frameworks/IOKit.framework/IOKit" - #M02L40S59
        "\xd6\xfa\x20\x1a\x1b\x0c\x14\xd6\xf3\x10\x09\x19\x08\x19\x20\xd6\xed\x19\x08\x14\x0c\x1e\x16\x19\x12\x1a\xd6\xf0\xf6\xf2\x10\x1b\xd5\x0d\x19\x08\x14\x0c\x1e\x16\x19\x12\xd6\xf0\xf6\xf2\x10\x1b\xa7\xba\xfe\x31\xa8\x8e\x6c\xf7\x05\xd5\x00\x6b\x1d\x1e\x39\xc8",
        // "CFDictionaryCreateMutable" - #M03L20S2b
        "\x68\x6d\x6f\x42\x48\x5f\x42\x44\x45\x4a\x59\x52\x68\x59\x4e\x4a\x5f\x4e\x66\x5e\x5f\x4a\x49\x47\x4e\x2b\x70\x30\x0c\xea\x81\x09",
        // "SecStaticCodeCreateWithPath" - #M02L20Sffffffc3
        "\x90\xa2\xa0\x90\xb1\x9e\xb1\xa6\xa0\x80\xac\xa1\xa2\x80\xaf\xa2\x9e\xb1\xa2\x94\xa6\xb1\xa5\x8d\x9e\xb1\xa5\x3d\xd3\x6c\xbf\x82",
        // "/usr/lib/libSystem.dylib" - #M02L20Sffffffcd
        "\x62\xa8\xa6\xa5\x62\x9f\x9c\x95\x62\x9f\x9c\x95\x86\xac\xa6\xa7\x98\xa0\x61\x97\xac\x9f\x9c\x95\x33\xf2\xfd\xcf\xa3\xd1\xf0\x3a",
        // "CMSDecoderGetNumSigners" - #M02L20Sffffffa0
        "\xa3\xad\xb3\xa4\xc5\xc3\xcf\xc4\xc5\xd2\xa7\xc5\xd4\xae\xd5\xcd\xb3\xc9\xc7\xce\xc5\xd2\xd3\x60\x4b\x11\x2a\xd2\x93\x12\x81\x87",
    };
    
    
    //
    // Table for storing various pointers
    //
    static void *EDReceiptValidation_pointers[0x007f] = {
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) dlopen),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) CFStringCreateWithBytes),
        NULL,
        ((void *) CFStringCreateWithCString),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        ((void *) dlsym),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
    };
    
    
    //
    // Function pointer for string decryption
    //
    typedef void (*EDReceiptValidation_decrypt)(const char *p1, char *p2, char p3, int p4);
    
    // Function pointer for 'CC_SHA1'
    typedef unsigned char *(*_EDReceiptValidation_CC_SHA1_)(const void *data, CC_LONG len, unsigned char *md);
    // Function pointer for 'CC_SHA1_Final'
    typedef int (*_EDReceiptValidation_CC_SHA1_Final_)(unsigned char *md, CC_SHA1_CTX *c);
    // Function pointer for 'CC_SHA1_Init'
    typedef int (*_EDReceiptValidation_CC_SHA1_Init_)(CC_SHA1_CTX *c);
    // Function pointer for 'CC_SHA1_Update'
    typedef int (*_EDReceiptValidation_CC_SHA1_Update_)(CC_SHA1_CTX *c, const void *data, CC_LONG len);
    // Function pointer for 'CFArrayAppendValue'
    typedef void (*_EDReceiptValidation_CFArrayAppendValue_)(CFMutableArrayRef theArray, const void *value);
    // Function pointer for 'CFArrayCreateMutable'
    typedef CFMutableArrayRef (*_EDReceiptValidation_CFArrayCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks);
    // Function pointer for 'CFBundleCopyBundleURL'
    typedef CFURLRef (*_EDReceiptValidation_CFBundleCopyBundleURL_)(CFBundleRef bundle);
    // Function pointer for 'CFBundleGetIdentifier'
    typedef CFStringRef (*_EDReceiptValidation_CFBundleGetIdentifier_)(CFBundleRef bundle);
    // Function pointer for 'CFBundleGetMainBundle'
    typedef CFBundleRef (*_EDReceiptValidation_CFBundleGetMainBundle_)();
    // Function pointer for 'CFBundleGetValueForInfoDictionaryKey'
    typedef CFTypeRef (*_EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_)(CFBundleRef bundle, CFStringRef key);
    // Function pointer for 'CFDataAppendBytes'
    typedef void (*_EDReceiptValidation_CFDataAppendBytes_)(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length);
    // Function pointer for 'CFDataCreate'
    typedef CFDataRef (*_EDReceiptValidation_CFDataCreate_)(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length);
    // Function pointer for 'CFDataCreateMutable'
    typedef CFMutableDataRef (*_EDReceiptValidation_CFDataCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity);
    // Function pointer for 'CFDataGetBytePtr'
    typedef const UInt8 *(*_EDReceiptValidation_CFDataGetBytePtr_)(CFDataRef theData);
    // Function pointer for 'CFDataGetLength'
    typedef CFIndex (*_EDReceiptValidation_CFDataGetLength_)(CFDataRef theData);
    // Function pointer for 'CFDateFormatterCreate'
    typedef CFDateFormatterRef (*_EDReceiptValidation_CFDateFormatterCreate_)(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle);
    // Function pointer for 'CFDateFormatterCreateDateFromString'
    typedef CFDateRef (*_EDReceiptValidation_CFDateFormatterCreateDateFromString_)(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep);
    // Function pointer for 'CFDateFormatterSetFormat'
    typedef void (*_EDReceiptValidation_CFDateFormatterSetFormat_)(CFDateFormatterRef formatter, CFStringRef formatString);
    // Function pointer for 'CFDictionaryAddValue'
    typedef void (*_EDReceiptValidation_CFDictionaryAddValue_)(CFMutableDictionaryRef theDict, const void *key, const void *value);
    // Function pointer for 'CFDictionaryCreateMutable'
    typedef CFMutableDictionaryRef (*_EDReceiptValidation_CFDictionaryCreateMutable_)(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
    // Function pointer for 'CFDictionaryGetValue'
    typedef const void *(*_EDReceiptValidation_CFDictionaryGetValue_)(CFDictionaryRef theDict, const void *key);
    // Function pointer for 'CFEqual'
    typedef Boolean (*_EDReceiptValidation_CFEqual_)(CFTypeRef cf1, CFTypeRef cf2);
    // Function pointer for 'CFNumberCreate'
    typedef CFNumberRef (*_EDReceiptValidation_CFNumberCreate_)(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr);
    // Function pointer for 'CFRelease'
    typedef void (*_EDReceiptValidation_CFRelease_)(CFTypeRef cf);
    // Function pointer for 'CFStringCompare'
    typedef CFComparisonResult (*_EDReceiptValidation_CFStringCompare_)(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
    // Function pointer for 'CFStringCreateWithBytes'
    typedef CFStringRef (*_EDReceiptValidation_CFStringCreateWithBytes_)(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
    // Function pointer for 'CFStringCreateWithCString'
    typedef CFStringRef (*_EDReceiptValidation_CFStringCreateWithCString_)(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding);
    // Function pointer for 'CFURLCreateCopyAppendingPathComponent'
    typedef CFURLRef (*_EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_)(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
    // Function pointer for 'CFURLCreateDataAndPropertiesFromResource'
    typedef Boolean (*_EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_)(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode);
    // Function pointer for 'CFURLCreateWithFileSystemPathRelativeToBase'
    typedef CFURLRef (*_EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_)(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL);
    // Function pointer for 'CMSDecoderCopyContent'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderCopyContent_)(CMSDecoderRef cmsDecoder, CFDataRef *contentOut);
    // Function pointer for 'CMSDecoderCopySignerStatus'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderCopySignerStatus_)(CMSDecoderRef cmsDecoder, size_t signerIndex, CFTypeRef policyOrArray, Boolean evaluateSecTrust, CMSSignerStatus *signerStatusOut, SecTrustRef *secTrustOut, OSStatus *certVerifyResultCodeOut);
    // Function pointer for 'CMSDecoderCreate'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderCreate_)(CMSDecoderRef *cmsDecoderOut);
    // Function pointer for 'CMSDecoderFinalizeMessage'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderFinalizeMessage_)(CMSDecoderRef cmsDecoder);
    // Function pointer for 'CMSDecoderGetNumSigners'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderGetNumSigners_)(CMSDecoderRef cmsDecoder, size_t *numSignersOut);
    // Function pointer for 'CMSDecoderUpdateMessage'
    typedef OSStatus (*_EDReceiptValidation_CMSDecoderUpdateMessage_)(CMSDecoderRef cmsDecoder, const void *msgBytes, size_t msgBytesLen);
    // Function pointer for 'dlopen'
    typedef void *(*_EDReceiptValidation_dlopen_)(const char * __path, int __mode);
    // Function pointer for 'dlsym'
    typedef void *(*_EDReceiptValidation_dlsym_)(void * __handle, const char * __symbol);
    // Function pointer for 'exit'
    typedef void (*_EDReceiptValidation_exit_)(int status);
    // Function pointer for 'IOBSDNameMatching'
    typedef CFMutableDictionaryRef (*_EDReceiptValidation_IOBSDNameMatching_)(mach_port_t masterPort, uint32_t options, const char * bsdName);
    // Function pointer for 'IOIteratorNext'
    typedef io_object_t (*_EDReceiptValidation_IOIteratorNext_)(io_iterator_t iterator);
    // Function pointer for 'IOMasterPort'
    typedef kern_return_t (*_EDReceiptValidation_IOMasterPort_)(mach_port_t bootstrapPort, mach_port_t *masterPort);
    // Function pointer for 'IOObjectRelease'
    typedef kern_return_t (*_EDReceiptValidation_IOObjectRelease_)(io_object_t object);
    // Function pointer for 'IORegistryEntryCreateCFProperty'
    typedef CFTypeRef (*_EDReceiptValidation_IORegistryEntryCreateCFProperty_)(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options);
    // Function pointer for 'IORegistryEntryGetParentEntry'
    typedef kern_return_t (*_EDReceiptValidation_IORegistryEntryGetParentEntry_)(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t * parent);
    // Function pointer for 'IOServiceGetMatchingServices'
    typedef kern_return_t (*_EDReceiptValidation_IOServiceGetMatchingServices_)(mach_port_t masterPort, CFDictionaryRef matching, io_iterator_t *existing);
    // Function pointer for 'NSApplicationMain'
    typedef int (*_EDReceiptValidation_NSApplicationMain_)(int argc, const char *argv[]);
    // Function pointer for 'SecAsn1CoderCreate'
    typedef OSStatus (*_EDReceiptValidation_SecAsn1CoderCreate_)(SecAsn1CoderRef *coder);
    // Function pointer for 'SecAsn1CoderRelease'
    typedef OSStatus (*_EDReceiptValidation_SecAsn1CoderRelease_)(SecAsn1CoderRef coder);
    // Function pointer for 'SecAsn1Decode'
    typedef OSStatus (*_EDReceiptValidation_SecAsn1Decode_)(SecAsn1CoderRef coder, const void *src, size_t len, const SecAsn1Template *templates, void *dest);
    // Function pointer for 'SecPolicyCreateBasicX509'
    typedef SecPolicyRef (*_EDReceiptValidation_SecPolicyCreateBasicX509_)(void);
    // Function pointer for 'SecRequirementCreateWithString'
    typedef OSStatus (*_EDReceiptValidation_SecRequirementCreateWithString_)(CFStringRef text, SecCSFlags flags, SecRequirementRef *requirement);
    // Function pointer for 'SecRequirementCreateWithStringAndErrors'
    typedef OSStatus (*_EDReceiptValidation_SecRequirementCreateWithStringAndErrors_)(CFStringRef text, SecCSFlags flags, CFErrorRef *errors, SecRequirementRef *requirement);
    // Function pointer for 'SecStaticCodeCheckValidity'
    typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCheckValidity_)(SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement);
    // Function pointer for 'SecStaticCodeCheckValidityWithErrors'
    typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_)(SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement, CFErrorRef *errors);
    // Function pointer for 'SecStaticCodeCreateWithPath'
    typedef OSStatus (*_EDReceiptValidation_SecStaticCodeCreateWithPath_)(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode);
    
    
    // Function wrapper for 'CC_SHA1'
#define EDReceiptValidation_CC_SHA1_ ((_EDReceiptValidation_CC_SHA1_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 40, 93, 32, EDReceiptValidation_ObfuscationFunction1, 67, -42, 16))
    // Function wrapper for 'CC_SHA1_Final'
#define EDReceiptValidation_CC_SHA1_Final_ ((_EDReceiptValidation_CC_SHA1_Final_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 125, -51, 32, EDReceiptValidation_ObfuscationFunction2, 75, 215, 16))
    // Function wrapper for 'CC_SHA1_Init'
#define EDReceiptValidation_CC_SHA1_Init_ ((_EDReceiptValidation_CC_SHA1_Init_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 47, 3, 32, EDReceiptValidation_ObfuscationFunction3, 77, 186, 16))
    // Function wrapper for 'CC_SHA1_Update'
#define EDReceiptValidation_CC_SHA1_Update_ ((_EDReceiptValidation_CC_SHA1_Update_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 47, 3, 32, EDReceiptValidation_ObfuscationFunction3, 101, 109, 16))
    // Function wrapper for 'CFArrayAppendValue'
#define EDReceiptValidation_CFArrayAppendValue_ ((_EDReceiptValidation_CFArrayAppendValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 103, 226, 80, EDReceiptValidation_ObfuscationFunction4, 58, -78, 32))
    // Function wrapper for 'CFArrayCreateMutable'
#define EDReceiptValidation_CFArrayCreateMutable_ ((_EDReceiptValidation_CFArrayCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction3, 94, 111, 32))
    // Function wrapper for 'CFBundleCopyBundleURL'
#define EDReceiptValidation_CFBundleCopyBundleURL_ ((_EDReceiptValidation_CFBundleCopyBundleURL_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 103, 226, 80, EDReceiptValidation_ObfuscationFunction2, 32, 216, 32))
    // Function wrapper for 'CFBundleGetIdentifier'
#define EDReceiptValidation_CFBundleGetIdentifier_ ((_EDReceiptValidation_CFBundleGetIdentifier_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 89, -6, 80, EDReceiptValidation_ObfuscationFunction1, 38, 91, 32))
    // Function wrapper for 'CFBundleGetMainBundle'
#define EDReceiptValidation_CFBundleGetMainBundle_ ((_EDReceiptValidation_CFBundleGetMainBundle_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction3, 37, 138, 32))
    // Function wrapper for 'CFBundleGetValueForInfoDictionaryKey'
#define EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_ ((_EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 89, -6, 80, EDReceiptValidation_ObfuscationFunction4, 33, -29, 48))
    // Function wrapper for 'CFDataAppendBytes'
#define EDReceiptValidation_CFDataAppendBytes_ ((_EDReceiptValidation_CFDataAppendBytes_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 89, -6, 80, EDReceiptValidation_ObfuscationFunction2, 48, 100, 32))
    // Function wrapper for 'CFDataCreate'
#define EDReceiptValidation_CFDataCreate_ ((_EDReceiptValidation_CFDataCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 103, 226, 80, EDReceiptValidation_ObfuscationFunction4, 69, -102, 16))
    // Function wrapper for 'CFDataCreateMutable'
#define EDReceiptValidation_CFDataCreateMutable_ ((_EDReceiptValidation_CFDataCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 103, 226, 80, EDReceiptValidation_ObfuscationFunction1, 7, -62, 32))
    // Function wrapper for 'CFDataGetBytePtr'
#define EDReceiptValidation_CFDataGetBytePtr_ ((_EDReceiptValidation_CFDataGetBytePtr_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 89, -6, 80, EDReceiptValidation_ObfuscationFunction3, 97, 178, 32))
    // Function wrapper for 'CFDataGetLength'
#define EDReceiptValidation_CFDataGetLength_ ((_EDReceiptValidation_CFDataGetLength_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 89, -6, 80, EDReceiptValidation_ObfuscationFunction3, 21, 131, 16))
    // Function wrapper for 'CFDateFormatterCreate'
#define EDReceiptValidation_CFDateFormatterCreate_ ((_EDReceiptValidation_CFDateFormatterCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 5, 161, 80, EDReceiptValidation_ObfuscationFunction1, 44, -113, 32))
    // Function wrapper for 'CFDateFormatterCreateDateFromString'
#define EDReceiptValidation_CFDateFormatterCreateDateFromString_ ((_EDReceiptValidation_CFDateFormatterCreateDateFromString_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction4, 24, 13, 48))
    // Function wrapper for 'CFDateFormatterSetFormat'
#define EDReceiptValidation_CFDateFormatterSetFormat_ ((_EDReceiptValidation_CFDateFormatterSetFormat_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 89, -6, 80, EDReceiptValidation_ObfuscationFunction4, 111, -60, 32))
    // Function wrapper for 'CFDictionaryAddValue'
#define EDReceiptValidation_CFDictionaryAddValue_ ((_EDReceiptValidation_CFDictionaryAddValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction3, 113, 80, 32))
    // Function wrapper for 'CFDictionaryCreateMutable'
#define EDReceiptValidation_CFDictionaryCreateMutable_ ((_EDReceiptValidation_CFDictionaryCreateMutable_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 5, 161, 80, EDReceiptValidation_ObfuscationFunction2, 123, 43, 32))
    // Function wrapper for 'CFDictionaryGetValue'
#define EDReceiptValidation_CFDictionaryGetValue_ ((_EDReceiptValidation_CFDictionaryGetValue_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction3, 43, 23, 32))
    // Function wrapper for 'CFEqual'
#define EDReceiptValidation_CFEqual_ ((_EDReceiptValidation_CFEqual_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction4, 85, 47, 16))
    // Function wrapper for 'CFNumberCreate'
#define EDReceiptValidation_CFNumberCreate_ ((_EDReceiptValidation_CFNumberCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction2, 110, 236, 16))
    // Function wrapper for 'CFRelease'
#define EDReceiptValidation_CFRelease_ ((_EDReceiptValidation_CFRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 103, 226, 80, EDReceiptValidation_ObfuscationFunction4, 55, -44, 16))
    // Function wrapper for 'CFStringCompare'
#define EDReceiptValidation_CFStringCompare_ ((_EDReceiptValidation_CFStringCompare_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction1, 90, -110, 16))
    // Function wrapper for 'CFStringCreateWithBytes'
#define EDReceiptValidation_CFStringCreateWithBytes_ ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_pointers[61])
    // Function wrapper for 'CFStringCreateWithCString'
#define EDReceiptValidation_CFStringCreateWithCString_ ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_pointers[63])
    // Function wrapper for 'CFURLCreateCopyAppendingPathComponent'
#define EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_ ((_EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 5, 161, 80, EDReceiptValidation_ObfuscationFunction4, 114, 16, 48))
    // Function wrapper for 'CFURLCreateDataAndPropertiesFromResource'
#define EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_ ((_EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction3, 2, 202, 48))
    // Function wrapper for 'CFURLCreateWithFileSystemPathRelativeToBase'
#define EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_ ((_EDReceiptValidation_CFURLCreateWithFileSystemPathRelativeToBase_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 78, 192, 80, EDReceiptValidation_ObfuscationFunction3, 14, 108, 48))
    // Function wrapper for 'CMSDecoderCopyContent'
#define EDReceiptValidation_CMSDecoderCopyContent_ ((_EDReceiptValidation_CMSDecoderCopyContent_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 81, 208, 64, EDReceiptValidation_ObfuscationFunction1, 13, -118, 32))
    // Function wrapper for 'CMSDecoderCopySignerStatus'
#define EDReceiptValidation_CMSDecoderCopySignerStatus_ ((_EDReceiptValidation_CMSDecoderCopySignerStatus_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 1, 70, 64, EDReceiptValidation_ObfuscationFunction3, 120, 55, 32))
    // Function wrapper for 'CMSDecoderCreate'
#define EDReceiptValidation_CMSDecoderCreate_ ((_EDReceiptValidation_CMSDecoderCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 73, 68, 64, EDReceiptValidation_ObfuscationFunction3, 49, 184, 32))
    // Function wrapper for 'CMSDecoderFinalizeMessage'
#define EDReceiptValidation_CMSDecoderFinalizeMessage_ ((_EDReceiptValidation_CMSDecoderFinalizeMessage_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 81, 208, 64, EDReceiptValidation_ObfuscationFunction1, 70, 67, 32))
    // Function wrapper for 'CMSDecoderGetNumSigners'
#define EDReceiptValidation_CMSDecoderGetNumSigners_ ((_EDReceiptValidation_CMSDecoderGetNumSigners_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 81, 208, 64, EDReceiptValidation_ObfuscationFunction1, 126, -96, 32))
    // Function wrapper for 'CMSDecoderUpdateMessage'
#define EDReceiptValidation_CMSDecoderUpdateMessage_ ((_EDReceiptValidation_CMSDecoderUpdateMessage_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 73, 68, 64, EDReceiptValidation_ObfuscationFunction4, 112, 24, 32))
    // Function wrapper for 'dlopen'
#define EDReceiptValidation_dlopen_ ((_EDReceiptValidation_dlopen_) EDReceiptValidation_pointers[36])
    // Function wrapper for 'dlsym'
#define EDReceiptValidation_dlsym_ ((_EDReceiptValidation_dlsym_) EDReceiptValidation_pointers[93])
    // Function wrapper for 'exit'
#define EDReceiptValidation_exit_ ((_EDReceiptValidation_exit_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 125, -51, 32, EDReceiptValidation_ObfuscationFunction2, 118, 149, 16))
    // Function wrapper for 'IOBSDNameMatching'
#define EDReceiptValidation_IOBSDNameMatching_ ((_EDReceiptValidation_IOBSDNameMatching_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 87, 31, 64, EDReceiptValidation_ObfuscationFunction4, 83, -24, 32))
    // Function wrapper for 'IOIteratorNext'
#define EDReceiptValidation_IOIteratorNext_ ((_EDReceiptValidation_IOIteratorNext_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, 188, 64, EDReceiptValidation_ObfuscationFunction4, 98, 25, 16))
    // Function wrapper for 'IOMasterPort'
#define EDReceiptValidation_IOMasterPort_ ((_EDReceiptValidation_IOMasterPort_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 122, 89, 64, EDReceiptValidation_ObfuscationFunction2, 106, 24, 16))
    // Function wrapper for 'IOObjectRelease'
#define EDReceiptValidation_IOObjectRelease_ ((_EDReceiptValidation_IOObjectRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 6, -33, 64, EDReceiptValidation_ObfuscationFunction4, 82, -13, 16))
    // Function wrapper for 'IORegistryEntryCreateCFProperty'
#define EDReceiptValidation_IORegistryEntryCreateCFProperty_ ((_EDReceiptValidation_IORegistryEntryCreateCFProperty_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 122, 89, 64, EDReceiptValidation_ObfuscationFunction2, 41, 61, 32))
    // Function wrapper for 'IORegistryEntryGetParentEntry'
#define EDReceiptValidation_IORegistryEntryGetParentEntry_ ((_EDReceiptValidation_IORegistryEntryGetParentEntry_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, 188, 64, EDReceiptValidation_ObfuscationFunction1, 11, -28, 32))
    // Function wrapper for 'IOServiceGetMatchingServices'
#define EDReceiptValidation_IOServiceGetMatchingServices_ ((_EDReceiptValidation_IOServiceGetMatchingServices_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 102, 188, 64, EDReceiptValidation_ObfuscationFunction2, 26, 89, 32))
    // Function wrapper for 'NSApplicationMain'
#define EDReceiptValidation_NSApplicationMain_ ((_EDReceiptValidation_NSApplicationMain_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction1, 25, -124, 64, EDReceiptValidation_ObfuscationFunction4, 28, -18, 32))
    // Function wrapper for 'SecAsn1CoderCreate'
#define EDReceiptValidation_SecAsn1CoderCreate_ ((_EDReceiptValidation_SecAsn1CoderCreate_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 1, 70, 64, EDReceiptValidation_ObfuscationFunction4, 51, 1, 32))
    // Function wrapper for 'SecAsn1CoderRelease'
#define EDReceiptValidation_SecAsn1CoderRelease_ ((_EDReceiptValidation_SecAsn1CoderRelease_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 1, 70, 64, EDReceiptValidation_ObfuscationFunction3, 100, 59, 32))
    // Function wrapper for 'SecAsn1Decode'
#define EDReceiptValidation_SecAsn1Decode_ ((_EDReceiptValidation_SecAsn1Decode_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 73, 68, 64, EDReceiptValidation_ObfuscationFunction3, 16, 108, 16))
    // Function wrapper for 'SecPolicyCreateBasicX509'
#define EDReceiptValidation_SecPolicyCreateBasicX509_ ((_EDReceiptValidation_SecPolicyCreateBasicX509_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 73, 68, 64, EDReceiptValidation_ObfuscationFunction4, 91, 75, 32))
    // Function wrapper for 'SecRequirementCreateWithString'
#define EDReceiptValidation_SecRequirementCreateWithString_ ((_EDReceiptValidation_SecRequirementCreateWithString_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 1, 70, 64, EDReceiptValidation_ObfuscationFunction1, 88, 117, 32))
    // Function wrapper for 'SecRequirementCreateWithStringAndErrors'
#define EDReceiptValidation_SecRequirementCreateWithStringAndErrors_ ((_EDReceiptValidation_SecRequirementCreateWithStringAndErrors_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction4, 73, 68, 64, EDReceiptValidation_ObfuscationFunction4, 119, -106, 48))
    // Function wrapper for 'SecStaticCodeCheckValidity'
#define EDReceiptValidation_SecStaticCodeCheckValidity_ ((_EDReceiptValidation_SecStaticCodeCheckValidity_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 1, 70, 64, EDReceiptValidation_ObfuscationFunction3, 46, 70, 32))
    // Function wrapper for 'SecStaticCodeCheckValidityWithErrors'
#define EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_ ((_EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction3, 1, 70, 64, EDReceiptValidation_ObfuscationFunction1, 17, -13, 48))
    // Function wrapper for 'SecStaticCodeCreateWithPath'
#define EDReceiptValidation_SecStaticCodeCreateWithPath_ ((_EDReceiptValidation_SecStaticCodeCreateWithPath_) EDReceiptValidation_LookupFunction1(EDReceiptValidation_ObfuscationFunction2, 81, 208, 64, EDReceiptValidation_ObfuscationFunction1, 124, -61, 32))
    
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction4(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] + _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction4CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        char *_tmp2 = _tmp1;
        EDReceiptValidation_ObfuscationFunction4(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction1(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] + _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction1CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        EDReceiptValidation_ObfuscationFunction1(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_CFStringCreateWithCString_)(kCFAllocatorDefault, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction2(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction2CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        char *_tmp2 = _tmp1;
        EDReceiptValidation_ObfuscationFunction2(_p1, _tmp1, _p3, _p4);
        while(*_tmp2) { _tmp2++; }
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _tmp1, (CFIndex) (_tmp2 - _tmp1), kCFStringEncodingUTF8, false);
        return _str1;
    }
    
    //
    // CodeBlock ObfuscationFunction
    //
    inline static void EDReceiptValidation_ObfuscationFunction3(const char *_p1, char *_p2, char _p3, int _p4) {
        int _i1 = 0;
        while(_i1 < _p4) { _p2[_i1] = _p1[_i1] ^ _p3; _i1++; }
    }
    
    inline static CFStringRef EDReceiptValidation_ObfuscationFunction3CF(const char *_p1, char _p3, int _p4) {
        char _tmp1[0x50];
        EDReceiptValidation_ObfuscationFunction3(_p1, _tmp1, _p3, _p4);
        CFStringRef _str1 = ((_EDReceiptValidation_CFStringCreateWithCString_) EDReceiptValidation_CFStringCreateWithCString_)(kCFAllocatorDefault, _tmp1, kCFStringEncodingUTF8);
        return _str1;
    }
    
    //
    // CodeBlock LookupFunction
    //
    inline static void *EDReceiptValidation_LookupFunction1(EDReceiptValidation_decrypt _func1, int _index1, char _seed1, int _len1, EDReceiptValidation_decrypt _func2, int _index2, char _seed2, int _len2) {
        char tmp[0x50];
        // Load the library if needed
        if (EDReceiptValidation_pointers[_index1] == NULL) {
            _func1(EDReceiptValidation_strings[_index1], tmp, _seed1, _len1);
            EDReceiptValidation_pointers[_index1] = ((_EDReceiptValidation_dlopen_) EDReceiptValidation_dlopen_)(tmp, RTLD_LAZY);
        }
        // Locate the function if needed
        if (EDReceiptValidation_pointers[_index2] == NULL) {
            _func2(EDReceiptValidation_strings[_index2], tmp, _seed2, _len2);
            EDReceiptValidation_pointers[_index2] = ((_EDReceiptValidation_dlsym_) EDReceiptValidation_dlsym_)(EDReceiptValidation_pointers[_index1], tmp);
        }
        return EDReceiptValidation_pointers[_index2];
    }
    
    //
    // CodeBlock GetMainBundle
    //
#if DEBUG
    inline static void EDReceiptValidation_GetMainBundle1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        // Retrieve the main bundle
        EDReceiptValidation_ctx->EDReceiptValidation_mainBundle = EDReceiptValidation_CFBundleGetMainBundle_();
        if (!EDReceiptValidation_ctx->EDReceiptValidation_mainBundle) {
            EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
        }
    }
#else
#define EDReceiptValidation_GetMainBundle1(EDReceiptValidation_ctx) { \
EDReceiptValidation_ctx->EDReceiptValidation_mainBundle = EDReceiptValidation_CFBundleGetMainBundle_(); \
if (!EDReceiptValidation_ctx->EDReceiptValidation_mainBundle) { \
EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
} \
}
#endif
    
    //
    // CodeBlock LoadReceipt
    //
#if DEBUG
    inline static void EDReceiptValidation_LoadReceipt1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1;
        CFURLRef _url1, _url2;
        SInt32 _errorCode;
        volatile int _code = 56; _code -= 22; _code *= 5; _code += 3;
        // Compute the path to the receipt
        _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
        _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[34]), 83, 32);
        _url2 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url1, _str1, false);
        EDReceiptValidation_CFRelease_(_str1);
        EDReceiptValidation_CFRelease_(_url1);
        // Load the receipt data
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptData);
        EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_(kCFAllocatorDefault, _url2, (CFDataRef *) &(EDReceiptValidation_ctx->EDReceiptValidation_receiptData), NULL, NULL, &_errorCode);
        if (_errorCode) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_url1);
        }
        EDReceiptValidation_CFRelease_(_url2);
    }
#else
#define EDReceiptValidation_LoadReceipt1(EDReceiptValidation_ctx) { \
CFStringRef _str1; \
CFURLRef _url1, _url2; \
SInt32 _errorCode; \
volatile int _code = 145; _code -= 88; _code *= 3; _code += 2; \
_url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
_str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[34]), 83, 32); \
_url2 = EDReceiptValidation_CFURLCreateCopyAppendingPathComponent_(kCFAllocatorDefault, _url1, _str1, false); \
EDReceiptValidation_CFRelease_(_str1); \
EDReceiptValidation_CFRelease_(_url1); \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptData); \
EDReceiptValidation_CFURLCreateDataAndPropertiesFromResource_(kCFAllocatorDefault, _url2, (CFDataRef *) &(EDReceiptValidation_ctx->EDReceiptValidation_receiptData), NULL, NULL, &_errorCode); \
if (_errorCode) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_url1); \
} \
EDReceiptValidation_CFRelease_(_url2); \
}
#endif
    
    //
    // CodeBlock GetMacAddress
    //
#if DEBUG
    inline static void EDReceiptValidation_GetMacAddress1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        kern_return_t _kernResult;
        mach_port_t _master_port;
        CFMutableDictionaryRef _matchingDict;
        io_iterator_t _iterator;
        io_object_t _service, _parentService;
        volatile int _code = 17; _code -= 3; _code *= 12; _code += 5;
        char *_str1;
        CFStringRef _str2;
        _str2 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[18]), -75, 16);
        // Open a MACH port
        _kernResult = EDReceiptValidation_IOMasterPort_(MACH_PORT_NULL, &_master_port);
        if (_kernResult != KERN_SUCCESS) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_GetMacAddress1__bail;
            EDReceiptValidation_CFRelease_(_str2);
        }
        // Create a search for primary interface
        char _str1_[0x50];
        EDReceiptValidation_ObfuscationFunction3((EDReceiptValidation_strings[12]), _str1_, 150, 16);
        _str1 = _str1_;
        _matchingDict = EDReceiptValidation_IOBSDNameMatching_(_master_port, 0, _str1);
        if (!_matchingDict) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_GetMacAddress1__bail;
            EDReceiptValidation_CFRelease_(_str1);
        }
        // Perform the search
        _kernResult = EDReceiptValidation_IOServiceGetMatchingServices_(_master_port, _matchingDict, &_iterator);
        if (_kernResult != KERN_SUCCESS) {
            goto EDReceiptValidation_GetMacAddress1__bail;
            EDReceiptValidation_CFRelease_(_str1);
        }
        // Iterate over the result
        while((_service = EDReceiptValidation_IOIteratorNext_(_iterator)) != 0) {
            _kernResult = EDReceiptValidation_IORegistryEntryGetParentEntry_(_service, kIOServicePlane, &_parentService);
            if (_kernResult == KERN_SUCCESS) {
                if (EDReceiptValidation_ctx->EDReceiptValidation_macData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_macData);
                EDReceiptValidation_ctx->EDReceiptValidation_macData = (CFDataRef) EDReceiptValidation_IORegistryEntryCreateCFProperty_(_parentService, _str2, kCFAllocatorDefault, 0);
                EDReceiptValidation_IOObjectRelease_(_parentService);
            }
            EDReceiptValidation_IOObjectRelease_(_iterator);
            EDReceiptValidation_IOObjectRelease_(_service);
        }
    EDReceiptValidation_GetMacAddress1__bail:
        EDReceiptValidation_CFRelease_(_str2);
    }
#else
#define EDReceiptValidation_GetMacAddress1(EDReceiptValidation_ctx) { \
kern_return_t _kernResult; \
mach_port_t _master_port; \
CFMutableDictionaryRef _matchingDict; \
io_iterator_t _iterator; \
io_object_t _service, _parentService; \
volatile int _code = 161; _code -= 104; _code *= 3; _code += 2; \
char *_str1; \
CFStringRef _str2; \
_str2 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[18]), -75, 16);  \
_kernResult = EDReceiptValidation_IOMasterPort_(MACH_PORT_NULL, &_master_port); \
if (_kernResult != KERN_SUCCESS) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_GetMacAddress1__bail; \
EDReceiptValidation_CFRelease_(_str2); \
} \
char _str1_[0x50]; \
EDReceiptValidation_ObfuscationFunction3((EDReceiptValidation_strings[12]), _str1_, 150, 16); \
_str1 = _str1_; \
_matchingDict = EDReceiptValidation_IOBSDNameMatching_(_master_port, 0, _str1); \
if (!_matchingDict) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_GetMacAddress1__bail; \
EDReceiptValidation_CFRelease_(_str1); \
} \
_kernResult = EDReceiptValidation_IOServiceGetMatchingServices_(_master_port, _matchingDict, &_iterator); \
if (_kernResult != KERN_SUCCESS) { \
goto EDReceiptValidation_GetMacAddress1__bail; \
EDReceiptValidation_CFRelease_(_str1); \
} \
while((_service = EDReceiptValidation_IOIteratorNext_(_iterator)) != 0) { \
_kernResult = EDReceiptValidation_IORegistryEntryGetParentEntry_(_service, kIOServicePlane, &_parentService); \
if (_kernResult == KERN_SUCCESS) { \
if (EDReceiptValidation_ctx->EDReceiptValidation_macData) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_macData); \
EDReceiptValidation_ctx->EDReceiptValidation_macData = (CFDataRef) EDReceiptValidation_IORegistryEntryCreateCFProperty_(_parentService, _str2, kCFAllocatorDefault, 0); \
EDReceiptValidation_IOObjectRelease_(_parentService); \
} \
EDReceiptValidation_IOObjectRelease_(_iterator); \
EDReceiptValidation_IOObjectRelease_(_service); \
} \
EDReceiptValidation_GetMacAddress1__bail: \
EDReceiptValidation_CFRelease_(_str2); \
}
#endif
    
    //
    // CodeBlock GetReceiptInformation
    //
#if DEBUG
    //
    // Extract an ASN.1 INTEGER value
    //
    inline static void EDReceiptValidation_GetReceiptInformation1X(const EDReceiptValidation_ASN1_DATA *_asn1data, int *_payload) {
        uint8 *_ptr = _asn1data->data;
        size_t _size = _asn1data->length;
        *_payload = 0;
        do {
            *_payload <<= 8;
            *_payload += (uint8) *_ptr++;
        } while(--_size > 0);
    }
#else
    inline static void EDReceiptValidation_GetReceiptInformation1X(const EDReceiptValidation_ASN1_DATA *_asn1data, int *_payload) { \
        uint8 *_ptr = _asn1data->data; \
        size_t _size = _asn1data->length; \
        *_payload = 0; \
        do { \
            *_payload <<= 8; \
            *_payload += (uint8) *_ptr++; \
        } while(--_size > 0); \
    }
#endif
    
#if DEBUG
    inline static void EDReceiptValidation_GetReceiptInformation1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        EDReceiptValidation_Parsing _receiptContext, _inappContext, *_currentContext;
        CMSDecoderRef _decoder = NULL;
        CFDataRef _content = NULL;
        CFNumberRef _key = NULL;
        SecAsn1CoderRef _asn1decoder = NULL;
        OSStatus _status;
        EDReceiptValidation_Payload _payload = { NULL };
        EDReceiptValidation_ReceiptAttribute *_current;
        CFDateFormatterRef _formatter;
        EDReceiptValidation_ReceiptAttributeType _key1, _key2;
        CFTypeRef _value1, _value2;
        EDReceiptValidation_ASN1_DATA _asn1data;
        int _type, _integer;
        // Create a decoder for the encrypted message
        _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Decrypt the message (update pass)
        _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData));
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Decrypt the message (final pass)
        _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Get the message content
        _status = EDReceiptValidation_CMSDecoderCopyContent_(_decoder, &_content);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Create the ASN.1 parser
        _status = EDReceiptValidation_SecAsn1CoderCreate_(&_asn1decoder);
        if (_status) {
            goto EDReceiptValidation_GetReceiptInformation1__bail;
        }
        // Create a formatter to parse ISO-3339 dates
        _formatter = EDReceiptValidation_CFDateFormatterCreate_(kCFAllocatorDefault, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
        _value1 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[95]), 49, 48);
        EDReceiptValidation_CFDateFormatterSetFormat_(_formatter, (CFStringRef) _value1);
        EDReceiptValidation_CFRelease_(_value1);
        // Create the receipt parsing context
        _receiptContext.EDReceiptValidation_source = EDReceiptValidation_CFDataGetBytePtr_(_content);
        _receiptContext.EDReceiptValidation_length = EDReceiptValidation_CFDataGetLength_(_content);
        _receiptContext.EDReceiptValidation_dictionary = NULL;
        _receiptContext.EDReceiptValidation_parent = NULL;
        _currentContext = &_receiptContext;
        while(true) {
            if (!_currentContext->EDReceiptValidation_dictionary) {
                // Create the target dictionary
                _currentContext->EDReceiptValidation_dictionary = EDReceiptValidation_CFDictionaryCreateMutable_(kCFAllocatorDefault, (CFIndex) 0x50, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                // Decode the receipt payload from ASN.1
                _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _currentContext->EDReceiptValidation_source, _currentContext->EDReceiptValidation_length, EDReceiptValidation_kSetOfReceiptAttributeTemplate, &_payload);
                if (_status) {
                    goto EDReceiptValidation_GetReceiptInformation1__bail;
                }
                _currentContext->EDReceiptValidation_pointer = _payload.attributes;
            }
            // Iterate over attributes
            while(*_currentContext->EDReceiptValidation_pointer) {
                _current = *_currentContext->EDReceiptValidation_pointer++;
                EDReceiptValidation_GetReceiptInformation1X((&_current->type), (&_type));
                _key1 = _key2 = EDReceiptValidation_DataStoreNone;
                _value1 = _value2 = NULL;
                // Extract the value
                switch(_type) {
                        // Attributes encoded as ASN.1 UTF8STRING
                    case EDReceiptValidation_ReceiptAttributeTypeBundleId:
                    case EDReceiptValidation_ReceiptAttributeTypeBundleVersion:
                    case EDReceiptValidation_InAppAttributeTypeProductIdentifer:
                    case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer:
                    case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer:
                        _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1UTF8StringTemplate, &_asn1data);
                        if (_status) {
                            goto EDReceiptValidation_GetReceiptInformation1__bail;
                        }
                        _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingUTF8, false);
                        _value2 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length);
                        break;
                        // Attributes encoded as ASN.1 IA5STRING
                    case EDReceiptValidation_InAppAttributeTypePurchaseDate:
                    case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate:
                        _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IA5StringTemplate, &_asn1data);
                        if (_status) {
                            goto EDReceiptValidation_GetReceiptInformation1__bail;
                        }
                        _value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingASCII, false);
                        _value2 = EDReceiptValidation_CFDateFormatterCreateDateFromString_(kCFAllocatorDefault, _formatter, (CFStringRef) _value1, NULL);
                        break;
                        // Attributes encoded as ASN.1 INTEGER
                    case EDReceiptValidation_InAppAttributeTypeQuantity:
                        _status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IntegerTemplate, &_asn1data);
                        if (_status) {
                            goto EDReceiptValidation_GetReceiptInformation1__bail;
                        }
                        EDReceiptValidation_GetReceiptInformation1X((&_asn1data), (&_integer));
                        _value1 = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_integer);
                        break;
                        // Attributes encoded as ASN.1 OCTETSTRING
                    case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue:
                    case EDReceiptValidation_ReceiptAttributeTypeHash:
                        _value1 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length);
                        break;
                    default:
                        break;
                }
                // Assign the key for storage
                switch(_type) {
                    case EDReceiptValidation_ReceiptAttributeTypeBundleId:
                        _key1 = EDReceiptValidation_DataStoreBundleId;
                        _key2 = EDReceiptValidation_DataStoreBundleIdData;
                        break;
                    case EDReceiptValidation_ReceiptAttributeTypeBundleVersion:
                        _key1 = EDReceiptValidation_DataStoreBundleVersion;
                        _key2 = EDReceiptValidation_DataStoreBundleVersionData;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeProductIdentifer:
                        _key1 = EDReceiptValidation_InAppAttributeTypeProductIdentifer;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer:
                        _key1 = EDReceiptValidation_InAppAttributeTypeTransactionIdentifer;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer:
                        _key1 = EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer;
                        break;
                    case EDReceiptValidation_InAppAttributeTypePurchaseDate:
                        _key2 = EDReceiptValidation_InAppAttributeTypePurchaseDate;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate:
                        _key2 = EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate;
                        break;
                    case EDReceiptValidation_InAppAttributeTypeQuantity:
                        _key1 = EDReceiptValidation_InAppAttributeTypeQuantity;
                        break;
                    case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue:
                        _key1 = EDReceiptValidation_DataStoreOpaqueValue;
                        break;
                    case EDReceiptValidation_ReceiptAttributeTypeHash:
                        _key1 = EDReceiptValidation_DataStoreHash;
                        break;
                    default:
                        break;
                }
                // Store data if any
                if (_key1 != EDReceiptValidation_DataStoreNone) {
                    _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1);
                    EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value1);
                    EDReceiptValidation_CFRelease_(_key);
                }
                // Store data if any
                if (_key2 != EDReceiptValidation_DataStoreNone) {
                    _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key2);
                    EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value2);
                    EDReceiptValidation_CFRelease_(_key);
                }
                if (_value1) EDReceiptValidation_CFRelease_(_value1);
                if (_value2) EDReceiptValidation_CFRelease_(_value2);
                // Step into for InApp purchases
                if (_type == EDReceiptValidation_ReceiptAttributeTypeInAppPurchase) {
                    _inappContext.EDReceiptValidation_source = _current->value.data;
                    _inappContext.EDReceiptValidation_length = _current->value.length;
                    _inappContext.EDReceiptValidation_dictionary = NULL;
                    _inappContext.EDReceiptValidation_parent = _currentContext;
                    _currentContext = &_inappContext;
                    break;
                }
            }
            if (!_currentContext->EDReceiptValidation_dictionary) {
                continue;
            }
            // Step out for InApp purchases
            if (_currentContext->EDReceiptValidation_parent) {
                _key1 = EDReceiptValidation_DataStoreInAppPurchase;
                _key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1);
                _value1 = EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key);
                if (!_value1) {
                    _value1 = EDReceiptValidation_CFArrayCreateMutable_(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
                    EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key, _value1);
                    EDReceiptValidation_CFRelease_(_value1);
                }
                EDReceiptValidation_CFArrayAppendValue_((CFMutableArrayRef) _value1, _currentContext->EDReceiptValidation_dictionary);
                EDReceiptValidation_CFRelease_(_currentContext->EDReceiptValidation_dictionary);
                EDReceiptValidation_CFRelease_(_key);
                _currentContext = _currentContext->EDReceiptValidation_parent;
            }
            if (*_currentContext->EDReceiptValidation_pointer) {
                continue;
            }
            break;
        }
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict);
        EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = _receiptContext.EDReceiptValidation_dictionary;
    EDReceiptValidation_GetReceiptInformation1__bail:
        if (_formatter) EDReceiptValidation_CFRelease_(_formatter);
        if (_asn1decoder) EDReceiptValidation_SecAsn1CoderRelease_(_asn1decoder);
        if (_content) EDReceiptValidation_CFRelease_(_content);
        if (_decoder) EDReceiptValidation_CFRelease_(_decoder);
    }
#else
#define EDReceiptValidation_GetReceiptInformation1(EDReceiptValidation_ctx) { \
EDReceiptValidation_Parsing _receiptContext, _inappContext, *_currentContext; \
CMSDecoderRef _decoder = NULL; \
CFDataRef _content = NULL; \
CFNumberRef _key = NULL; \
SecAsn1CoderRef _asn1decoder = NULL; \
OSStatus _status; \
EDReceiptValidation_Payload _payload = { NULL }; \
EDReceiptValidation_ReceiptAttribute *_current; \
CFDateFormatterRef _formatter; \
EDReceiptValidation_ReceiptAttributeType _key1, _key2; \
CFTypeRef _value1, _value2; \
EDReceiptValidation_ASN1_DATA _asn1data; \
int _type, _integer; \
_status = EDReceiptValidation_CMSDecoderCreate_(&_decoder); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData)); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderCopyContent_(_decoder, &_content); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_status = EDReceiptValidation_SecAsn1CoderCreate_(&_asn1decoder); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_formatter = EDReceiptValidation_CFDateFormatterCreate_(kCFAllocatorDefault, NULL, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle); \
_value1 = EDReceiptValidation_ObfuscationFunction4CF((EDReceiptValidation_strings[95]), 49, 48);  \
EDReceiptValidation_CFDateFormatterSetFormat_(_formatter, (CFStringRef) _value1); \
EDReceiptValidation_CFRelease_(_value1); \
_receiptContext.EDReceiptValidation_source = EDReceiptValidation_CFDataGetBytePtr_(_content); \
_receiptContext.EDReceiptValidation_length = EDReceiptValidation_CFDataGetLength_(_content); \
_receiptContext.EDReceiptValidation_dictionary = NULL; \
_receiptContext.EDReceiptValidation_parent = NULL; \
_currentContext = &_receiptContext; \
while(true) { \
if (!_currentContext->EDReceiptValidation_dictionary) { \
_currentContext->EDReceiptValidation_dictionary = EDReceiptValidation_CFDictionaryCreateMutable_(kCFAllocatorDefault, (CFIndex) 0x50, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks); \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _currentContext->EDReceiptValidation_source, _currentContext->EDReceiptValidation_length, EDReceiptValidation_kSetOfReceiptAttributeTemplate, &_payload); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_currentContext->EDReceiptValidation_pointer = _payload.attributes; \
} \
while(*_currentContext->EDReceiptValidation_pointer) { \
_current = *_currentContext->EDReceiptValidation_pointer++; \
EDReceiptValidation_GetReceiptInformation1X((&_current->type), (&_type)); \
_key1 = _key2 = EDReceiptValidation_DataStoreNone; \
_value1 = _value2 = NULL; \
switch(_type) { \
case EDReceiptValidation_ReceiptAttributeTypeBundleId: \
case EDReceiptValidation_ReceiptAttributeTypeBundleVersion: \
case EDReceiptValidation_InAppAttributeTypeProductIdentifer: \
case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer: \
case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer: \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1UTF8StringTemplate, &_asn1data); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingUTF8, false); \
_value2 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length); \
break; \
case EDReceiptValidation_InAppAttributeTypePurchaseDate: \
case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate: \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IA5StringTemplate, &_asn1data); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
_value1 = ((_EDReceiptValidation_CFStringCreateWithBytes_) EDReceiptValidation_CFStringCreateWithBytes_)(kCFAllocatorDefault, (const UInt8 *) _asn1data.data, (CFIndex) _asn1data.length, kCFStringEncodingASCII, false); \
_value2 = EDReceiptValidation_CFDateFormatterCreateDateFromString_(kCFAllocatorDefault, _formatter, (CFStringRef) _value1, NULL); \
break; \
case EDReceiptValidation_InAppAttributeTypeQuantity: \
_status = EDReceiptValidation_SecAsn1Decode_(_asn1decoder, _current->value.data, _current->value.length, kSecAsn1IntegerTemplate, &_asn1data); \
if (_status) { \
goto EDReceiptValidation_GetReceiptInformation1__bail; \
} \
EDReceiptValidation_GetReceiptInformation1X((&_asn1data), (&_integer)); \
_value1 = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_integer); \
break; \
case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue: \
case EDReceiptValidation_ReceiptAttributeTypeHash: \
_value1 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _current->value.data, (CFIndex) _current->value.length); \
break; \
default: \
break; \
} \
switch(_type) { \
case EDReceiptValidation_ReceiptAttributeTypeBundleId: \
_key1 = EDReceiptValidation_DataStoreBundleId; \
_key2 = EDReceiptValidation_DataStoreBundleIdData; \
break; \
case EDReceiptValidation_ReceiptAttributeTypeBundleVersion: \
_key1 = EDReceiptValidation_DataStoreBundleVersion; \
_key2 = EDReceiptValidation_DataStoreBundleVersionData; \
break; \
case EDReceiptValidation_InAppAttributeTypeProductIdentifer: \
_key1 = EDReceiptValidation_InAppAttributeTypeProductIdentifer; \
break; \
case EDReceiptValidation_InAppAttributeTypeTransactionIdentifer: \
_key1 = EDReceiptValidation_InAppAttributeTypeTransactionIdentifer; \
break; \
case EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer: \
_key1 = EDReceiptValidation_InAppAttributeTypeOriginalTransactionIdentifer; \
break; \
case EDReceiptValidation_InAppAttributeTypePurchaseDate: \
_key2 = EDReceiptValidation_InAppAttributeTypePurchaseDate; \
break; \
case EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate: \
_key2 = EDReceiptValidation_InAppAttributeTypeOriginalPurchaseDate; \
break; \
case EDReceiptValidation_InAppAttributeTypeQuantity: \
_key1 = EDReceiptValidation_InAppAttributeTypeQuantity; \
break; \
case EDReceiptValidation_ReceiptAttributeTypeOpaqueValue: \
_key1 = EDReceiptValidation_DataStoreOpaqueValue; \
break; \
case EDReceiptValidation_ReceiptAttributeTypeHash: \
_key1 = EDReceiptValidation_DataStoreHash; \
break; \
default: \
break; \
} \
if (_key1 != EDReceiptValidation_DataStoreNone) { \
_key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1); \
EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value1); \
EDReceiptValidation_CFRelease_(_key); \
} \
if (_key2 != EDReceiptValidation_DataStoreNone) { \
_key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key2); \
EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_dictionary, _key, _value2); \
EDReceiptValidation_CFRelease_(_key); \
} \
if (_value1) EDReceiptValidation_CFRelease_(_value1); \
if (_value2) EDReceiptValidation_CFRelease_(_value2); \
if (_type == EDReceiptValidation_ReceiptAttributeTypeInAppPurchase) { \
_inappContext.EDReceiptValidation_source = _current->value.data; \
_inappContext.EDReceiptValidation_length = _current->value.length; \
_inappContext.EDReceiptValidation_dictionary = NULL; \
_inappContext.EDReceiptValidation_parent = _currentContext; \
_currentContext = &_inappContext; \
break; \
} \
} \
if (!_currentContext->EDReceiptValidation_dictionary) { \
continue; \
} \
if (_currentContext->EDReceiptValidation_parent) { \
_key1 = EDReceiptValidation_DataStoreInAppPurchase; \
_key = EDReceiptValidation_CFNumberCreate_(kCFAllocatorDefault, kCFNumberIntType, &_key1); \
_value1 = EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key); \
if (!_value1) { \
_value1 = EDReceiptValidation_CFArrayCreateMutable_(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks); \
EDReceiptValidation_CFDictionaryAddValue_((CFMutableDictionaryRef) _currentContext->EDReceiptValidation_parent->EDReceiptValidation_dictionary, _key, _value1); \
EDReceiptValidation_CFRelease_(_value1); \
} \
EDReceiptValidation_CFArrayAppendValue_((CFMutableArrayRef) _value1, _currentContext->EDReceiptValidation_dictionary); \
EDReceiptValidation_CFRelease_(_currentContext->EDReceiptValidation_dictionary); \
EDReceiptValidation_CFRelease_(_key); \
_currentContext = _currentContext->EDReceiptValidation_parent; \
} \
if (*_currentContext->EDReceiptValidation_pointer) { \
continue; \
} \
break; \
} \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) EDReceiptValidation_CFRelease_(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict); \
EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = _receiptContext.EDReceiptValidation_dictionary; \
EDReceiptValidation_GetReceiptInformation1__bail: \
if (_formatter) EDReceiptValidation_CFRelease_(_formatter); \
if (_asn1decoder) EDReceiptValidation_SecAsn1CoderRelease_(_asn1decoder); \
if (_content) EDReceiptValidation_CFRelease_(_content); \
if (_decoder) EDReceiptValidation_CFRelease_(_decoder); \
}
#endif
    
    //
    // CodeBlock CheckBundleIdentifier
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckBundleIdentifier1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[53]), -108, 32);
        CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, kCFBundleIdentifierKey);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
            volatile int _code = 103; _code -= 46; _code *= 3; _code += 2;
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_str1);
            EDReceiptValidation_CFRelease_(_str2);
        }
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckBundleIdentifier1(EDReceiptValidation_ctx) { \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[53]), -108, 32); \
CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, kCFBundleIdentifierKey); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
volatile int _code = 14; _code -= 2; _code *= 14; _code += 5; \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_str1); \
EDReceiptValidation_CFRelease_(_str2); \
} \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckBundleVersion
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckBundleVersion1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        volatile int _code = 151; _code -= 94; _code *= 3; _code += 2;
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[115]), -9, 16);
        CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[60]), 20, 32);
        CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_str1);
        }
        EDReceiptValidation_CFRelease_(_str2);
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckBundleVersion1(EDReceiptValidation_ctx) { \
volatile int _code = 117; _code -= 60; _code *= 3; _code += 2; \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction1CF((EDReceiptValidation_strings[115]), -9, 16); \
CFStringRef _str2 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[60]), 20, 32); \
CFStringRef _str3 = (CFStringRef) EDReceiptValidation_CFBundleGetValueForInfoDictionaryKey_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle, _str2); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str3, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_str1); \
} \
EDReceiptValidation_CFRelease_(_str2); \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckBundleSignature
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckBundleSignature1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFStringRef _str1 = NULL;
        CFURLRef _url1 = NULL;
        SecStaticCodeRef _staticCode = NULL;
        SecRequirementRef _requirement = NULL;
        OSStatus _status;
        CFErrorRef _error = NULL;
        _url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle);
        _status = EDReceiptValidation_SecStaticCodeCreateWithPath_(_url1, kSecCSDefaultFlags, &_staticCode);
        if (_status != errSecSuccess) {
            goto EDReceiptValidation_CheckBundleSignature1__bail;
        }
        _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[121]), 34, 32);
        _status = EDReceiptValidation_SecRequirementCreateWithStringAndErrors_(_str1, kSecCSDefaultFlags, &_error, &_requirement);
        if (_status != errSecSuccess) {
            goto EDReceiptValidation_CheckBundleSignature1__bail;
        }
        _status = EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_(_staticCode, kSecCSDefaultFlags, _requirement, &_error);
        if (_status != errSecSuccess) {
            goto EDReceiptValidation_CheckBundleSignature1__bail;
        }
    EDReceiptValidation_CheckBundleSignature1__bail:
        if (_error) EDReceiptValidation_CFRelease_(_error);
        if (_staticCode) EDReceiptValidation_CFRelease_(_staticCode);
        if (_requirement) EDReceiptValidation_CFRelease_(_requirement);
        if (_str1) EDReceiptValidation_CFRelease_(_str1);
        if (_url1) EDReceiptValidation_CFRelease_(_url1);
    }
#else
#define EDReceiptValidation_CheckBundleSignature1(EDReceiptValidation_ctx) { \
CFStringRef _str1 = NULL; \
CFURLRef _url1 = NULL; \
SecStaticCodeRef _staticCode = NULL; \
SecRequirementRef _requirement = NULL; \
OSStatus _status; \
CFErrorRef _error = NULL; \
_url1 = EDReceiptValidation_CFBundleCopyBundleURL_((CFBundleRef) EDReceiptValidation_ctx->EDReceiptValidation_mainBundle); \
_status = EDReceiptValidation_SecStaticCodeCreateWithPath_(_url1, kSecCSDefaultFlags, &_staticCode); \
if (_status != errSecSuccess) { \
goto EDReceiptValidation_CheckBundleSignature1__bail; \
} \
_str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[121]), 34, 32); \
_status = EDReceiptValidation_SecRequirementCreateWithStringAndErrors_(_str1, kSecCSDefaultFlags, &_error, &_requirement); \
if (_status != errSecSuccess) { \
goto EDReceiptValidation_CheckBundleSignature1__bail; \
} \
_status = EDReceiptValidation_SecStaticCodeCheckValidityWithErrors_(_staticCode, kSecCSDefaultFlags, _requirement, &_error); \
if (_status != errSecSuccess) { \
goto EDReceiptValidation_CheckBundleSignature1__bail; \
} \
EDReceiptValidation_CheckBundleSignature1__bail: \
if (_error) EDReceiptValidation_CFRelease_(_error); \
if (_staticCode) EDReceiptValidation_CFRelease_(_staticCode); \
if (_requirement) EDReceiptValidation_CFRelease_(_requirement); \
if (_str1) EDReceiptValidation_CFRelease_(_str1); \
if (_url1) EDReceiptValidation_CFRelease_(_url1); \
}
#endif
    
    //
    // CodeBlock CheckReceiptSignature
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptSignature1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CMSDecoderRef _decoder = NULL;
        SecTrustRef _trustRef = NULL;
        SecPolicyRef _policyRef = NULL;
        volatile int _code = 111; _code -= 54; _code *= 3; _code += 2;
        OSStatus _status;
        _status = EDReceiptValidation_CMSDecoderCreate_(&_decoder);
        if (_status) {
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_trustRef);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
        _status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData));
        if (_status) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
        _status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder);
        if (_status) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
        CMSSignerStatus _signerStatus;
        OSStatus _certVerifyresult;
        _policyRef = EDReceiptValidation_SecPolicyCreateBasicX509_();
        _status = EDReceiptValidation_CMSDecoderCopySignerStatus_(_decoder, 0, _policyRef, TRUE, &_signerStatus, &_trustRef, &_certVerifyresult);
        if (_status) {
            EDReceiptValidation_exit_(_code);
            goto EDReceiptValidation_CheckReceiptSignature1__bail;
        }
    EDReceiptValidation_CheckReceiptSignature1__bail:
        if (_policyRef) EDReceiptValidation_CFRelease_(_policyRef);
        if (_trustRef) EDReceiptValidation_CFRelease_(_trustRef);
        if (_decoder) EDReceiptValidation_CFRelease_(_decoder);
    }
#else
#define EDReceiptValidation_CheckReceiptSignature1(EDReceiptValidation_ctx) { \
CMSDecoderRef _decoder = NULL; \
SecTrustRef _trustRef = NULL; \
SecPolicyRef _policyRef = NULL; \
volatile int _code = 141; _code -= 84; _code *= 3; _code += 2; \
OSStatus _status; \
_status = EDReceiptValidation_CMSDecoderCreate_(&_decoder); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_trustRef); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderUpdateMessage_(_decoder, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptData)); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
_status = EDReceiptValidation_CMSDecoderFinalizeMessage_(_decoder); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
CMSSignerStatus _signerStatus; \
OSStatus _certVerifyresult; \
_policyRef = EDReceiptValidation_SecPolicyCreateBasicX509_(); \
_status = EDReceiptValidation_CMSDecoderCopySignerStatus_(_decoder, 0, _policyRef, TRUE, &_signerStatus, &_trustRef, &_certVerifyresult); \
if (_status) { \
EDReceiptValidation_exit_(_code); \
goto EDReceiptValidation_CheckReceiptSignature1__bail; \
} \
EDReceiptValidation_CheckReceiptSignature1__bail: \
if (_policyRef) EDReceiptValidation_CFRelease_(_policyRef); \
if (_trustRef) EDReceiptValidation_CFRelease_(_trustRef); \
if (_decoder) EDReceiptValidation_CFRelease_(_decoder); \
}
#endif
    
    //
    // CodeBlock CheckReceiptIdentifier
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptIdentifier1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleId;
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[23]), 50, 32);
        volatile int _code = 60; _code -= 17; _code *= 4; _code += 1;
        CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
        }
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckReceiptIdentifier1(EDReceiptValidation_ctx) { \
EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleId; \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction3CF((EDReceiptValidation_strings[23]), 50, 32); \
volatile int _code = 83; _code -= 40; _code *= 4; _code += 1; \
CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
} \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckReceiptVersion
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptVersion1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleVersion;
        volatile int _code = 97; _code -= 40; _code *= 3; _code += 2;
        CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[19]), 76, 16);
        CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) {
            EDReceiptValidation_exit_(_code);
        }
        EDReceiptValidation_CFRelease_(_str1);
    }
#else
#define EDReceiptValidation_CheckReceiptVersion1(EDReceiptValidation_ctx) { \
EDReceiptValidation_ReceiptAttributeType _value = EDReceiptValidation_DataStoreBundleVersion; \
volatile int _code = 53; _code -= 19; _code *= 5; _code += 3; \
CFStringRef _str1 = EDReceiptValidation_ObfuscationFunction2CF((EDReceiptValidation_strings[19]), 76, 16); \
CFNumberRef _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
CFStringRef _str2 = (CFStringRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
if (EDReceiptValidation_CFStringCompare_(_str1, _str2, 0) != kCFCompareEqualTo) { \
EDReceiptValidation_exit_(_code); \
} \
EDReceiptValidation_CFRelease_(_str1); \
}
#endif
    
    //
    // CodeBlock CheckReceiptHash
    //
#if DEBUG
    inline static void EDReceiptValidation_CheckReceiptHash1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        CFDataRef _data1, _data2, _data3;
        CFMutableDataRef _data4;
        unsigned char _digest[0x50];
        volatile int _counter = 3; _counter -= 1; _counter *= 8; _counter += 4;
        EDReceiptValidation_ReceiptAttributeType _value;
        CFNumberRef _key;
        _value = EDReceiptValidation_DataStoreOpaqueValue;
        _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        _data1 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        _value = EDReceiptValidation_DataStoreBundleIdData;
        _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        _data2 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        _value = EDReceiptValidation_DataStoreHash;
        _key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value);
        _data3 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key);
        EDReceiptValidation_CFRelease_(_key);
        _data4 = EDReceiptValidation_CFDataCreateMutable_(kCFAllocatorDefault, 0);
        EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData));
        EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data1), EDReceiptValidation_CFDataGetLength_(_data1));
        EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data2), EDReceiptValidation_CFDataGetLength_(_data2));
        CC_SHA1_CTX hashctx;
        EDReceiptValidation_CC_SHA1_Init_(&hashctx);
        EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), (CC_LONG) EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData));
        EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_(_data1), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data1));
        EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_(_data2), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data2));
        EDReceiptValidation_CC_SHA1_Final_(_digest, &hashctx);
        volatile int _code = 73; _code -= 30; _code *= 4; _code += 1;
        CFDataRef _data5 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _digest, _counter);
        if (!EDReceiptValidation_CFEqual_(_data3, _data5)) {
            EDReceiptValidation_CFRelease_(_data5);
            EDReceiptValidation_exit_(_code);
            EDReceiptValidation_CFRelease_(_data5);
            goto EDReceiptValidation_CheckReceiptHash1__bail;
        }
        EDReceiptValidation_CFRelease_(_data5);
    EDReceiptValidation_CheckReceiptHash1__bail:
        EDReceiptValidation_CFRelease_(_data4);
    }
#else
#define EDReceiptValidation_CheckReceiptHash1(EDReceiptValidation_ctx) { \
CFDataRef _data1, _data2, _data3; \
CFMutableDataRef _data4; \
unsigned char _digest[0x50]; \
volatile int _counter = 13; _counter -= 7; _counter *= 3; _counter += 2; \
EDReceiptValidation_ReceiptAttributeType _value; \
CFNumberRef _key; \
_value = EDReceiptValidation_DataStoreOpaqueValue; \
_key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
_data1 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
_value = EDReceiptValidation_DataStoreBundleIdData; \
_key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
_data2 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
_value = EDReceiptValidation_DataStoreHash; \
_key = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &_value); \
_data3 = (CFDataRef) EDReceiptValidation_CFDictionaryGetValue_((CFDictionaryRef) EDReceiptValidation_ctx->EDReceiptValidation_receiptDict, _key); \
EDReceiptValidation_CFRelease_(_key); \
_data4 = EDReceiptValidation_CFDataCreateMutable_(kCFAllocatorDefault, 0); \
EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData)); \
EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data1), EDReceiptValidation_CFDataGetLength_(_data1)); \
EDReceiptValidation_CFDataAppendBytes_(_data4, EDReceiptValidation_CFDataGetBytePtr_(_data2), EDReceiptValidation_CFDataGetLength_(_data2)); \
CC_SHA1_CTX hashctx; \
EDReceiptValidation_CC_SHA1_Init_(&hashctx); \
EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData), (CC_LONG) EDReceiptValidation_CFDataGetLength_((CFDataRef) EDReceiptValidation_ctx->EDReceiptValidation_macData)); \
EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_(_data1), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data1)); \
EDReceiptValidation_CC_SHA1_Update_(&hashctx, (const void *) EDReceiptValidation_CFDataGetBytePtr_(_data2), (CC_LONG) EDReceiptValidation_CFDataGetLength_(_data2)); \
EDReceiptValidation_CC_SHA1_Final_(_digest, &hashctx); \
volatile int _code = 32; _code -= 8; _code *= 7; _code += 5; \
CFDataRef _data5 = EDReceiptValidation_CFDataCreate_(kCFAllocatorDefault, (const UInt8 *) _digest, _counter); \
if (!EDReceiptValidation_CFEqual_(_data3, _data5)) { \
EDReceiptValidation_CFRelease_(_data5); \
EDReceiptValidation_exit_(_code); \
EDReceiptValidation_CFRelease_(_data5); \
goto EDReceiptValidation_CheckReceiptHash1__bail; \
} \
EDReceiptValidation_CFRelease_(_data5); \
EDReceiptValidation_CheckReceiptHash1__bail: \
EDReceiptValidation_CFRelease_(_data4); \
}
#endif
    
    //
    // CodeBlock Runner
    //
#ifdef RUNNER
#define EDRUNNER_SIGNATURE int(*_EDRUNNER_)(int argc, const char *argv[])
    typedef EDRUNNER_SIGNATURE;
    static long *EDRUNNER_ = ((long *)EDRUNNER - 2830);
    
#endif
    
    inline static void EDReceiptValidation_Runner1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        
#ifdef EDRUNNER
        
        ((_EDRUNNER_)(EDRUNNER_ + 2830))(EDReceiptValidation_ctx->EDReceiptValidation_argc, EDReceiptValidation_ctx->EDReceiptValidation_argv);
        
#else
        
        EDReceiptValidation_NSApplicationMain_(EDReceiptValidation_ctx->EDReceiptValidation_argc, EDReceiptValidation_ctx->EDReceiptValidation_argv);
        
#endif
        
    }
    
    //
    // CodeBlock CleanUp
    //
#if DEBUG
    inline static void EDReceiptValidation_CleanUp1(EDReceiptValidation_Context *EDReceiptValidation_ctx) {
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) {
            CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_receiptData);
            EDReceiptValidation_ctx->EDReceiptValidation_receiptData = NULL;
        }
        if (EDReceiptValidation_ctx->EDReceiptValidation_macData) {
            CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_macData);
            EDReceiptValidation_ctx->EDReceiptValidation_macData = NULL;
        }
        if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) {
            CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict);
            EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = NULL;
        }
    }
#else
#define EDReceiptValidation_CleanUp1(EDReceiptValidation_ctx) { \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptData) { \
CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_receiptData); \
EDReceiptValidation_ctx->EDReceiptValidation_receiptData = NULL; \
} \
if (EDReceiptValidation_ctx->EDReceiptValidation_macData) { \
CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_macData); \
EDReceiptValidation_ctx->EDReceiptValidation_macData = NULL; \
} \
if (EDReceiptValidation_ctx->EDReceiptValidation_receiptDict) { \
CFRelease(EDReceiptValidation_ctx->EDReceiptValidation_receiptDict); \
EDReceiptValidation_ctx->EDReceiptValidation_receiptDict = NULL; \
} \
}
#endif
    
    
    
    //
    // Entry point for receipt/InApp validation
    //
#if DEBUG || RECEIGEN_PEDANTIC
    inline static int EDCheckReceiptAndRun(int argc, const char *argv[]) {
        EDReceiptValidation_Context EDReceiptValidation_ctx0 = { NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
        EDReceiptValidation_ctx0.EDReceiptValidation_argc = argc;
        EDReceiptValidation_ctx0.EDReceiptValidation_argv = (const char **) argv;
        
        volatile int idx = 243;
        while(idx != 1479) {
            switch(idx) {
                case 3273:
                {
                    EDReceiptValidation_CheckReceiptVersion1((&EDReceiptValidation_ctx0));
                    idx -= 1927; idx *= 3; idx += 1;
                    break;
                }
                case 217:
                {
                    EDReceiptValidation_GetReceiptInformation1((&EDReceiptValidation_ctx0));
                    idx -= 21; idx *= 12; idx += 5;
                    break;
                }
                case 4039:
                {
                    EDReceiptValidation_CheckReceiptHash1((&EDReceiptValidation_ctx0));
                    idx += 3149; idx /= 4;
                    break;
                }
                case 596:
                {
                    EDReceiptValidation_CheckBundleVersion1((&EDReceiptValidation_ctx0));
                    idx -= 396; idx *= 3; idx += 2; 
                    break;
                }
                case 1905:
                {
                    EDReceiptValidation_CleanUp1((&EDReceiptValidation_ctx0));
                    idx += 1053; idx /= 2; 
                    break;
                }
                case 602:
                {
                    EDReceiptValidation_CheckBundleSignature1((&EDReceiptValidation_ctx0));
                    idx -= 329; idx *= 3; idx += 1; 
                    break;
                }
                case 243:
                {
                    EDReceiptValidation_GetMainBundle1((&EDReceiptValidation_ctx0));
                    idx -= 39; idx *= 12; idx += 5; 
                    break;
                }
                case 1057:
                {
                    EDReceiptValidation_CheckReceiptIdentifier1((&EDReceiptValidation_ctx0));
                    idx -= 403; idx *= 5; idx += 3; 
                    break;
                }
                case 2357:
                {
                    EDReceiptValidation_CheckBundleIdentifier1((&EDReceiptValidation_ctx0));
                    idx += 623; idx /= 5; 
                    break;
                }
                case 1797:
                {
                    EDReceiptValidation_Runner1((&EDReceiptValidation_ctx0));
                    idx -= 1162; idx *= 3; 
                    break;
                }
                case 2453:
                {
                    EDReceiptValidation_LoadReceipt1((&EDReceiptValidation_ctx0));
                    idx += 1501; idx /= 3; 
                    break;
                }
                case 820:
                {
                    EDReceiptValidation_CheckReceiptSignature1((&EDReceiptValidation_ctx0));
                    idx -= 468; idx *= 3; idx += 1; 
                    break;
                }
                case 1318:
                {
                    EDReceiptValidation_GetMacAddress1((&EDReceiptValidation_ctx0));
                    idx += 418; idx /= 8; 
                    break;
                }
            }
        }
        return 0;
    }
    
#else
#define EDCheckReceiptAndRun(argc, argv) ({ \
EDReceiptValidation_Context EDReceiptValidation_ctx0 = { NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }; \
EDReceiptValidation_ctx0.EDReceiptValidation_argc = argc; \
EDReceiptValidation_ctx0.EDReceiptValidation_argv = (const char **) argv; \
\
volatile int idx = 243; \
while(idx != 1479) { \
switch(idx) { \
case 3273: \
{ \
EDReceiptValidation_CheckReceiptVersion1((&EDReceiptValidation_ctx0)); \
idx -= 1927; idx *= 3; idx += 1;  \
break; \
} \
case 217: \
{ \
EDReceiptValidation_GetReceiptInformation1((&EDReceiptValidation_ctx0)); \
idx -= 21; idx *= 12; idx += 5;  \
break; \
} \
case 4039: \
{ \
EDReceiptValidation_CheckReceiptHash1((&EDReceiptValidation_ctx0)); \
idx += 3149; idx /= 4;  \
break; \
} \
case 596: \
{ \
EDReceiptValidation_CheckBundleVersion1((&EDReceiptValidation_ctx0)); \
idx -= 396; idx *= 3; idx += 2;  \
break; \
} \
case 1905: \
{ \
EDReceiptValidation_CleanUp1((&EDReceiptValidation_ctx0)); \
idx += 1053; idx /= 2;  \
break; \
} \
case 602: \
{ \
EDReceiptValidation_CheckBundleSignature1((&EDReceiptValidation_ctx0)); \
idx -= 329; idx *= 3; idx += 1;  \
break; \
} \
case 243: \
{ \
EDReceiptValidation_GetMainBundle1((&EDReceiptValidation_ctx0)); \
idx -= 39; idx *= 12; idx += 5;  \
break; \
} \
case 1057: \
{ \
EDReceiptValidation_CheckReceiptIdentifier1((&EDReceiptValidation_ctx0)); \
idx -= 403; idx *= 5; idx += 3;  \
break; \
} \
case 2357: \
{ \
EDReceiptValidation_CheckBundleIdentifier1((&EDReceiptValidation_ctx0)); \
idx += 623; idx /= 5;  \
break; \
} \
case 1797: \
{ \
EDReceiptValidation_Runner1((&EDReceiptValidation_ctx0)); \
idx -= 1162; idx *= 3;  \
break; \
} \
case 2453: \
{ \
EDReceiptValidation_LoadReceipt1((&EDReceiptValidation_ctx0)); \
idx += 1501; idx /= 3;  \
break; \
} \
case 820: \
{ \
EDReceiptValidation_CheckReceiptSignature1((&EDReceiptValidation_ctx0)); \
idx -= 468; idx *= 3; idx += 1;  \
break; \
} \
case 1318: \
{ \
EDReceiptValidation_GetMacAddress1((&EDReceiptValidation_ctx0)); \
idx += 418; idx /= 8;  \
break; \
} \
} \
} \
0; \
}) \

#endif
    
    
    //
    // C++ epilogue
    //
#ifdef __cplusplus
}
#endif

